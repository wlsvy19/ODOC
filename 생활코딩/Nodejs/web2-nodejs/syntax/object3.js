// var v1 = 'v1';
// //10000줄의 코드가 있다고 가정
// v1 = 'fif'; //v1을 바꾸기라도 한다면 끔찍하다
// var v2 = 'v2';


//객체를 사용하여 정리정돈(그룹핑) 할 수 있다.
var o = {
    v1: 'v1',
    v2: 'v2',
    f1: function () { //3. 이름없는 함수로 만든다.
        // console.log(o.v1); //4. 단점: 객체의 이름을 알고 있어야함(객체의 이름이 바뀌면 에러)

        //5. 함수가 객체 안에서 사용될때, 그 함수가 자신이 사용하는 객체를 참조할 수 있는 특수한 약속이 필요하다
        console.log(this.v1);
    },
    f2: function () {
        console.log(this.v2);
    }
}

//1. 1억개의 코드가 있다...
// function f1(){
//     console.log(o.v1);
// }
// function f2(){
//     console.log(o.v2);
// }

//2. 신입이 함수 f1을 만들어 버리면 위에 있던 f1은 못쓴다.
// function f1(){
//     cons
// }

// f1();
// f2();

//4. 함수를 값으로 사용하여 보기쉽게 사용할 수 있다.
o.f1();
o.f2();

//객체란 서로 연관된 데이터와 그 데이터를 처리하는 방법인 함수를 그룹핑 해서 코드의 복잡성을 낮추는 수납상자
// =>결론 : 함수는 값이다. 객체는 값을 저장하는 그릇이다.