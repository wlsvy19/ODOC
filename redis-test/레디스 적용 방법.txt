-----------------------Redis 적용 방법-----------------------

1. 서버(리눅스) 에 redis 설치

    1) Redis 설치
        (1) 우분투 서버에 Redis 설치
            sudo apt update
            sudo apt install redis-server

        (2) Redis 서버 시작
            Redis는 기본적으로 설치 후 자동으로 실행되지만, 만약 실행되지 않았다면 수동으로 시작 가능
            sudo systemctl start redis-server

        (3) Redis 서버 상태 확인
            sudo systemctl status redis-server

        (4) Redis 서버 자동 시작 설정
            서버가 재부팅되었을 때 Redis가 자동으로 시작되도록 설정
            sudo systemctl enable redis-server


    2) redis 설정 (옵션)
        설치 후, redis 설정 파일을 수정 - 기본 설정 파일은 /etc/redis/redis.conf

        (1) 설정 파일 편집
            sudo nano /etc/redis/redis.conf

        (2) 핫 스왑과 보안을 위한 설정
            바인딩 주소: Redis는 기본적으로 127.0.0.1에서만 접근을 허용하는데, 다른 서버나 클라이언트에서 접근하려면 bind 항목을 수정
            bind 0.0.0.0  # 외부에서 모든 IP에서 접근 가능
            protected-mode no  # 보호 모드 비활성화
            

        (3) 비밀번호 설정: 보안을 위해 Redis에 비밀번호를 설정 가능(귀찮으니 빼고)
            requirepass yourpassword


        (4) 설정을 변경한 후에는 Redis 서버를 재시작해야 변경 사항이 적용
            sudo systemctl restart redis-server

    3) redis 클라이언트 연결 확인
        (1) redis-cli
            MONITOR
            INFO
        등 명령어로 redis 확인

2. 백엔드(Spring boot) 설정
    1) pom.xml 에 라이브러리 추가
        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

    2) application.yml - spring 에 redis 설정 추가
        spring:
          profiles:
            active: dev
          main:
            allow-bean-definition-overriding: true
          servlet:
            multipart:
              enabled: true
              location: ${java.io.tmpdir}
              max-file-size: 10MB
              max-request-size: 10MB

          # 캐시 설정 (Redis 사용) <- 여기부터
          cache:
            type: redis

          redis:
            host: 10.100.10.148          # Redis 서버 호스트 (예: localhost, 또는 Redis 서버의 IP)
            port: 6379               # Redis 서버 포트 (기본값: 6379)
            password:
            timeout: 2000000            # Redis 연결 타임아웃 (밀리초 단위)
            lettuce:
              pool:
                max-active: 10       # 최대 활성 커넥션 수
                max-idle: 5          # 최대 대기 커넥션 수
                min-idle: 1          # 최소 대기 커넥션 수
            jedis:
              pool:
                max-active: 10       # 최대 활성 커넥션 수
                max-idle: 5          # 최대 대기 커넥션 수
                min-idle: 1          # 최소 대기 커넥션 수
        
    
    3) RedisConfig.java 코드 (redis 설정 코드)
        package gdtcs.config;

        import java.time.Duration;
        import java.util.List;
        import java.util.Map;

        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.data.redis.cache.RedisCacheConfiguration;
        import org.springframework.data.redis.cache.RedisCacheManager;
        import org.springframework.data.redis.connection.RedisConnectionFactory;
        import org.springframework.data.redis.core.RedisTemplate;
        import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
        import org.springframework.data.redis.serializer.StringRedisSerializer;

        @Configuration
        public class RedisConfig {

            @Bean
            public RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
                RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()
                        .entryTtl(Duration.ofMinutes(10)); // 캐시 만료 시간 설정 (10분) <- 우선순위 2

                return RedisCacheManager.builder(redisConnectionFactory)
                        .cacheDefaults(cacheConfiguration)
                        .build();
            }

            @Bean // RedisTemplate 을 스프링 컨테이너에 빈으로 등록
            public RedisTemplate<String, List<Map<String, Object>>> redisTemplate(RedisConnectionFactory factory) {
                RedisTemplate<String, List<Map<String, Object>>> template = new RedisTemplate<>();
                template.setConnectionFactory(factory);
                // 사람이 읽을 수 있도록 직렬화 설정 추가
                template.setKeySerializer(new StringRedisSerializer());
                template.setValueSerializer(new GenericJackson2JsonRedisSerializer());
                return template;
            }
        }

    4) 서비스 구현단 적용 코드
    // WorkServiceImpl.java -> 스프링 컨테이너에 빈으로 등록된 RedisTemplate을 가져오기
        ...
        private final RedisTemplate<String, List<Map<String, Object>>> redisTemplate;
        
        @Autowired
        public WorkServiceImpl(RedisTemplate<String, List<Map<String, Object>>> redisTemplate) {
            this.redisTemplate = redisTemplate;
        }
        ...
    // 적용 코드
        @Override
        public List<Map<String, Object>> getPassPrimDtl(Map<String, Object> param) throws Exception {
            // Redis 키 생성 (파라미터를 이용한 고유 키 생성)
            String redisKey = generateRedisKey(param);

            // Redis에서 캐시된 데이터 조회
            List<Map<String, Object>> cachedData = redisTemplate.opsForValue().get(redisKey);
            if (cachedData != null) {
                // 캐시된 데이터가 있으면 바로 반환
                System.out.println("Returning data from Redis cache for key: " + redisKey);

                return cachedData;
            }

            // 캐시된 데이터가 없으면 DB에서 조회
            System.out.println("Fetching data from database with key: " + redisKey);
            List<Map<String, Object>> result = workMapper.selectPassPrimDtl(param);

            // 우선순위1. DB에서 조회한 데이터를 Redis에 캐시 (TTL 1일 설정)
            redisTemplate.opsForValue().set(redisKey, result, 1, TimeUnit.DAYS); // TTL 1일 <- 우선순위 1
            
            //redisTemplate.opsForValue().set(redisKey, result, 1, TimeUnit.HOURS); // 1시간 저장
            //redisTemplate.opsForValue().set(redisKey, result, 8700, TimeUnit.SECONDS); // 8700초 (2시간25분) 저장

            return result;
        }

        // Redis 키 생성 (파라미터를 기반으로 유니크한 키 생성) // 추후 [로직을 고려하여] 유니크한 키로 공통 메서드 만들어야함
        private String generateRedisKey(Map<String, Object> param) {
            return String.format("getPassPrimDtl::%s:%s", 
                                 param.get("START_WORK_DATE"), 
                                 param.get("END_WORK_DATE")); // 파라미터에 따라 키 생성
        }
