<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gdtcs.sales.mapper.SalesMapper">
	<select id="getTaxCompanyList" parameterType="Map" resultType="Map">
		SELECT 
			ROW_NUMBER() OVER(ORDER BY TCO.CO_NM1) as ROW_NUM, 
			FC_CHG_FORMAT(TCO.INST_DT, '1') AS INST_DT,
			FC_CHG_FORMAT(TCO.CO_NO, '2') AS CO_NO,
			TCO.CO_NM1,
			TCO.REPR_NM,
			NVL(TCO.ADDR1, '-') AS ADDR1,
			NVL(TCO.ADDR2, '-') AS ADDR2,
			NVL(TCO.USE_YN, '-') AS USE_YN
		FROM PROC_TAXINVCCO TCO
		WHERE 1=1
			AND TCO.IC_CODE = #{IC_CODE}
			<if test='CO_NO!=null and !CO_NO.equals("")'>
			AND TCO.CO_NO LIKE '%' || #{CO_NO} || '%'
			</if>
			<if test='CO_NM1!=null and !CO_NM1.equals("")'>
			AND TCO.CO_NM1 LIKE '%' || #{CO_NM1} || '%'
			</if>
			<if test='REPR_NM!=null and !REPR_NM.equals("")'>
			AND TCO.REPR_NM LIKE '%' || #{REPR_NM} || '%'
			</if>
        ORDER BY TCO.CO_NM1
	</select>
	<select id="getTaxCompanyDetailList" parameterType="Map" resultType="Map">
		SELECT 
			NVL(TCO.SCTR, '-') AS SCTR,
			FC_CHG_FORMAT(TCO.CO_NO, '2') AS CO_NO,
			TCO.CO_TEL,
			NVL(TCO.BSCN, '-') AS BSCN, 
			TCO.CO_NM1,
			TCO.MNG_TEL1,
			TCO.REPR_NM,
			NVL(TCO.CO_NM2, '-') AS CO_NM2, 
			TCO.MNG_TEL2,
			NVL(TCO.ADDR1, '-') AS ADDR1, 
			NVL(TCO.MNG_ID, '-') AS MNG_ID, 
			NVL(TCO.IN_CO_NO, '-') AS IN_CO_NO, 
			NVL(TCO.ADDR2, '-') AS ADDR2, 
			NVL(TCO.MNG_DEP, '-') AS MNG_DEP, 
			NVL(TCO.MNG_NM, '-') AS MNG_NM, 
			TCO.EMAIL,
			NVL(TCO.NOTE, '-') AS NOTE 
		FROM PROC_TAXINVCCO TCO
		WHERE TCO.IC_CODE = #{IC_CODE} AND TCO.CO_NO = #{CO_NO}
	</select>
	<select id="getTaxCompanyCardList" parameterType="Map" resultType="Map">
		SELECT 
			ROWNUM AS ROW_NUM, 
			FC_CHG_FORMAT(TCARD.CO_NO, '2') AS CO_NO,
			FC_CHG_FORMAT(TCARD.ECARD_NO, '3') AS ECARD_NO,
			FC_CHG_FORMAT(TCARD.INST_DT, '1') AS INST_DT,
			DECODE(TCARD.USE_DIV, '0', 'Y', 'N') AS USE_DIV
		FROM 
		PROC_TAXINVCCARD TCARD 
		WHERE TCARD.IC_CODE = #{IC_CODE} AND TCARD.CO_NO = #{CO_NO} AND TCARD.USE_DIV = 0
	</select>
	
	<insert id="insertTaxCompany" parameterType="Map">
		INSERT INTO "GDTCS"."PROC_TAXINVCCO" (IC_CODE, CO_NO, CO_NM1, REPR_NM, SCTR, BSCN, INST_DT, ADDR1, ADDR2, NOTE, IN_CO_NO, EMAIL, MNG_ID, MNG_DEP, MNG_NM, MNG_TEL1, MNG_TEL2, CO_TEL, USE_YN) 
		VALUES (#{IC_CODE}, #{CO_NO}, #{CO_NM1}, #{REPR_NM}, #{SCTR}, #{BSCN}, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ADDR1}, #{ADDR2}, #{NOTE}, #{IN_CO_NO}, #{EMAIL}, #{MNG_ID}, #{MNG_DEP}, #{MNG_NM}, #{MNG_TEL1}, #{MNG_TEL2}, #{CO_TEL}, #{USE_YN})
	</insert>
	<update id="updateTaxCompany" parameterType="Map">
		UPDATE PROC_TAXINVCCO
		SET CO_NO=#{CO_NO}, CO_NM1=#{CO_NM1}, REPR_NM=#{REPR_NM}, SCTR=#{SCTR}, BSCN=#{BSCN}, ADDR1=#{ADDR1}, ADDR2=#{ADDR2}, NOTE=#{NOTE}, IN_CO_NO=#{IN_CO_NO}, EMAIL=#{EMAIL}, MNG_ID=#{MNG_ID}, MNG_DEP=#{MNG_DEP}, MNG_NM=#{MNG_NM}, MNG_TEL1=#{MNG_TEL1}, MNG_TEL2=#{MNG_TEL2}, CO_TEL=#{CO_TEL}, USE_YN=#{USE_YN}
		WHERE IC_CODE = #{IC_CODE} AND CO_NO = #{CO_NO}
	</update>
	<delete id="deleteTaxCompany" parameterType="Map">
		DELETE "GDTCS"."PROC_TAXINVCCO" 
		WHERE IC_CODE = #{IC_CODE} AND CO_NO = #{CO_NO}
	</delete>
	
	<insert id="insertCompanyCard" parameterType="Map">
		INSERT INTO "GDTCS"."PROC_TAXINVCCARD" (IC_CODE, CO_NO, ECARD_NO, ADMIN_ID, INST_DT, USE_DIV) 
		VALUES (#{IC_CODE}, #{CO_NO}, #{ECARD_NO}, #{ADMIN_ID}, #{INST_DT}, #{USE_DIV})
	</insert>
	<update id="updateCompanyCard" parameterType="Map">
		UPDATE PROC_TAXINVCCARD
		SET CO_NO=#{CO_NO}, ECARD_NO=#{NEW_ECARD_NO}, ADMIN_ID=#{ADMIN_ID}, USE_DIV=#{USE_DIV}
		WHERE IC_CODE = #{IC_CODE} AND CO_NO = #{CO_NO} AND ECARD_NO=#{ECARD_NO}
	</update>
	<delete id="deleteCompanyCard" parameterType="Map">
		DELETE "GDTCS"."PROC_TAXINVCCARD" 
		WHERE IC_CODE = #{IC_CODE} AND CO_NO = #{CO_NO} AND ECARD_NO = #{ECARD_NO}
	</delete>
	
	<select id="getTaxbillPublishList" parameterType="Map" resultType="Map">
        SELECT
            ROW_NUMBER() OVER(ORDER BY TCO.CO_NM1) AS ROW_NUM,
            FC_CHG_FORMAT(TCO.CO_NO, '2') AS CO_NO,
            TCO.CO_NM1,
            TCO.REPR_NM,
			NVL(TCO.MNG_NM, '-') AS MNG_NM, 
            TCO.EMAIL,
            NVL(FC_CHG_FORMAT(ECARD_CALC.COUNT, '4'), TO_CHAR(0)) AS COUNT,
            NVL(FC_CHG_FORMAT(ECARD_CALC.SUP_PRICE, '4'), TO_CHAR(0)) AS SUP_PRICE,
            NVL(FC_CHG_FORMAT(ECARD_CALC.VAT, '4'), TO_CHAR(0)) AS VAT,
            NVL(FC_CHG_FORMAT(ECARD_CALC.SUM_PRICE, '4'), TO_CHAR(0)) AS SUM_PRICE
        FROM 
            PROC_TAXINVCCO TCO LEFT JOIN 
            	(
            	SELECT 
            		CO_NO,
            		COUNT(CARD.IC_CODE) COUNT, ROUND(SUM(WTHD_FARE)/1.1) SUP_PRICE, 
            		ROUND(SUM(WTHD_FARE)/11) VAT, 
            		SUM(WTHD_FARE) SUM_PRICE 
            	FROM PROC_TAXINVCCARD CARD JOIN PRIM_ECARDHAND ECARD
            	ON CARD.ECARD_NO = ECARD.CARD_NO AND ECARD.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
            	GROUP BY CO_NO
            	) ECARD_CALC ON TCO.CO_NO = ECARD_CALC.CO_NO
        WHERE 1=1
        	AND TCO.IC_CODE = #{IC_CODE}
		<if test='CO_NO!=null and !CO_NO.equals("")'>
			AND TCO.CO_NO like '%' || #{CO_NO} || '%'
		</if>
		<if test='CO_NM1!=null and !CO_NM1.equals("")'>
			AND TCO.CO_NM1 like '%' || #{CO_NM1} || '%'
		</if>
        ORDER BY TCO.CO_NM1
	</select>
	<select id="getTaxbillPublishHist" parameterType="Map" resultType="Map">
        SELECT
            ROW_NUMBER() OVER (ORDER BY TCI.TAXINVC_NO) ROW_NUM,
            TCI.TAXINVC_NO,
            FC_CHG_FORMAT(TCI.CO_NO, '2') AS CO_NO,
            FC_CHG_FORMAT(TCI.ISS_DATE, '11') AS ISS_DATE,
            FC_CHG_FORMAT(TCI.CARD_NO, '3') AS CARD_NO,
            NVL(CAR_TYPE,'-') AS CAR_TYPE,
            FC_CHG_FORMAT(TCI.WORK_DATE, '1') AS WORK_DATE,
            TCI.WORK_NO,
            TCI.HAND_SNO,
            FC_CHG_FORMAT(TCI.HAND_DT, '11') AS HAND_DT,
            '전자카드' AS ISS_DIV,
            NVL(FC_CHG_FORMAT(TCI.PAY_FARE,'4'), 0) AS PAY_FARE
        FROM PROC_TAXINVCISS TCI
        WHERE 1=1
	        AND IC_CODE = #{IC_CODE}
	        AND DECODE(#{DATE_TYPE}, 'ISS_DATE', ISS_DATE, WORK_DATE) BETWEEN #{START_DATE} AND #{END_DATE}
		<if test='CO_NO!=null and !CO_NO.equals("")'>
	        AND CO_NO LIKE '%' || #{CO_NO} || '%'
		</if>
		<if test='WORK_NO!=null and !WORK_NO.equals("")'>
	        AND WORK_NO LIKE '%' || #{WORK_NO} || '%'
		</if>
		<if test='CARD_NO!=null and !CARD_NO.equals("")'>
	        AND CARD_NO LIKE '%' || #{CARD_NO} || '%'
        </if>
        ORDER BY TCI.TAXINVC_NO
	</select>
	
	<select id="countCompany" parameterType="Map" resultType="int">
		SELECT COUNT(CO_NO) FROM PROC_TAXINVCCO WHERE IC_CODE = '094' AND CO_NO = #{CO_NO}
	</select>
	<select id="countCard" parameterType="Map" resultType="int">
		SELECT COUNT(CO_NO) FROM PROC_TAXINVCCARD WHERE IC_CODE = '094' AND CO_NO = #{CO_NO} AND ECARD_NO = #{ECARD_NO}
	</select>
	<select id="countCompanyCard" parameterType="Map" resultType="int">
		SELECT COUNT(CO_NO) FROM PROC_TAXINVCCARD WHERE IC_CODE = '094' AND CO_NO = #{CO_NO}
	</select>
	
    <!-- 일별통행처리현황-일별-->
    <select id="getDailyTrafficProcessDay" resultType="hashmap">
    	/* Mapper ID : getDailyTrafficProcessDay */
        SELECT
            T1.IC_CODE IC_CODE,
            FC_CHG_ICNM(T1.IC_CODE) IC_NM, --영업소명
            TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') WORK_DATE, --근무일자

            NVL(TRIM(TO_CHAR(SUM(T1.CAR6_CNT_SUM), '999,999,999,999')),0) CAR6_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_CNT_SUM), '999,999,999,999')),0) CAR1_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_CNT_SUM), '999,999,999,999')),0) CAR2_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_CNT_SUM+T1.CAR4_CNT_SUM+T1.CAR5_CNT_SUM), '999,999,999,999')),0) CAR345_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CNT_SUM), '999,999,999,999')),0) CNT_SUM, --교통량 합계 (건수)

            NVL(TRIM(TO_CHAR(SUM(T1.CAR6_FARE_SUM), '999,999,999,999')),0) CAR6_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_FARE_SUM), '999,999,999,999')),0) CAR1_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_FARE_SUM), '999,999,999,999')),0) CAR2_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_FARE_SUM+T1.CAR4_FARE_SUM+T1.CAR5_FARE_SUM), '999,999,999,999')),0) CAR345_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(NVL(T1.FARE_SUM, 0)), '999,999,999,999')),0) FARE_SUM, -- 교통량 합계(금액)

			NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_ELCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_ELCARD_COUNT,

            NVL(TRIM(TO_CHAR(SUM(T1.LANE_EXMT_SUM), '999,999,999,999')),0) LANE_EXMT_SUM,
            --TRIM(TO_CHAR(SUM((T1.CNT_SUM)-(T1.LANE_PAY_EPCARD_COUNT+T1.LANE_PAY_ELCARD_COUNT)-(T1.LANE_PAY_DC_EPCARD_COUNT+T1.LANE_PAY_DC_ELCARD_COUNT)-(T1.LANE_EXMT_SUM)), '999,999,999,999')) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_ESCP_VLTN), '999,999,999,999')),0) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_OFCNOT_SUM), '999,999,999,999')),0) LANE_OFCNOT_SUM
      
        FROM (
                 SELECT
                     IC_CODE,
                     TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYYMMDD') WORK_DATE,
                     --SUM_DIV (0: 건수, 1: 금액)

                     /* 차종별 건수 */
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) CNT_SUM,
                        
                        
                        
                     /* 차종별 금액 */
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) FARE_SUM,

                     /* 수납구분(일반) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0',VLTN_DC_NOML_EPCARD+VLTN_NOML_EPCARD+LANE_PAY_EPCARD_ETC, 0)) LANE_PAY_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0',VLTN_NOML_ELCARD+VLTN_DC_NOML_ELCARD+LANE_PAY_ELCARD_ETC, 0)) LANE_PAY_ELCARD_COUNT,          --차로수납_전자카드(후불)

                     /* 수납구분(할인) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC, 0)) LANE_PAY_DC_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC, 0)) LANE_PAY_DC_ELCARD_COUNT,          --차로수납_전자카드(후불)


                     /*  수납구분 건수
                         면제, 사무실, 사무실(집계제외),
                     */

                     -- 차로에서 면제 버튼 누른 것만 넣음
                     SUM(DECODE(SUM_DIV, '0', LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_EXMT+VLTN_EXMT_BUSAN, 0)) LANE_EXMT_SUM,                          --면제
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+EXMT_UNP, 0)) LANE_ESCP_VLTN,                          --위반(미납,현금,사전등록) )
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNFT_ECT, 0)) LANE_OFCNOT_SUM       -- 위반 부적격 집계제외
					 
                 FROM PROC_DAYFINPAYTOT
                 WHERE IC_CODE = #{IC_CODE}
                   AND WORK_DATE BETWEEN #{START_DATE}  AND #{END_DATE}
                 GROUP BY IC_CODE, TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYYMMDD')
             ) T1
        GROUP BY T1.IC_CODE, TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMMDD'), 'YYYY-MM-DD')
        ORDER BY TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMMDD'), 'YYYY-MM-DD')
    </select>

    <!-- 일별통행처리현황-월별-->
    <select id="getDailyTrafficProcessMonth" resultType="hashmap">
    /* Mapper ID : getDailyTrafficProcessMonth */
        SELECT
            T1.IC_CODE IC_CODE,
            FC_CHG_ICNM(T1.IC_CODE) IC_NM, --영업소명
            TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMM'), 'YYYY-MM') WORK_DATE, --근무일자

     
            NVL(TRIM(TO_CHAR(SUM(T1.CAR6_CNT_SUM), '999,999,999,999')),0) CAR6_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_CNT_SUM), '999,999,999,999')),0) CAR1_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_CNT_SUM), '999,999,999,999')),0) CAR2_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_CNT_SUM+T1.CAR4_CNT_SUM+T1.CAR5_CNT_SUM), '999,999,999,999')),0) CAR345_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CNT_SUM), '999,999,999,999')),0) CNT_SUM, --교통량 합계 (건수)

            NVL(TRIM(TO_CHAR(SUM(T1.CAR6_FARE_SUM), '999,999,999,999')),0) CAR6_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_FARE_SUM), '999,999,999,999')),0) CAR1_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_FARE_SUM), '999,999,999,999')),0) CAR2_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_FARE_SUM+T1.CAR4_FARE_SUM+T1.CAR5_FARE_SUM), '999,999,999,999')),0) CAR345_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(NVL(T1.FARE_SUM, 0)), '999,999,999,999')),0) FARE_SUM, -- 교통량 합계(금액)

			NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_ELCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_ELCARD_COUNT,

            NVL(TRIM(TO_CHAR(SUM(T1.LANE_EXMT_SUM), '999,999,999,999')),0) LANE_EXMT_SUM,
            --TRIM(TO_CHAR(SUM((T1.CNT_SUM)-(T1.LANE_PAY_EPCARD_COUNT+T1.LANE_PAY_ELCARD_COUNT)-(T1.LANE_PAY_DC_EPCARD_COUNT+T1.LANE_PAY_DC_ELCARD_COUNT)-(T1.LANE_EXMT_SUM)), '999,999,999,999')) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_ESCP_VLTN), '999,999,999,999')),0) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_OFCNOT_SUM), '999,999,999,999')),0) LANE_OFCNOT_SUM
      
        FROM (
                 SELECT
                     IC_CODE,
                     TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYYMM') WORK_DATE,
                     --SUM_DIV (0: 건수, 1: 금액)

                      /* 차종별 건수 */
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) CNT_SUM,
                        
                        
                        
                     /* 차종별 금액 */
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) FARE_SUM,

                     /* 수납구분(일반) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0',VLTN_DC_NOML_EPCARD+VLTN_NOML_EPCARD+LANE_PAY_EPCARD_ETC, 0)) LANE_PAY_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0',VLTN_NOML_ELCARD+VLTN_DC_NOML_ELCARD+LANE_PAY_ELCARD_ETC, 0)) LANE_PAY_ELCARD_COUNT,          --차로수납_전자카드(후불)

                     /* 수납구분(할인) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC, 0)) LANE_PAY_DC_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC, 0)) LANE_PAY_DC_ELCARD_COUNT,          --차로수납_전자카드(후불)


                     /*  수납구분 건수
                         면제, 사무실, 사무실(집계제외),
                     */

                     -- 차로에서 면제 버튼 누른 것만 넣음
                     SUM(DECODE(SUM_DIV, '0', LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_EXMT_BUSAN+VLTN_EXMT, 0)) LANE_EXMT_SUM,                          --면제
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+EXMT_UNP, 0)) LANE_ESCP_VLTN,                          --위반(미납,현금,사전등록) )
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNFT_ECT, 0)) LANE_OFCNOT_SUM       -- 위반 부적격 집계제외
					 
					 
                 FROM PROC_DAYFINPAYTOT
                 WHERE IC_CODE = #{IC_CODE}
                   AND WORK_DATE BETWEEN #{START_DATE}||'01'  AND #{END_DATE}||'32'
                 GROUP BY IC_CODE, TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYYMM')
             ) T1
        GROUP BY T1.IC_CODE, TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMM'), 'YYYY-MM')
        ORDER BY TO_CHAR(TO_DATE(T1.WORK_DATE, 'YYYYMM'), 'YYYY-MM')
    </select>

    <!-- 일별통행처리현황-년도별 -->
    <select id="getDailyTrafficProcessYear" resultType="hashmap">
    /* Mapper ID : getDailyTrafficProcessYear */
        SELECT
            T1.IC_CODE IC_CODE,
            FC_CHG_ICNM(T1.IC_CODE) IC_NM, --영업소명
            T1.WORK_DATE WORK_DATE, --근무일자
			
        	NVL(TRIM(TO_CHAR(SUM(T1.CAR6_CNT_SUM), '999,999,999,999')),0) CAR6_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_CNT_SUM), '999,999,999,999')),0) CAR1_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_CNT_SUM), '999,999,999,999')),0) CAR2_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_CNT_SUM+T1.CAR4_CNT_SUM+T1.CAR5_CNT_SUM), '999,999,999,999')),0) CAR345_CNT_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CNT_SUM), '999,999,999,999')),0) CNT_SUM, --교통량 합계 (건수)

            NVL(TRIM(TO_CHAR(SUM(T1.CAR6_FARE_SUM), '999,999,999,999')),0) CAR6_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR1_FARE_SUM), '999,999,999,999')),0) CAR1_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR2_FARE_SUM), '999,999,999,999')),0) CAR2_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(T1.CAR3_FARE_SUM+T1.CAR4_FARE_SUM+T1.CAR5_FARE_SUM), '999,999,999,999')),0) CAR345_FARE_SUM,
            NVL(TRIM(TO_CHAR(SUM(NVL(T1.FARE_SUM, 0)), '999,999,999,999')),0) FARE_SUM, -- 교통량 합계(금액)

			NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_ELCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_EPCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_EPCARD_COUNT,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_PAY_DC_ELCARD_COUNT), '999,999,999,999')),0) LANE_PAY_DC_ELCARD_COUNT,

            NVL(TRIM(TO_CHAR(SUM(T1.LANE_EXMT_SUM), '999,999,999,999')),0) LANE_EXMT_SUM,
            --TRIM(TO_CHAR(SUM((T1.CNT_SUM)-(T1.LANE_PAY_EPCARD_COUNT+T1.LANE_PAY_ELCARD_COUNT)-(T1.LANE_PAY_DC_EPCARD_COUNT+T1.LANE_PAY_DC_ELCARD_COUNT)-(T1.LANE_EXMT_SUM)), '999,999,999,999')) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_ESCP_VLTN), '999,999,999,999')),0) ESCP_VLTN,
            NVL(TRIM(TO_CHAR(SUM(T1.LANE_OFCNOT_SUM), '999,999,999,999')),0) LANE_OFCNOT_SUM
      
        FROM (
                 SELECT
                     IC_CODE,
                     TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYY') WORK_DATE,
                     --SUM_DIV (0: 건수, 1: 금액)

              /* 차종별 건수 */
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_CNT_SUM,
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) CNT_SUM,
                        
                        
                        
                     /* 차종별 금액 */
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,6, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR6_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,1, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR1_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,2, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR2_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,3, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR3_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,4, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR4_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', DECODE(DFT_CAR_TYPE,5, LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP), 0)) CAR5_FARE_SUM,
                     SUM(DECODE(SUM_DIV, '1', LANE_PAY_EPCARD_ETC+LANE_PAY_ELCARD_ETC+LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC+LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_NOML_EPCARD+VLTN_NOML_ELCARD+VLTN_EXMT_BUSAN+VLTN_EXMT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+VLTN_DC_NOML_EPCARD+VLTN_DC_NOML_ELCARD+EXMT_UNP, 0)) FARE_SUM,

                     /* 수납구분(일반) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0',VLTN_DC_NOML_EPCARD+VLTN_NOML_EPCARD+LANE_PAY_EPCARD_ETC, 0)) LANE_PAY_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0',VLTN_NOML_ELCARD+VLTN_DC_NOML_ELCARD+LANE_PAY_ELCARD_ETC, 0)) LANE_PAY_ELCARD_COUNT,          --차로수납_전자카드(후불)

                     /* 수납구분(할인) 건수
                        전자카드(선불), 전자카드(후불)
                     */
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_EPCARD_ETC+LANE_PAY_CMTDC_EPCARD_ETC, 0)) LANE_PAY_DC_EPCARD_COUNT,          --차로수납_전자카드(선불)
                     SUM(DECODE(SUM_DIV, '0', LANE_PAY_CNTDC_ELCARD_ETC+LANE_PAY_CMTDC_ELCARD_ETC, 0)) LANE_PAY_DC_ELCARD_COUNT,          --차로수납_전자카드(후불)


                     /*  수납구분 건수
                         면제, 사무실, 사무실(집계제외),
                     */

                     -- 차로에서 면제 버튼 누른 것만 넣음
                     SUM(DECODE(SUM_DIV, '0', LANE_EXEM_OBU_ETC+LANE_EXEM_CARD_ETC+LANE_EXEM_BUSAN_ETC+VLTN_EXMT_BUSAN+VLTN_EXMT, 0)) LANE_EXMT_SUM,                          --면제
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNP+VLTN_PRE_REG+VLTN_PAY_CASH+VLTN_PAY_ACNT+VLTN_DC_UNP+VLTN_DC_PRE_REG+VLTN_DC_PAY_CASH+VLTN_DC_PAY_ACNT+EXMT_UNP, 0)) LANE_ESCP_VLTN,                          --위반(미납,현금,사전등록) )
                     SUM(DECODE(SUM_DIV, '0', VLTN_UNFT_ECT, 0)) LANE_OFCNOT_SUM       -- 위반 부적격 집계제외
					 
					 
                 FROM PROC_DAYFINPAYTOT
                 WHERE IC_CODE = #{IC_CODE}
                   AND WORK_DATE BETWEEN #{START_DATE}||'0101'  AND #{END_DATE}||'1231'
                 GROUP BY IC_CODE, TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'YYYY')
             ) T1
         GROUP BY T1.IC_CODE, T1.WORK_DATE
        ORDER BY T1.WORK_DATE
    </select>
    
    <!-- 일별 위반현황   -->
    <select id="getDailyViolation" resultType="hashmap">
     	/* Mapper ID : getDailyViolation */
        (SELECT
    '0' FLAG,
    FC_CHG_ICNM(A.IC_CODE) PLZ_NM,
    VLTN_CODE,
    FC_CHG_CODENM('057', VLTN_CODE) VLTN_CODE_NAME,
    DECODE(GROUPING(A.IC_CODE), '0', '건수', '1', '비율(%)') DIV,
 CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_IR,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21,
   
       CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22,
                
      CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25,
    
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_IR,
            
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26,
                        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86,
        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_IR,
                                  
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_IR,
                                   
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_IR,
                                     
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(VLTN_CODE),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND((COUNT(VLTN_CODE)/C.TOT)*100,2),'FM990.00')  END TOTAL,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN '' 
            WHEN '1' THEN CASE VLTN_CODE WHEN '00' THEN '' ELSE TO_CHAR(ROUND((COUNT(VLTN_CODE)/D.VLTN_TOT)*100,2),'FM990.00')  END END VLTN_RATE        
FROM
    PRIM_ETCHAND  A,
    BASE_LANEINFO B,
    (SELECT COUNT(*) AS TOT FROM PRIM_ETCHAND WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) C,
    (SELECT COUNT(*) AS VLTN_TOT FROM PRIM_ETCVLTN WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) D
WHERE
        A.IC_CODE = #{IC_CODE}
    AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
    AND A.IC_CODE = B.IC_CODE (+)
    AND SUBSTR(A.WORK_NO, 1, 2) = B.LOGC_LANE (+)

GROUP BY
    ROLLUP(A.IC_CODE),VLTN_CODE,FC_CHG_ICNM(A.IC_CODE),FC_CHG_CODENM('057', VLTN_CODE), C.TOT, D.VLTN_TOT)
   
UNION ALL
 (SELECT 
        '1' FLAG,
        '전체 위반대수' AS PLZ_NM,
        '' AS VLTN_CODE,
        '' AS VLTN_CODE_NAME,
         DECODE(GROUPING(A.IC_CODE), '0', '건수', '1', '비율(%)') DIV,
 CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_IR,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21,
   
       CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22,
                
      CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25,
    
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_IR,
            
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26,
                        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86,
        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_IR,
                          
               
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_IR,
                            
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_IR,
                                     
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(VLTN_CODE),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(COUNT(VLTN_CODE)/C.TOT*100,2),'FM990.00')  END TOTAL,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN '' 
            WHEN '1' THEN TO_CHAR(ROUND(COUNT(VLTN_CODE)/D.VLTN_TOT*100,2),'FM990.00')  END VLTN_RATE                 
FROM
    PRIM_ETCHAND  A,
    BASE_LANEINFO B,
    (SELECT COUNT(*) AS TOT FROM PRIM_ETCHAND WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) C,
    (SELECT COUNT(*) AS VLTN_TOT FROM PRIM_ETCVLTN WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) D
WHERE
        A.IC_CODE = #{IC_CODE}
    AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
    AND A.IC_CODE = B.IC_CODE (+)
    AND SUBSTR(A.WORK_NO, 1, 2) = B.LOGC_LANE (+)
    AND A.VLTN_CODE != '00'
GROUP BY ROLLUP(A.IC_CODE), C.TOT, D.VLTN_TOT)

UNION ALL

 (SELECT 
        '2' FLAG,
        '차종불일치 제외 위반대수' AS PLZ_NM,
        '' AS VLTN_CODE,
        '' AS VLTN_CODE_NAME,
         DECODE(GROUPING(A.IC_CODE), '0', '건수', '1', '비율(%)') DIV,
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_IR,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21,
   
       CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22,
                
      CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_IR,
                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25,
    
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_IR,
            
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26,
                        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86,
        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_IR,
                          
               
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_IR,
                            
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_IR,
                                     
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(VLTN_CODE),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(COUNT(VLTN_CODE)/C.TOT*100,2),'FM990.00')  END TOTAL,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN '' 
            WHEN '1' THEN TO_CHAR(ROUND(COUNT(VLTN_CODE)/D.VLTN_TOT*100,2),'FM990.00')  END VLTN_RATE               
FROM
    PRIM_ETCHAND  A,
    BASE_LANEINFO B,
    (SELECT COUNT(*) AS TOT FROM PRIM_ETCHAND WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE} ) C,
    (SELECT COUNT(*) AS VLTN_TOT FROM PRIM_ETCVLTN WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) D
WHERE
       A.IC_CODE = #{IC_CODE}
    AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
    AND A.IC_CODE = B.IC_CODE (+)
    AND SUBSTR(A.WORK_NO, 1, 2) = B.LOGC_LANE (+)
    AND A.VLTN_CODE != '25' 
    AND A.VLTN_CODE !='00'
GROUP BY ROLLUP(A.IC_CODE), C.TOT, D.VLTN_TOT)

UNION ALL

 (SELECT 
        '3' FLAG,
        '전체 교통량' AS PLZ_NM,
        '' AS VLTN_CODE,
        '' AS VLTN_CODE_NAME,
         DECODE(GROUPING(A.IC_CODE), '0', '건수', '1', '비율(%)') DIV,
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21_IR,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '21' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '21' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE21,
   
       CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '22' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '22' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE22,
                
      CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '25' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '25' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE25,
    
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26_IR,
            
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '26' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '26' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE26,
                        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85_IR,
                
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '85' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '85' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE85,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '86' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '86' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE86,
        
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81_IR,
                            
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '81' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '81' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE81,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82_IR,              
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '82' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '82' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE82,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95_IR,
                                     
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '95' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '95' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE95,
               
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' AND A.OBU_TYPE = '00' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' AND A.OBU_TYPE = '00' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_RF,
                
     CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96'  AND A.OBU_TYPE = '01' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1' THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96'  AND A.OBU_TYPE = '01' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96_IR,
                                        
    CASE  TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0'  THEN TRIM(TO_CHAR(COUNT(CASE WHEN  B.LOGC_LANE = '96' THEN A.VLTN_CODE END),'999,999,999'))
            WHEN '1'  THEN TO_CHAR(ROUND(SUM(CASE WHEN B.LOGC_LANE= '96' THEN 1 ELSE 0 END)/C.TOT*100,2),'FM990.00') END LANE96,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN ''
            WHEN '1' THEN ''  END TOTAL,
                
    CASE TO_CHAR(GROUPING(A.IC_CODE))
            WHEN '0' THEN '' 
            WHEN '1' THEN ''  END VLTN_RATE        
FROM
    PRIM_ETCHAND  A,
    BASE_LANEINFO B,
    (SELECT COUNT(*) AS TOT FROM PRIM_ETCHAND WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) C,
    (SELECT COUNT(*) AS VLTN_TOT FROM PRIM_ETCVLTN WHERE IC_CODE = #{IC_CODE} AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) D
WHERE
        A.IC_CODE = #{IC_CODE}
    AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
    AND A.IC_CODE = B.IC_CODE (+)
    AND SUBSTR(A.WORK_NO, 1, 2) = B.LOGC_LANE (+)
GROUP BY ROLLUP(A.IC_CODE), C.TOT, D.VLTN_TOT)
ORDER BY FLAG, VLTN_CODE
    </select>
     <!--조회조건 : 중복값 존재시 합치는 형태, 만약 사용시 구분자 , 아닌 다른 내용 필요할 수 있음-->
    <select id="getListSysCode" resultType="hashmap">
    SELECT
        CODELC,
		CODESC_NM,
		LISTAGG( CODESC, ',' ) WITHIN GROUP (ORDER BY CODESC) AS CODESC,
		FC_CHG_CODEDP('047', CODESC_USE_YN) AS CODESC_USE_YN_NM
	
	FROM BASE_CODESC
	
	where 1=1
		<if test="codelc != null and codelc != ''">
            AND CODELC = #{CODELC}
        </if>
        <if test="codesc != null and codesc != ''">
            AND CODESC = #{CODESC}
        </if>
        <if test="codesc_use_yn != null and codesc_use_yn != ''">
            AND CODESC_USE_YN = #{CODESC_USE_YN}
        </if>
	GROUP BY CODESC_NM,CODELC, FC_CHG_CODEDP('047', CODESC_USE_YN)
    
    ORDER BY CODELC ASC, CODESC ASC, CODESC_NM ASC
    </select>

    <!--감면차량 이용내역 - 도로공사-->
    <select id="selectReducedVehicleListEx" resultType="hashmap">
    /* Mapper ID : selectReducedVehicleListEx */
    	SELECT 
			ROW_NUMBER() OVER(ORDER BY IC_CODE, WORK_DATE, WORK_NO, HAND_SNO) ROWSEQ,
			TB.*
    	FROM (
	        SELECT
	            E.IC_CODE, E.WORK_DATE, E.WORK_NO, E.HAND_SNO,			-- PK
				FC_CHG_FORMAT(E.WORK_DATE, '1') WORK_DATE_DP,
				FC_CHG_FORMAT(E.HAND_DT, '11') HAND_DT_DP, 			--처리시간
	            FC_CHG_FORMAT(E.CARD_NO, 3) CARD_NO_DP, 							--카드번호
	            FC_CHG_CODEDP('171', C.HAND_CAR_TYPE) CAR_TYPE_DP, 					--차종
	            M.AXLE_CODE, 														--축수코드
	            E.ORIGIN_PASS_FARE, 												--원통행요금
	            FC_CHG_FORMAT(E.ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE_DP,
	            E.PASS_FARE, 														--통행요금
	            FC_CHG_FORMAT(E.PASS_FARE, '4') PASS_FARE_DP,
	            M.WTHD_BEF_FARE, 													--출금전 카드잔액
	            FC_CHG_FORMAT(M.WTHD_BEF_FARE, '4') WTHD_BEF_FARE_DP,
	            M.WTHD_FARE, 														--출금액
	            FC_CHG_FORMAT(M.WTHD_FARE, '4') WTHD_FARE_DP,
	            CASE WHEN E.ECARD_TYPE IN ('01', '04') THEN FC_CHG_FORMAT(M.WTHD_BEF_FARE, '4')
	                ELSE FC_CHG_FORMAT(M.WTHD_BEF_FARE - M.WTHD_FARE, '4')
	            END WTHD_AFT_FARE_DP, 												--수납후카드잔액
	            SUBSTR(E.PAY_DC_RATE, 1, 3) || '%' AS PAY_DC_RATE_DP, 				--할인율
	            FC_CHG_CODENM('070', E.ECARD_PAY_DIV) ECARD_PAY_DIV_DP, 			--수납구분
	            FC_CHG_CODENM('071', E.ECARD_TYPE) ECARD_TYPE_DP, 					--카드종류
				CASE WHEN REGEXP_LIKE(E.ECARD_ATT, '[2][0-9A-F]') THEN '긴급면제카드'
				   WHEN REGEXP_LIKE(E.OBU_ATT, '[1-7][0-9A-F]') THEN '할인단말기'
				   ELSE '통합복지'
				END AS SOURCE_DIV,
				C.HAND_CAR_NO,
	            FC_CHG_CODENM('290', E.ECARD_ATT) ECARD_ATT_DP, 					--전자카드속성
	            FC_CHG_CODEDP('280', UPPER(E.OBU_ATT)) OBU_ATT_DP, 					--단말기속성
	            FC_CHG_CODEDP('057', E.VLTN_CODE) VLTN_CODE_DP, 					--위반코드
	            FC_CHG_CODENM('500',  E.PAY_HAND_DIV) PAY_HAND_DIV_DP, 				--지불처리구분
	            E.PSAM_ID, 			--PSAM ID
	            E.EM_CO_ID 			--전자화폐 발행기관 ID
	        FROM
	            PRIM_ETCHAND E,
	            PRIM_ETCVLTN V,
	            PRIM_ECARDHAND M,
	            PRIM_HANDCARNO C
	        WHERE E.IC_CODE = #{IC_CODE}
	        AND E.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
	        AND E.IC_CODE = M.IC_CODE (+)
	        AND E.WORK_DATE = M.WORK_DATE (+)
	        AND E.WORK_NO = M.WORK_NO (+)
	        AND E.HAND_SNO = M.HAND_SNO (+)
	        AND E.IC_CODE = V.IC_CODE (+)
	        AND E.WORK_DATE = V.WORK_DATE (+)
	        AND E.WORK_NO = V.WORK_NO (+)
	        AND E.HAND_SNO = V.HAND_SNO (+)
	        AND E.IC_CODE = C.IC_CODE (+)
	        AND E.WORK_DATE = C.WORK_DATE (+)
	        AND E.WORK_NO = C.WORK_NO (+)
	        AND E.HAND_SNO = C.HAND_SNO (+)
	        AND (E.EXM_DIV IN ('1', '2', '4') OR (V.HAND_TYPE = '40' AND EXMT_DTL_TYPE = '98'))
	        <if test='CARD_NO != "" '>
	            AND E.CARD_NO LIKE '%'||#{CARD_NO}||'%'
	        </if>
	        <if test='CAR_NO != "" '>
	            AND C.HAND_CAR_NO LIKE '%'||#{CAR_NO}||'%'
	        </if>
	        <if test="CAR_TYPE != null and !CAR_TYPE.equals('')">
	        	AND C.HAND_CAR_TYPE IN (
	                    SELECT 
	                        CODESC
	                    FROM BASE_CODESC
	                    WHERE CODELC = 171 
	                    AND CODESC_NM = #{CAR_TYPE}
	                    AND CODESC_USE_YN = 'Y')
	        </if>
	        	AND E.ECARD_ATT = DECODE(#{ECARD_ATT}, '', E.ECARD_ATT, #{ECARD_ATT})
	        <if test="WTHD_FARE == true">
	            AND M.WTHD_FARE = 0
	        </if>
	        -- 위반/정상데이터 조회
	        <if test="VLTN_CODE == true and NOML_CODE == false">
	            AND E.VLTN_CODE <![CDATA[ <> ]]> '00'
	        </if>
	        <if test="NOML_CODE == true and VLTN_CODE == false">
	            AND E.VLTN_CODE ='00'
	        </if>
	         <if test="WORK_NO != null and !WORK_NO.equals('')">
	            AND E.WORK_NO =#{WORK_NO}
	        </if>
	         <if test="OBU_ATT != null and !OBU_ATT.equals('')">
	            AND E.OBU_ATT IN (SELECT 
	                        CODESC
	                    FROM BASE_CODESC
	                    WHERE CODELC = 280 
	                    AND CODESC_NM = #{OBU_ATT}
	                    AND CODESC_USE_YN = 'Y')
	        </if>
	    ) TB
	    <if test="SOURCE_DIV != null and !SOURCE_DIV.equals('')">
	    WHERE SOURCE_DIV = #{SOURCE_DIV}
	    </if>
        ORDER BY IC_CODE, WORK_DATE, WORK_NO, HAND_SNO
    </select>
    
    <!--감면차량 이용내역 - 부산시-->
    <select id="selectReducedVehicleListBs" resultType="hashmap">
    /* Mapper ID : selectReducedVehicleListBs */
		SELECT ROW_NUMBER() OVER (ORDER BY TB.IC_CODE, TB.WORK_DATE, TB.WORK_NO, TB.HAND_SNO) ROW_NUMBER, TB.* 
		FROM (
			SELECT A.IC_CODE, A.WORK_DATE, A.WORK_NO, A.HAND_SNO -- PK 
				, FC_CHG_FORMAT(A.WORK_DATE, '1') WORK_DATE_DP
				, FC_CHG_FORMAT(A.HAND_DT, '11') HAND_DT_DP
				, B.HAND_CAR_TYPE 				-- 처리차종
				, FC_CHG_CODEDP('171', B.HAND_CAR_TYPE) HAND_CAR_TYPE_DP
				, FC_CHG_CODENM('172', B.HAND_CAR_TYPE) AS CAR_TYPE4
				, A.ORIGIN_PASS_FARE 
				, FC_CHG_FORMAT(A.ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE_DP
				, A.PASS_FARE 
				, FC_CHG_FORMAT(A.PASS_FARE, '4') PASS_FARE_DP
				, A.PAY_FARE
				, FC_CHG_FORMAT(A.PAY_FARE, '4') PAY_FARE_DP
				, A.MAIN_PAY_DIV
				, FC_CHG_CODENM('056', A.MAIN_PAY_DIV) MAIN_PAY_DIV_DP
				, A.CARD_NO
				, FC_CHG_FORMAT(A.CARD_NO, 3) CARD_NO_DP
				, FC_CHG_CODEDP('057', A.VLTN_CODE) VLTN_CODE_DP
				, FC_CHG_FORMAT(A.OBU_NO, 3) OBU_NO_DP
				, FC_CHG_CODENM('280', UPPER(A.OBU_ATT)) OBU_ATT_DP   			-- 단말기속성(감면구분)
				, B.HAND_CAR_NO 	-- 처리차량번호
				, NVL(A.ECARD_CAR_NO, '-') AS ECARD_CAR_NO	-- 차량번호(카드)
				, CASE WHEN A.VLTN_CODE = '00' THEN A.BS_EXM_TYPE_DTL ELSE V.EXMT_DTL_TYPE END AS BS_EXM_TYPE_DTL
				, FC_CHG_CODENM('292', CASE WHEN A.VLTN_CODE = '00' THEN A.BS_EXM_TYPE_DTL ELSE V.EXMT_DTL_TYPE END) AS BS_EXM_TYPE_DTL_DP
				, C.WTHD_FARE 														--출금액
				, FC_CHG_FORMAT(C.WTHD_FARE, '4') WTHD_FARE_DP
				, FC_CHG_CODENM('070', A.ECARD_PAY_DIV) ECARD_PAY_DIV_DP 			--전자카드수납구분
				, FC_CHG_CODENM('071', A.ECARD_TYPE) ECARD_TYPE_DP 					--카드종류
				, FC_CHG_CODENM('500',  A.PAY_HAND_DIV) PAY_HAND_DIV_DP 			--지불처리구분
				, B.NOTE
				, NVL(FC_CHG_FORMAT(T.TAXI_TRNRCP_DT, '11'), '-') TRNRCP_DT_DP
				, NVL(FC_CHG_CODENM('295', T.TAXI_EXM_TYPE), '-') TAXI_EXM_TYPE_DP
			FROM 
				PRIM_ETCHAND A, PRIM_HANDCARNO B, PRIM_ECARDHAND C, PRIM_ETCVLTN V, PROC_TAXI_HIST T
			WHERE A.IC_CODE = #{IC_CODE}
				AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				<if test="WORK_NO != null and !WORK_NO.equals('')">
				AND A.WORK_NO = #{WORK_NO}
				</if>
				AND A.IC_CODE = B.IC_CODE(+)
		        AND A.WORK_DATE = B.WORK_DATE(+)
		        AND A.WORK_NO = B.WORK_NO(+)
		        AND A.HAND_SNO = B.HAND_SNO(+)
				AND A.IC_CODE = C.IC_CODE(+)
		        AND A.WORK_DATE = C.WORK_DATE(+)
		        AND A.WORK_NO = C.WORK_NO(+)
		        AND A.HAND_SNO = C.HAND_SNO(+)
				AND A.IC_CODE = V.IC_CODE(+)
		        AND A.WORK_DATE = V.WORK_DATE(+)
		        AND A.WORK_NO = V.WORK_NO(+)
		        AND A.HAND_SNO = V.HAND_SNO(+)
				AND A.IC_CODE = T.IC_CODE(+)
		        AND A.WORK_DATE = T.WORK_DATE(+)
		        AND A.WORK_NO = T.WORK_NO(+)
		        AND A.HAND_SNO = T.HAND_SNO(+)
				AND ((A.EXM_DIV NOT IN ('1', '2', '4') AND A.BS_EXM_TYPE_DIV IN ('1', '2', '4')) OR (V.HAND_TYPE = '40' AND V.EXMT_DTL_TYPE != '98'))
	        -- 위반/정상데이터 조회
	        <if test="VLTN_CODE == true and NOML_CODE == false">
	            AND A.VLTN_CODE <![CDATA[ <> ]]> '00'
	        </if>
	        <if test="NOML_CODE == true and VLTN_CODE == false">
	            AND A.VLTN_CODE ='00'
	        </if>
		) TB
		WHERE TB.BS_EXM_TYPE_DTL = DECODE(#{BS_EXM_TYPE_DTL}, '', TB.BS_EXM_TYPE_DTL, #{BS_EXM_TYPE_DTL})
        <if test="CARD_NO != null and !CARD_NO.equals('')">AND TB.CARD_NO LIKE '%' || #{CARD_NO} || '%'</if>
        <if test="CAR_NO != null and !CAR_NO.equals('')">AND TB.HAND_CAR_NO LIKE '%' || #{CAR_NO} || '%'</if>
		<if test="CAR_TYPE != null and !CAR_TYPE.equals('')">AND TB.CAR_TYPE4 = #{CAR_TYPE}</if>
		ORDER BY TB.IC_CODE, TB.WORK_DATE, TB.WORK_NO, TB.HAND_SNO
    </select>
    
    <!-- 할인내역보고서-목록조회 -->
    <select id="selectDiscountList" resultType="hashmap">
    /* Mapper ID : selectDiscountList */
		SELECT FC_CHG_CODENM('059', DC_DIV) AS DC_DIV_DP
			, CASE WHEN VAL_DIV = '1' THEN '할인대수'
				   WHEN VAL_DIV = '2' THEN '원통행료'
				   WHEN VAL_DIV = '3' THEN '할인금액'
				   WHEN VAL_DIV = '4' THEN '수납금액'
			ELSE '' END VAL_DIV_DP
			, FC_CHG_FORMAT(NVL(TYPE1_VAL, 0), '4') AS TYPE1_VAL
			, FC_CHG_FORMAT(NVL(TYPE2_VAL, 0), '4') AS TYPE2_VAL
			, FC_CHG_FORMAT(NVL(TYPE3_VAL, 0), '4') AS TYPE3_VAL
			, FC_CHG_FORMAT(NVL(TYPE4_VAL, 0), '4') AS TYPE4_VAL
			, FC_CHG_FORMAT(NVL(SMR_VAL, 0), '4') AS SMR_VAL
		FROM
		(	SELECT DC_DIV, CAR_TYPE, VAL_DIV, VAL
			FROM
			(	SELECT DC_DIV
					, NVL(CAR_TYPE, 'TOT') AS CAR_TYPE
					, SUM(CNT) AS CAR_CNT
					, SUM(ORIGIN_PASS_FARE) AS ORIGIN_FARE
					, SUM(DC_FARE) AS DC_FARE
					, SUM(PAY_FARE) AS PAY_FARE
				FROM 
				(	SELECT (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV) AS DC_DIV
						, (SELECT CODE.CODESC_NOTE FROM BASE_CODESC CODE WHERE CODELC = '171' AND CODE.CODESC = HAND_CAR_TYPE) AS CAR_TYPE
						, 1 CNT
						, ORIGIN_PASS_FARE 
						, ORIGIN_PASS_FARE - PASS_FARE AS DC_FARE
						, PAY_FARE 
					FROM PRIM_ETCHAND HAND
					WHERE IC_CODE = #{IC_CODE}
					  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
					  AND (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV) IN (SELECT CODESC FROM BASE_CODESC WHERE CODELC = '059')
				)
				GROUP BY DC_DIV, ROLLUP(CAR_TYPE)
			) UNPIVOT (
				VAL FOR VAL_DIV IN (CAR_CNT AS '1', ORIGIN_FARE AS '2', DC_FARE AS '3', PAY_FARE AS '4')
			)
		) PIVOT (
			SUM(VAL) AS VAL FOR CAR_TYPE IN ('1' AS TYPE1, '2' AS TYPE2, '3' AS TYPE3, '4' AS TYPE4, 'TOT' AS SMR)
		)
		ORDER BY DC_DIV, VAL_DIV
    </select>
    
    <!-- 할인내역보고서-소계 -->
    <select id="selectDiscountSummary" resultType="hashmap">
    /* Mapper ID : selectDiscountList */
		SELECT NVL(FC_CHG_CODENM('170', CAR_TYPE), '합계') AS CAR_TYPE
			, FC_CHG_FORMAT(SUM(CNT), '4') AS CAR_CNT
			, FC_CHG_FORMAT(SUM(ORIGIN_PASS_FARE), '4') AS ORIGIN_FARE
			, FC_CHG_FORMAT(SUM(DC_FARE), '4') AS DC_FARE
			, FC_CHG_FORMAT(SUM(PAY_FARE), '4') AS PAY_FARE
		FROM 
		(	SELECT (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV) AS DC_DIV
				, (SELECT CODE.CODESC_NOTE FROM BASE_CODESC CODE WHERE CODELC = '171' AND CODE.CODESC = HAND_CAR_TYPE) AS CAR_TYPE
				, 1 CNT
				, ORIGIN_PASS_FARE 
				, ORIGIN_PASS_FARE - PASS_FARE AS DC_FARE
				, PAY_FARE 
			FROM PRIM_ETCHAND HAND
			WHERE IC_CODE = #{IC_CODE}
			  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
			  AND (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV) IN (SELECT CODESC FROM BASE_CODESC WHERE CODELC = '059')
		)
		GROUP BY ROLLUP(CAR_TYPE)
    </select>
    
    <!-- 부산시 연속통행 할인현황 - 정상집계/환불집계  -->
    <select id="getBusanContinueTrafficDCSum" resultType="hashmap">
		SELECT 
    
		    DECODE(GROUPING_ID(BEIC_IC_CODE,LANE_DIV,WORK_DATE,ECARD_TYPE),'15','총합계', NVL(FC_CHG_CODENM('370',BEIC_IC_CODE),BEIC_IC_CODE))  BEIC_IC_CODE_NM,
		    DECODE(GROUPING_ID(BEIC_IC_CODE,LANE_DIV,WORK_DATE,ECARD_TYPE),'15' ,'', '3', '합계', FC_CHG_FORMAT(WORK_DATE, '1')) WORK_DATE,
		    
		    DECODE(LANE_DIV, '0', 'TCS', '1', '하이패스') LANE_DIV,
		    CASE WHEN GROUPING_ID(BEIC_IC_CODE,LANE_DIV,WORK_DATE,ECARD_TYPE) = 0 THEN FC_CHG_CODENM('071', ECARD_TYPE)
		        WHEN GROUPING_ID(BEIC_IC_CODE,LANE_DIV,WORK_DATE,ECARD_TYPE) = 1 THEN '소계' 
		         WHEN GROUPING_ID(BEIC_IC_CODE,LANE_DIV,WORK_DATE,ECARD_TYPE) = 3 THEN '-'  END ECARD_TYPE,
		    TRIM(TO_CHAR(COUNT(CASE WHEN CAR_TYPE = '1' THEN CAR_TYPE END), '999,999,999,999')) AS LIGHT_CAR,                                    --경차
		    TRIM(TO_CHAR(COUNT(CASE WHEN CAR_TYPE = '2' THEN CAR_TYPE END), '999,999,999,999')) AS SMALLSIZE_CAR,                                --소형
		    TRIM(TO_CHAR(COUNT(CASE WHEN CAR_TYPE = '3' THEN CAR_TYPE END), '999,999,999,999')) AS FULLSIZED_CAR,                                     --중형
		    TRIM(TO_CHAR(COUNT(CASE WHEN CAR_TYPE = '4' THEN CAR_TYPE END), '999,999,999,999')) AS SPECIAL_CAR,               --대형
		    TRIM(TO_CHAR(COUNT(CAR_TYPE), '999,999,999,999')) AS CARTYPE_TOTAL,                                                                     --합계
		    
		    NVL(TRIM(TO_CHAR(SUM(CASE WHEN CAR_TYPE = '1' THEN PAY_FARE END), '999,999,999,999')),0) AS LIGHT_CAR_FARE,                                    --경차_금액
		    NVL(TRIM(TO_CHAR(SUM(CASE WHEN CAR_TYPE = '2' THEN PAY_FARE END), '999,999,999,999')),0) AS SMALLSIZE_CAR_FARE,                                --소형_금액
		    NVL(TRIM(TO_CHAR(SUM(CASE WHEN CAR_TYPE = '3' THEN PAY_FARE END), '999,999,999,999')),0) AS FULLSIZED_CAR_FARE,                                     --중형_금액
		    NVL(TRIM(TO_CHAR(SUM(CASE WHEN CAR_TYPE = '4' THEN PAY_FARE END), '999,999,999,999')),0) AS SPECIAL_CAR_FARE,             --대형_금액
		    NVL(TRIM(TO_CHAR(SUM(PAY_FARE), '999,999,999,999')),0) AS CARTYPE_TOTAL_FARE                                                                    --합계_금액
		
		FROM PRIM_DAYFIN_HAND 
		
		WHERE IC_CODE = #{IC_CODE}
		    AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
		    AND LPAY_CRCT_YN = #{LPAY_CRCT_YN}
		    <if test="BEIC_IC_CODE != null and !BEIC_IC_CODE.equals('')">
		        AND BEIC_IC_CODE =#{BEIC_IC_CODE}
		    </if>
		
		GROUP BY ROLLUP((BEIC_IC_CODE,LANE_DIV),WORK_DATE,ECARD_TYPE)
		
		ORDER BY BEIC_IC_CODE, WORK_DATE, ECARD_TYPE DESC
    </select>
    
   <!-- 부산시 연속통행 할인현황 - 정상통행일마감/환불통행일마감  -->
    <select id="getBusanContinueTrafficDCDayFin" resultType="hashmap">
		SELECT 
		    ROW_NUMBER() OVER (ORDER BY BEIC_HAND_DT, BEIC_IC_CODE, BEIC_WORK_NO) ROW_SEQ, --순번
			CASE WHEN VALIDATE_CONVERSION(BEIC_HAND_DT AS DATE, 'YYYYMMDDHH24MISS') = 0 THEN '-'
			ELSE FC_CHG_FORMAT(BEIC_HAND_DT,'11') END  BEIC_HAND_DT, --통과시간(이전영업소_처리시간)
		    FC_CHG_CODENM('370',BEIC_IC_CODE) BEIC_IC_CODE_NM, --이전 영업소 명
		    BEIC_WORK_NO, --이전영업소 근무번호
		    BEIC_HAND_SNO, --이전영업소 일련번호
		    FC_CHG_CODENM('171',BEIC_CAR_TYPE) BEIC_CAR_TYPE, --이전영업소 차종
		    
		    FC_CHG_FORMAT(HAND_DT,'11') HAND_DT, --통과일자(처리시각)
		    FC_CHG_FORMAT(WORK_DATE,'1') WORK_DATE, --근무일자
		    FC_CHG_LANENAME(IC_CODE, SUBSTR(WORK_NO,1,2)) LANE_NM, --차로명
		    WORK_NO, --근무번호
		    HAND_SNO, --일련번호
		    FC_CHG_CODENM('170',CAR_TYPE) CAR_TYPE, --차종
		    CAR_NO, --차량번호
		    SUBSTR(CARD_NO,1,4)||'-'||SUBSTR(CARD_NO,5,4)||'-'||SUBSTR(CARD_NO,9,4)||'-'||SUBSTR(CARD_NO,13,4) CARD_NO, --카드번호
		    SUBSTR(OBU_NO,1,4)||'-'||SUBSTR(OBU_NO,5,4)||'-'||SUBSTR(OBU_NO,9,4)||'-'||SUBSTR(OBU_NO,13,4) OBU_NO, --OBU번호
		    FC_CHG_CODENM('057',VLTN_CODE ) VLTN_CODE, --위반코드
		    FC_CHG_FORMAT(ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE,--원 통행요금
		    FC_CHG_FORMAT(PAY_FARE, '4') PAY_FARE, --수납금액
		    FC_CHG_FORMAT((ORIGIN_PASS_FARE-PASS_FARE), '4') DC_FARE,--할인금액
		    (ORIGIN_PASS_FARE-PASS_FARE) IDC_FARE, --할인금액 콤마없는 버전
		    FC_CHG_FORMAT(WTHD_BEF_FARE, '4') WTHD_BEF_FARE, --출금전카드잔액
		    FC_CHG_CODENM('070', ECARD_PAY_DIV)                    as PAY_DIV ,                      --수납구분
		    FC_CHG_CODENM('071', ECARD_TYPE)                    as CARD_DIV                       --카드종류
		
		FROM PRIM_DAYFIN_HAND
		
		WHERE IC_CODE = #{IC_CODE}
		    AND WORK_DATE = #{START_DATE}
		    AND LPAY_CRCT_YN = #{LPAY_CRCT_YN}
		<if test='WORK_NO != "" '>
		      AND WORK_NO LIKE '%'||#{WORK_NO}||'%'
		</if>
    </select>
    
     <!-- 부산시 연속통행 할인현황 - 연속통행(실시간 차량)  -->
    <select id="getBusanContinueTrafficDCRealTime" resultType="hashmap">
		SELECT 
			ROW_NUMBER() OVER (ORDER BY BEIC_HAND_DT, BEIC_IC_CODE, BEIC_WORK_NO) ROW_SEQ, --순번
			CASE WHEN VALIDATE_CONVERSION(BEIC_HAND_DT AS DATE, 'YYYYMMDDHH24MISS') = 0 THEN '-'
			ELSE FC_CHG_FORMAT(BEIC_HAND_DT,'11') END  BEIC_HAND_DT, --통과시간(이전영업소_처리시간)
		    FC_CHG_CODENM('370',BEIC_IC_CODE) BEIC_IC_CODE_NM, --이전 영업소 명
		    BEIC_WORK_NO, --이전영업소 근무번호
		    BEIC_HAND_SNO, --이전영업소 일련번호
		    FC_CHG_CODENM('171',BEIC_CAR_TYPE) BEIC_CAR_TYPE, --이전영업소 차종
		    
		    FC_CHG_FORMAT(HAND_DT,'11') HAND_DT, --통과일자(처리시각)
		    FC_CHG_FORMAT(WORK_DATE,'1') WORK_DATE, --근무일자
		    FC_CHG_LANENAME(IC_CODE, SUBSTR(WORK_NO,1,2)) LANE_NM, --차로명
		    WORK_NO, --근무번호
		    HAND_SNO, --일련번호
		    FC_CHG_CODENM('171',CAR_TYPE) CAR_TYPE, --차종
		    CAR_NO, --차량번호
		    SUBSTR(CARD_NO,1,4)||'-'||SUBSTR(CARD_NO,5,4)||'-'||SUBSTR(CARD_NO,9,4)||'-'||SUBSTR(CARD_NO,13,4) CARD_NO, --카드번호
		    SUBSTR(OBU_NO,1,4)||'-'||SUBSTR(OBU_NO,5,4)||'-'||SUBSTR(OBU_NO,9,4)||'-'||SUBSTR(OBU_NO,13,4) OBU_NO, --OBU번호
		    FC_CHG_CODENM('057',VLTN_CODE ) VLTN_CODE, --위반코드
		    FC_CHG_FORMAT(ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE,--원 통행요금
		    FC_CHG_FORMAT(PAY_FARE, '4') PAY_FARE, --수납금액
		    FC_CHG_FORMAT((ORIGIN_PASS_FARE-PASS_FARE), '4') DC_FARE,--할인금액
		    (ORIGIN_PASS_FARE-PASS_FARE) IDC_FARE, --할인금액 콤마없는 버전
		    FC_CHG_CODENM('070', ECARD_PAY_DIV)                    as PAY_DIV ,                      --수납구분
		    FC_CHG_CODENM('071', ECARD_TYPE)                    as CARD_DIV                       --카드종류
		
		FROM PRIM_REAL_HAND
		
		WHERE IC_CODE = #{IC_CODE}
		    AND WORK_DATE = #{START_DATE}
		<if test='WORK_NO != "" '>
		      AND WORK_NO LIKE '%'||#{WORK_NO}||'%'
		</if>
    </select>
    
    
     <!-- 부산시 연속통행 할인현황 - 환불심사 -->
    <select id="getBusanContinueTrafficDCRefund" resultType="hashmap">
		SELECT  
			ROW_NUMBER() OVER (ORDER BY BEIC_HAND_DT, BEIC_IC_CODE, BEIC_WORK_NO) ROW_SEQ, --순번
			CASE WHEN VALIDATE_CONVERSION(BEIC_HAND_DT AS DATE, 'YYYYMMDDHH24MISS') = 0 THEN '-'
			ELSE FC_CHG_FORMAT(BEIC_HAND_DT,'11') END  BEIC_HAND_DT, --통과시간(이전영업소_처리시간)
		    FC_CHG_CODENM('370',BEIC_IC_CODE) BEIC_IC_CODE_NM, --이전 영업소 명
		    BEIC_WORK_NO, --이전영업소 근무번호
		    BEIC_HAND_SNO, --이전영업소 일련번호
		    FC_CHG_CODENM('171',BEIC_CAR_TYPE) BEIC_CAR_TYPE, --이전영업소 차종
		    
            FC_CHG_CODENM('133',HAND_TYPE) HAND_TYPE,--처리유형
		    FC_CHG_FORMAT(HAND_DT,'11') HAND_DT, --통과일자(처리시각)
		    FC_CHG_FORMAT(WORK_DATE,'1') WORK_DATE, --근무일자
		    FC_CHG_LANENAME(IC_CODE, SUBSTR(WORK_NO,1,2)) LANE_NM, --차로명
		    WORK_NO, --근무번호
		    HAND_SNO, --일련번호
		    FC_CHG_CODENM('171',CAR_TYPE) CAR_TYPE, --차종
		    HAND_CAR_NO, --차량번호
		    SUBSTR(CARD_NO,1,4)||'-'||SUBSTR(CARD_NO,5,4)||'-'||SUBSTR(CARD_NO,9,4)||'-'||SUBSTR(CARD_NO,13,4) CARD_NO, --카드번호
		    SUBSTR(OBU_NO,1,4)||'-'||SUBSTR(OBU_NO,5,4)||'-'||SUBSTR(OBU_NO,9,4)||'-'||SUBSTR(OBU_NO,13,4) OBU_NO, --OBU번호
		    FC_CHG_CODENM('057',VLTN_CODE ) VLTN_CODE, --위반코드
		    FC_CHG_FORMAT(ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE,--원 통행요금
		    FC_CHG_FORMAT(PAY_FARE, '4') PAY_FARE, --수납금액
		    FC_CHG_FORMAT((ORIGIN_PASS_FARE-PASS_FARE), '4') DC_FARE,--할인금액
            FC_CHG_FORMAT(PAY_BEF_BALC, '4') PAY_BEF_BALC, --출금전카드잔액(수납 전 카드잔액)
		    FC_CHG_CODENM('070', ECARD_PAY_DIV)                    as PAY_DIV ,                      --수납구분
		    FC_CHG_CODENM('071', ECARD_TYPE)                    as CARD_DIV                       --카드종류
		
		FROM PRIM_ETCVLTN 
			
		
		WHERE IC_CODE = #{IC_CODE}
		     AND WORK_DATE  BETWEEN #{START_DATE} AND #{END_DATE}
		     AND CPD_DIV = '1' 	
		<if test='CARD_NO != "" '>
		      AND CARD_NO LIKE '%'||#{CARD_NO}||'%'
		</if>
		<if test='CAR_NO != "" '>
		      AND CAR_NO LIKE '%'||#{CAR_NO}||'%'
		</if>
    </select>
    
     <!-- 부산시 연속통행 할인현황 - 연속통행 교통량집계(시간별, 차로별) -->
    <select id="getBusanContinueTrafficDCTrfSum" resultType="hashmap">
		Select 
			NVL(FC_CHG_LANENAME(IC_CODE, LANE_NO), '총합계') LANE_NM,
			 SUM(CAR_HAND_CNT)               as TRF_SUM, --합계
			 SUM(CASE WHEN HR = '00' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_00,
			 SUM(CASE WHEN HR = '01' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_01,
			 SUM(CASE WHEN HR = '02' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_02,
			 SUM(CASE WHEN HR = '03' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_03,
			 SUM(CASE WHEN HR = '04' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_04,
			 SUM(CASE WHEN HR = '05' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_05,
			 SUM(CASE WHEN HR = '06' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_06,
			 SUM(CASE WHEN HR = '07' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_07,
			 SUM(CASE WHEN HR = '08' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_08,
			 SUM(CASE WHEN HR = '09' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_09,
			 SUM(CASE WHEN HR = '10' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_10,
			 SUM(CASE WHEN HR = '11' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_11,
			 SUM(CASE WHEN HR = '12' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_12,
			 SUM(CASE WHEN HR = '13' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_13,
			 SUM(CASE WHEN HR = '14' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_14,
			 SUM(CASE WHEN HR = '15' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_15,
			 SUM(CASE WHEN HR = '16' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_16,
			 SUM(CASE WHEN HR = '17' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_17,
			 SUM(CASE WHEN HR = '18' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_18,
			 SUM(CASE WHEN HR = '19' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_19,
			 SUM(CASE WHEN HR = '20' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_20,
			 SUM(CASE WHEN HR = '21' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_21,
			 SUM(CASE WHEN HR = '22' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_22,
			 SUM(CASE WHEN HR = '23' THEN CAR_HAND_CNT ELSE 0 END)                                 as TIME_23

		from proc_hrtrf
		
		where IC_CODE = #{IC_CODE}
		     AND WORK_DATE  BETWEEN #{START_DATE} AND #{END_DATE} 
			 AND hand_code IN ('VL', 'HL') 
		
		group by ROLLUP(FC_CHG_LANENAME(IC_CODE, LANE_NO))
    </select>
    
    
    <!-- 할인/할증처리내역 -->
    <select id="selectDiscountSurchargeList" resultType="hashmap">
    /* Mapper ID : selectDiscountSurchargeList */
		SELECT ROW_NUMBER() OVER (ORDER BY IC_CODE, WORK_DATE, WORK_NO, HAND_SNO) ROW_NUMBER, A.*
		FROM (
			SELECT IC_CODE, WORK_DATE, WORK_NO, HAND_SNO 				-- PK
				, FC_CHG_FORMAT(WORK_DATE, '1') WORK_DATE_DP
				, HAND_DT
				, FC_CHG_FORMAT(HAND_DT, '11') HAND_DT_DP 
				, DIFF_DIV
				, MAIN_PAY_DIV
				, (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV) AS DC_DIV
				, FC_CHG_CODENM('059', (NVL(DIFF_DIV, '0') || MAIN_PAY_DIV)) AS DC_DIV_DP
				, ECARD_PAY_DIV 
				, FC_CHG_CODENM('070', ECARD_PAY_DIV) AS ECARD_PAY_DIV_DP
				, HAND_CAR_TYPE 
				, FC_CHG_CODEDP('171', HAND_CAR_TYPE) AS HAND_CAR_TYPE_DP
				, ORIGIN_PASS_FARE 
				, FC_CHG_FORMAT(ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE_DP 
				, PASS_FARE 
				, FC_CHG_FORMAT(PASS_FARE, '4') PASS_FARE_DP 
				, PAY_FARE 
				, FC_CHG_FORMAT(PAY_FARE, '4') PAY_FARE_DP
				, ORIGIN_PASS_FARE - PASS_FARE DC_FARE 
				, CASE WHEN PASS_FARE != 0 THEN TO_CHAR(ROUND(100.0 * (ORIGIN_PASS_FARE - PASS_FARE) / ORIGIN_PASS_FARE, 1), 'FM990.00') || '%'
					   ELSE '0.00%'
				  END DISCOUNT_RATE
				, CARD_NO 
				, FC_CHG_FORMAT(CARD_NO, 3) CARD_NO_DP
			FROM PRIM_ETCHAND HAND
			WHERE IC_CODE = #{IC_CODE}
			  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
			  <if test="LANE_NO != null and LANE_NO != ''">AND REGEXP_LIKE(WORK_NO, '[' || SUBSTR(#{LANE_NO}, 1, 1) || ']' || '[' || SUBSTR(#{LANE_NO}, 2, 1) || ']' || '[0-9][0-9]' )</if>
			  AND PAY_FARE != 0	-- 출금액이 있는 경우
			  <if test="EXCLUDE_DIFF_DIV == true">AND MAIN_PAY_DIV IN ('1', '2', '3', '7')</if>
		) A
		WHERE DC_DIV = DECODE(#{DC_DIV}, '', DC_DIV, #{DC_DIV})
		  AND DC_DIV IN (SELECT CODESC FROM BASE_CODESC WHERE CODELC = '059')
    </select>
    
    <!-- 일일 면제 세부내역 -->
    <select id="selectDailyExemptDetail" resultType="hashmap">
    /* Mapper ID : selectDailyExemptDetail */
		SELECT NVL(FC_CHG_FORMAT(DAYS.DATES, '1'), '합계') WORK_DATE_DP
			, SUM(NVL(C20_CNT, 0)) + SUM(NVL(C21_CNT, 0)) AS TYPE01_VAL 												-- 군인
			, SUM(NVL(C22_CNT, 0)) + SUM(NVL(C23_CNT, 0)) + SUM(NVL(C24_CNT, 0)) + SUM(NVL(C25_CNT, 0)) AS TYPE02_VAL 	-- 구급/소방
			, SUM(NVL(C26_CNT, 0)) + SUM(NVL(C27_CNT, 0)) AS TYPE03_VAL 												-- 경찰
			, SUM(NVL(C28_CNT, 0)) AS TYPE04_VAL 																		-- 우편
			, SUM(NVL(C29_CNT, 0)) AS TYPE05_VAL 																		-- 재해복구
			, SUM(NVL(C30_CNT, 0)) AS TYPE06_VAL 																		-- 장애인
			, SUM(NVL(C31_CNT, 0)) AS TYPE07_VAL 																		-- 유공자
			, SUM(NVL(C32_CNT, 0)) AS TYPE08_VAL 																		-- 기타(도공)
			, SUM(NVL(C03_CNT, 0)) AS TYPE11_VAL 																		-- 다자녀(부산)
			, SUM(NVL(C04_CNT, 0)) AS TYPE12_VAL 																		-- 유공자(부산)
			, SUM(NVL(C05_CNT, 0)) AS TYPE13_VAL 																		-- 장애인(부산)
			, SUM(NVL(C06_CNT, 0)) AS TYPE14_VAL 																		-- 전기차(부산)
			, SUM(NVL(C07_CNT, 0)) AS TYPE15_VAL 																		-- 수소차(부산)
			, SUM(NVL(C08_CNT, 0)) AS TYPE16_VAL 																		-- 공차택시(부산)
			, SUM(NVL(C18_CNT, 0)) AS TYPE17_VAL 																		-- 유지보수(부산)
			, SUM(NVL(C01_CNT, 0)) + SUM(NVL(C02_CNT, 0)) + SUM(NVL(C09_CNT, 0)) + SUM(NVL(C10_CNT, 0))
			+ SUM(NVL(C11_CNT, 0)) + SUM(NVL(C12_CNT, 0)) + SUM(NVL(C13_CNT, 0)) + SUM(NVL(C14_CNT, 0))
			+ SUM(NVL(C15_CNT, 0)) + SUM(NVL(C16_CNT, 0)) + SUM(NVL(C17_CNT, 0)) AS TYPE18_VAL 							-- 기타(부산)
			, SUM(NVL(C40_CNT, 0)) AS TYPE09_VAL 																		-- 통합복지
			, SUM(NVL(C98_CNT, 0)) AS TYPE10_VAL 																		-- 위반면제
		FROM (
			SELECT *
			FROM (
				SELECT WORK_DATE
					, EXM_ATT
					, COUNT(EXM_ATT) CNT
				FROM (
					SELECT H.WORK_DATE
						, CASE 
							WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV = '06' AND H.ECARD_TYPE = '02' AND REGEXP_LIKE(H.ECARD_ATT, '[2][0-9A-F]') THEN ECARD_ATT -- 긴급면제카드
							WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV IN ('06', '26', '07', '27') AND REGEXP_LIKE(H.ECARD_ATT, '[^2][0-9A-F]') AND REGEXP_LIKE(OBU_ATT, '[1][1-6]') THEN '30' -- 장애인
							WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV IN ('06', '26', '07', '27') AND REGEXP_LIKE(H.ECARD_ATT, '[^2][0-9A-F]') AND REGEXP_LIKE(OBU_ATT, '[2][1-5]|[3][6,7]') THEN '31' -- 유공자
							WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV IN ('06', '26', '07', '27') AND REGEXP_LIKE(H.ECARD_ATT, '[^2][0-9A-F]') THEN '32' -- 유공자
							WHEN L.EXMT_HAND_STAT IS NOT NULL AND L.LOC_CO_DIV = '0' THEN '40'
						END AS EXM_ATT
					FROM PRIM_ETCHAND H, PROC_LOC_EXMTHAND L
					WHERE H.IC_CODE =  #{IC_CODE}
					  AND H.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
					  AND H.IC_CODE = L.IC_CODE(+)
					  AND H.WORK_DATE = L.WORK_DATE(+)
					  AND H.WORK_NO = L.WORK_NO(+)
					  AND H.HAND_SNO = L.HAND_SNO(+)
					  AND H.VLTN_CODE = '00'								-- 위반코드: 정상
					  AND H.EXM_DIV IN ('1', '2', '4')
					UNION ALL
					SELECT WORK_DATE, '98'
					FROM PRIM_ETCVLTN
					WHERE IC_CODE = #{IC_CODE}
					  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
					  AND HAND_TYPE = '40'
					  AND EXMT_DTL_TYPE = '98'
				) 
				GROUP BY WORK_DATE, EXM_ATT			) PIVOT (
				SUM(CNT) AS CNT FOR EXM_ATT 
					IN ('20' AS C20, '21' AS C21, '22' AS C22, '23' AS C23,
						'24' AS C24, '25' AS C25, '26' AS C26, '27' AS C27,
						'28' AS C28, '29' AS C29, '30' AS C30, '31' AS C31, '32' AS C32,
						'40' AS C40, '98' AS C98
					)
			)
		) EX,
		(
			SELECT *
			FROM (
				SELECT H.WORK_DATE
				, CASE 
					WHEN MAIN_PAY_DIV = '4' AND H.BS_EXM_TYPE_DTL = '01' AND REGEXP_LIKE(UPPER(H.OBU_ATT), 'A[0-9A-F]') THEN '06'
					WHEN MAIN_PAY_DIV = '4' AND H.BS_EXM_TYPE_DTL = '01' AND REGEXP_LIKE(UPPER(H.OBU_ATT), 'B[0-9A-F]') THEN '07'
					ELSE H.BS_EXM_TYPE_DTL
				  END AS BS_EXM_TYPE_DTL
				FROM PRIM_ETCHAND H, PRIM_HANDCARNO C
				WHERE H.IC_CODE = #{IC_CODE}
				  AND H.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND H.EXM_DIV IN ('0', '3') -- 중복심사 건 우선순위 반영하여 도공 감면대상은 집계제외
				  AND H.VLTN_CODE = '00'
				  AND H.BS_EXM_TYPE_DIV IN ('1', '2', '4')
				  AND H.IC_CODE = C.IC_CODE(+)
				  AND H.WORK_DATE = C.WORK_DATE(+) 
				  AND H.WORK_NO = C.WORK_NO(+)
				  AND H.HAND_SNO = C.HAND_SNO(+)
				UNION ALL
				SELECT V.WORK_DATE
				, CASE 
					WHEN V.EXMT_DTL_TYPE = '01' THEN H.BS_EXM_TYPE_DTL
					ELSE V.EXMT_DTL_TYPE
				  END AS EXMT_DTL_TYPE
				FROM PRIM_ETCVLTN V, PRIM_HANDCARNO C, PRIM_ETCHAND H
				WHERE V.IC_CODE = #{IC_CODE}
				  AND V.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND V.HAND_TYPE = '40'
				  AND V.EXMT_DTL_TYPE != '98' -- 기타면제 제외
				  AND V.IC_CODE = C.IC_CODE(+)
				  AND V.WORK_DATE = C.WORK_DATE(+)
				  AND V.WORK_NO = C.WORK_NO(+)
				  AND V.HAND_SNO = C.HAND_SNO(+)
				  AND V.IC_CODE = H.IC_CODE(+)
				  AND V.WORK_DATE = H.WORK_DATE(+)
				  AND V.WORK_NO = H.WORK_NO(+)
				  AND V.HAND_SNO = H.HAND_SNO(+)
			)
			PIVOT (
				COUNT(*) AS CNT 
				FOR BS_EXM_TYPE_DTL IN ( '01' C01, '02' C02,
					'03' C03, '04' C04, '05' C05, '06' C06, '07' C07,
					'08' C08, '09' C09, '10' C10, '11' C11, '12' C12,
					'13' C13, '14' C14, '15' C15, '16' C16, '17' C17, '18' C18
				)
			)
		) BS, 
		(
			SELECT TO_CHAR(TO_DATE(#{START_DATE}, 'YYYYMMDD') + (LEVEL -1), 'YYYYMMDD') DATES
			FROM DUAL 
			CONNECT BY LEVEL <![CDATA[ <= ]]> (TO_DATE(#{END_DATE}, 'YYYYMMDD') - TO_DATE(#{START_DATE}, 'YYYYMMDD')) + 1
		) DAYS
		WHERE DAYS.DATES = EX.WORK_DATE(+)
		  AND DAYS.DATES = BS.WORK_DATE(+)
		GROUP BY ROLLUP(DAYS.DATES)
    </select>
    
    <!-- 환불대상 조회(도로공사) -->
    <select id="selectRefundList" resultType="hashmap">
    /* Mapper ID : selectRefundList */
		SELECT ROW_NUMBER() OVER (ORDER BY IC_CODE, WORK_DATE, WORK_NO, HAND_SNO) AS ROW_NUMBER
			 , IC_CODE, WORK_DATE, WORK_NO, HAND_SNO -- PK
			 , FC_CHG_FORMAT(WORK_DATE, '1') AS WORK_DATE_DP
			 , EXIT_HAND_DATE || EXIT_HAND_TIME AS OCC_DT
			 , FC_CHG_FORMAT(EXIT_HAND_DATE || EXIT_HAND_TIME, '11') AS OCC_DT_DP
			 , FC_CHG_CODEDP('057', VLTN_CODE) AS VLTN_CODE_DP
			 , ECARD_TYPE
			 , FC_CHG_CODENM('071', ECARD_TYPE) ECARD_TYPE_DP
			 , FC_CHG_FORMAT(ECARD_NO, '3') AS ECARD_NO_DP
			 , WCARD_NO 
			 , FC_CHG_FORMAT(WCARD_NO, '3') AS WCARD_NO_DP
			 , OBU_NO 
			 , FC_CHG_FORMAT(OBU_NO, '3') AS OBU_NO_DP
			 , INST_CAR_NO 
			 , HAND_CAR_NO
			 , FC_CHG_CODEDP('171', CAR_TYPE) AS CAR_TYPE_DP
			 , PASS_FARE
			 , FC_CHG_FORMAT(PASS_FARE, '4') AS PASS_FARE_DP
			 , PAY_FARE
			 , FC_CHG_FORMAT(PAY_FARE, '4') AS PAY_FARE_DP
			 , RFND_FARE 
			 , FC_CHG_FORMAT(RFND_FARE, '4') AS RFND_FARE_DP
			 , CASE WHEN EXMT_HAND_TYPE = '2' THEN '자동처리'
			 		WHEN EXMT_HAND_TYPE = '3' THEN '수동처리'
			   		ELSE EXMT_HAND_TYPE
			   END EXMT_HAND_TYPE_DP
			 , NOTE 
		FROM PROC_LOC_EXMTHAND
		WHERE IC_CODE = #{IC_CODE}
		  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
		  AND EXMT_HAND_STAT = '2' 	-- 2: 감면
		  AND LOC_CO_DIV = #{LOC_CO_DIV} 		-- 0: 도로공사, 1: 광안대로
		  AND EXMT_HAND_TYPE = DECODE(#{EXMT_HAND_TYPE}, '', EXMT_HAND_TYPE, #{EXMT_HAND_TYPE})
		  AND INST_CAR_NO LIKE '%' || #{INST_CAR_NO} || '%'
		  AND RFND_FARE > 0
		ORDER BY IC_CODE, WORK_DATE, WORK_NO, HAND_SNO
    </select>
    
    <!-- 환불대상 조회(부산시) -->
    <select id="selectRefundListBs" resultType="hashmap">
    /* Mapper ID : selectRefundListBs */
		SELECT ROW_NUMBER() OVER (ORDER BY TB.IC_CODE, TB.WORK_DATE, TB.WORK_NO, TB.HAND_SNO) ROW_NUMBER, TB.* 
		FROM (SELECT A.IC_CODE, A.WORK_DATE, A.WORK_NO, A.HAND_SNO -- PK 
				, FC_CHG_FORMAT(A.WORK_DATE, '1') WORK_DATE_DP
				, FC_CHG_FORMAT(A.HAND_DT, '11') HAND_DT_DP
				, B.HAND_CAR_TYPE 				-- 처리차종
				, FC_CHG_CODEDP('171', B.HAND_CAR_TYPE) HAND_CAR_TYPE_DP
				, A.ORIGIN_PASS_FARE 
				, FC_CHG_FORMAT(A.ORIGIN_PASS_FARE, '4') ORIGIN_PASS_FARE_DP
				, A.PASS_FARE 
				, FC_CHG_FORMAT(A.PASS_FARE, '4') PASS_FARE_DP
				, A.PAY_FARE
				, FC_CHG_FORMAT(A.PAY_FARE, '4') PAY_FARE_DP
				, DECODE(C.LPAY_CRCT_YN, 'Y', C.CRCT_PAY_FARE, C.WTHD_FARE) WTHD_FARE
				, FC_CHG_FORMAT(DECODE(C.LPAY_CRCT_YN, 'Y', C.CRCT_PAY_FARE, C.WTHD_FARE), '4') WTHD_FARE_DP
				, FC_CHG_CODENM('138', A.EXM_DIV) EXM_DIV_DP
				, A.CARD_NO
				, FC_CHG_FORMAT(A.CARD_NO, 3) CARD_NO_DP
				, FC_CHG_CODEDP('057', A.VLTN_CODE) VLTN_CODE_DP
				, FC_CHG_FORMAT(A.OBU_NO, 3) OBU_NO_DP
				, B.HAND_CAR_NO 	-- 처리차량번호
				, FC_CHG_CODENM('071', A.ECARD_TYPE) ECARD_TYPE_DP
				, CASE WHEN (V.HAND_TYPE = '40' AND V.EXMT_DTL_TYPE != '98') THEN V.EXMT_DTL_TYPE ELSE A.BS_EXM_TYPE_DTL END BS_EXM_TYPE_DTL
				, FC_CHG_CODENM('292', CASE WHEN (V.HAND_TYPE = '40' AND V.EXMT_DTL_TYPE != '98') THEN V.EXMT_DTL_TYPE ELSE A.BS_EXM_TYPE_DTL END) AS BS_EXM_TYPE_DTL_DP
				, B.NOTE
				, T.TAXI_TRNRCP_DT
				, NVL(FC_CHG_FORMAT(T.TAXI_TRNRCP_DT, '11'), '-') TRNRCP_DT_DP
				, T.TAXI_EXM_TYPE
				, NVL(FC_CHG_CODENM('295', T.TAXI_EXM_TYPE), '-') TAXI_EXM_TYPE_DP
			FROM 
				PRIM_ETCHAND A, PRIM_HANDCARNO B, PRIM_ECARDHAND C, PRIM_ETCVLTN V, PROC_TAXI_HIST T
			WHERE A.IC_CODE = #{IC_CODE}
				AND A.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				AND A.IC_CODE = B.IC_CODE(+)
		        AND A.WORK_DATE = B.WORK_DATE(+)
		        AND A.WORK_NO = B.WORK_NO(+)
		        AND A.HAND_SNO = B.HAND_SNO(+)
		        AND A.IC_CODE = C.IC_CODE(+)
		        AND A.WORK_DATE = C.WORK_DATE(+)
		        AND A.WORK_NO = C.WORK_NO(+)
		        AND A.HAND_SNO = C.HAND_SNO(+)
		        AND A.IC_CODE = V.IC_CODE(+)
		        AND A.WORK_DATE = V.WORK_DATE(+)
		        AND A.WORK_NO = V.WORK_NO(+)
		        AND A.HAND_SNO = V.HAND_SNO(+)
		        AND A.IC_CODE = T.IC_CODE(+)
		        AND A.WORK_DATE = T.WORK_DATE(+)
		        AND A.WORK_NO = T.WORK_NO(+)
		        AND A.HAND_SNO = T.HAND_SNO(+)
				AND (A.BS_EXM_TYPE_DIV IN ('1', '2', '4') OR (V.HAND_TYPE = '40' AND V.EXMT_DTL_TYPE != '98'))
		        AND A.WORK_NO LIKE  #{LANE_NO} || '%__'
		        AND DECODE(C.LPAY_CRCT_YN, 'Y', C.CRCT_PAY_FARE, C.WTHD_FARE) > 0
		) TB
		WHERE TB.HAND_CAR_NO LIKE '%' || #{CAR_NO} || '%'
		  AND TB.CARD_NO LIKE '%' || #{CARD_NO} || '%'
		ORDER BY TB.IC_CODE, TB.WORK_DATE, TB.WORK_NO, TB.HAND_SNO
    </select>
    
    <!-- 일별 감면차량 이용현황 - 도공면제 -->
    <select id="selectDailyExemptSummaryEx" resultType="hashmap">
	/* Mapper ID : selectDailyExemptSummaryEx */
		SELECT IC_CODE, NVL(FC_CHG_FORMAT(WORK_DATE, '1'), '합계') WORK_DATE_DP
			, FC_CHG_FORMAT(NVL(SUM(TYPE0_VAL), 0), '4') AS TYPE0_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE1_VAL), 0), '4') AS TYPE1_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE2_VAL), 0), '4') AS TYPE2_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE3_VAL), 0), '4') AS TYPE3_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE4_VAL), 0), '4') AS TYPE4_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE5_VAL), 0), '4') AS TYPE5_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE6_VAL), 0), '4') AS TYPE6_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE7_VAL), 0), '4') AS TYPE7_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE8_VAL), 0), '4') AS TYPE8_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE9_VAL), 0), '4') AS TYPE9_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE10_VAL), 0), '4') AS TYPE10_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE11_VAL), 0), '4') AS TYPE11_VAL
			, FC_CHG_FORMAT(NVL(SUM(TYPE98_VAL), 0), '4') AS TYPE98_VAL
			, FC_CHG_FORMAT(NVL(SUM(SMR_VAL), 0), '4') AS SMR_VAL
		FROM (
			SELECT IC_CODE
				, WORK_DATE
				, NVL(EXM_ATT, 'SMR') EXM_ATT
				, COUNT(EXM_ATT) CNT
			FROM (
				SELECT H.IC_CODE
					, H.WORK_DATE
					, CASE 
						WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV = '06' AND H.ECARD_TYPE = '02' AND REGEXP_LIKE(H.ECARD_ATT, '[2][0-9A-F]') THEN 'TYPE' || SUBSTR(ECARD_ATT, 2, 1) -- 긴급면제카드
						WHEN H.MAIN_PAY_DIV = '5' AND H.ECARD_PAY_DIV IN ('06', '26', '07', '27') AND REGEXP_LIKE(H.ECARD_ATT, '[^2][0-9A-F]') THEN 'TYPE10'
						WHEN L.EXMT_HAND_STAT IS NOT NULL AND L.LOC_CO_DIV = '0' THEN 'TYPE11'
					END AS EXM_ATT
				FROM PRIM_ETCHAND H, PROC_LOC_EXMTHAND L
				WHERE H.IC_CODE =  #{IC_CODE}
				  AND H.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND H.IC_CODE = L.IC_CODE(+)
				  AND H.WORK_DATE = L.WORK_DATE(+)
				  AND H.WORK_NO = L.WORK_NO(+)
				  AND H.HAND_SNO = L.HAND_SNO(+)
				  AND H.VLTN_CODE = '00'								-- 위반코드: 정상
				  AND H.EXM_DIV IN ('1', '2', '4')
				UNION ALL
				SELECT IC_CODE
					, WORK_DATE
					, 'TYPE98'
				FROM PRIM_ETCVLTN
				WHERE IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND HAND_TYPE = '40'
				  AND EXMT_DTL_TYPE = '98'
			) 
			GROUP BY IC_CODE, WORK_DATE, ROLLUP(EXM_ATT)
		) PIVOT (
			SUM(CNT) AS VAL FOR EXM_ATT 
				IN ('TYPE0' AS TYPE0, 'TYPE1' AS TYPE1, 'TYPE2' AS TYPE2, 'TYPE3' AS TYPE3, 
					'TYPE4' AS TYPE4, 'TYPE5' AS TYPE5, 'TYPE6' AS TYPE6, 'TYPE7' AS TYPE7, 
					'TYPE8' AS TYPE8, 'TYPE9' AS TYPE9, 'TYPE10' AS TYPE10, 'TYPE11' AS TYPE11,
					'TYPE98' AS TYPE98, 'SMR' AS SMR
				)
		)
		GROUP BY IC_CODE, ROLLUP(WORK_DATE)
		ORDER BY IC_CODE, WORK_DATE
    </select>
    
    <!-- 일별 감면차량 이용현황 - 도공할인 -->
    <select id="selectDailyReductionSummaryEx" resultType="hashmap">
	/* Mapper ID : selectDailyReductionSummaryEx */
		SELECT IC_CODE, NVL(FC_CHG_FORMAT(WORK_DATE, '1'), '합계') WORK_DATE_DP
			, NVL(SUM(TYPE1_VAL), 0) AS TYPE0_VAL
			, NVL(SUM(SMR_VAL), 0) AS SMR_VAL
		FROM (
			SELECT IC_CODE
				, WORK_DATE
				, NVL(EXM_ATT, 'SMR') EXM_ATT
				, COUNT(EXM_ATT) CNT
			FROM (
				SELECT IC_CODE
					, WORK_DATE
					, 'TYPE0' AS EXM_ATT 							-- 감면단말기할인
				FROM PRIM_ETCHAND 
				WHERE IC_CODE = #{IC_CODE}
				  AND WORK_DATE  BETWEEN #{START_DATE} AND #{END_DATE}
				  AND VLTN_CODE = '00'								-- 위반코드: 정상
				  AND MAIN_PAY_DIV = '5'							-- 대표수납구분: 면제
				  AND ECARD_PAY_DIV IN ('07', '27') 				-- 전자카드수납구분: 할인
				  AND REGEXP_LIKE(ECARD_ATT, '[^2][0-9A-F]')		-- 전자카드속성: 긴급면제카드 제외
			) 
			GROUP BY IC_CODE, WORK_DATE, ROLLUP(EXM_ATT)
		) PIVOT (
			SUM(CNT) AS VAL FOR EXM_ATT 
				IN ('TYPE0' AS TYPE1, 'SMR' AS SMR)
		)
		GROUP BY IC_CODE, ROLLUP(WORK_DATE)
		ORDER BY IC_CODE, WORK_DATE
    </select>
    
	<!-- OBU 타입별 처리내역 -->
    <select id="selectSummaryByOBUType" resultType="hashmap">
	/* Mapper ID : selectSummaryByOBUType */
		SELECT WORK_DATE
			, NVL(FC_CHG_FORMAT(WORK_DATE, '1'), '전체합계') AS WORK_DATE_DP
			, CASE WHEN GPID = 3 THEN '일별합계' ELSE LANE_NO END AS LANE_NO
			, FC_CHG_LANENAME(#{IC_CODE}, LANE_NO) AS LANE_NAME
			, CASE WHEN GPID = 1 THEN '소계' ELSE VLTN_CODE END AS VLTN_CODE
			, FC_CHG_CODENM('057', VLTN_CODE) AS VLTN_CODE_DP
			, IR_CNT 
			, CASE WHEN IR_CNT  ! = 0 THEN TO_CHAR(ROUND(100.0 * IR_CNT / SUB_CNT, 1), 'FM999.00') || '%' ELSE '0.0%' END IR_RATE
			, RF_CNT 
			, CASE WHEN RF_CNT  ! = 0 THEN TO_CHAR(ROUND(100.0 * RF_CNT / SUB_CNT, 1), 'FM999.00') || '%' ELSE '0.0%' END RF_RATE
			, ETC_CNT 
			, CASE WHEN ETC_CNT  ! = 0 THEN TO_CHAR(ROUND(100.0 * ETC_CNT / SUB_CNT, 1), 'FM999.00') || '%' ELSE '0.0%' END ETC_RATE
			, SUB_CNT 
		FROM (		
			SELECT WORK_DATE, LANE_NO, VLTN_CODE
				, GROUPING_ID(WORK_DATE, LANE_NO, VLTN_CODE) GPID
				, NVL(SUM(IR_CNT), 0) AS IR_CNT
				, NVL(SUM(RF_CNT), 0) AS RF_CNT
				, NVL(SUM(ETC_CNT), 0) AS ETC_CNT
				, NVL(SUM(SUB_CNT), 0) AS SUB_CNT
			FROM (
				SELECT WORK_DATE
					, SUBSTR(WORK_NO, 0, 2) AS LANE_NO 
					, VLTN_CODE 
					, CASE WHEN GROUPING_ID(OBU_TYPE) = 1 THEN 'SUBTOT'
						   WHEN VLTN_CODE = '01' THEN '99'
						   ELSE OBU_TYPE
					  END OBU_TYPE
					, COUNT(VLTN_CODE) AS CNT
				FROM PRIM_ETCHAND
				WHERE IC_CODE = #{IC_CODE} 
				  AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				GROUP BY IC_CODE, WORK_DATE, SUBSTR(WORK_NO, 0, 2), VLTN_CODE, ROLLUP(OBU_TYPE)
			) PIVOT (
				SUM(CNT) AS CNT
				FOR OBU_TYPE IN ('00' AS IR, '01' AS RF, '99'AS ETC, 'SUBTOT' AS SUB)
			)
			GROUP BY ROLLUP(WORK_DATE, LANE_NO, VLTN_CODE)
		)
    </select>
    
    <!-- 일별 감면현황-부산시 -->
    <select id="selectDailyExemptSummaryBs" resultType="hashmap">
	/* Mapper ID : selectDailyExemptSummaryBs */
		SELECT NVL(FC_CHG_FORMAT(TB.WORK_DATE, 'DATE'), '합계') AS WORK_DATE_DP
			, FC_CHG_FORMAT(TB.C01_CNT, '4') AS C01_CNT
			, FC_CHG_FORMAT(TB.C02_CNT, '4') AS C02_CNT
			, FC_CHG_FORMAT(TB.C03_CNT, '4') AS C03_CNT
			, FC_CHG_FORMAT(TB.C04_CNT, '4') AS C04_CNT
			, FC_CHG_FORMAT(TB.C05_CNT, '4') AS C05_CNT
			, FC_CHG_FORMAT(TB.C06_CNT, '4') AS C06_CNT
			, FC_CHG_FORMAT(TB.C07_CNT, '4') AS C07_CNT
			, FC_CHG_FORMAT(TB.C08_CNT, '4') AS C08_CNT
			, FC_CHG_FORMAT(TB.C09_CNT, '4') AS C09_CNT
			, FC_CHG_FORMAT(TB.C10_CNT, '4') AS C10_CNT
			, FC_CHG_FORMAT(TB.C11_CNT, '4') AS C11_CNT
			, FC_CHG_FORMAT(TB.C12_CNT, '4') AS C12_CNT
			, FC_CHG_FORMAT(TB.C13_CNT, '4') AS C13_CNT
			, FC_CHG_FORMAT(TB.C14_CNT, '4') AS C14_CNT
			, FC_CHG_FORMAT(TB.C15_CNT, '4') AS C15_CNT
			, FC_CHG_FORMAT(TB.C16_CNT, '4') AS C16_CNT
			, FC_CHG_FORMAT(TB.C17_CNT, '4') AS C17_CNT
			, FC_CHG_FORMAT(TB.C18_CNT, '4') AS C18_CNT
			, FC_CHG_FORMAT( TB.C01_CNT + TB.C02_CNT
				+ TB.C03_CNT + TB.C04_CNT + TB.C05_CNT + TB.C06_CNT + TB.C07_CNT
				+ TB.C08_CNT + TB.C09_CNT + TB.C10_CNT + TB.C11_CNT + TB.C12_CNT
				+ TB.C13_CNT + TB.C14_CNT + TB.C15_CNT + TB.C16_CNT + TB.C17_CNT + TB.C18_CNT, '4') AS ALL_CNT
		FROM ( 
			SELECT WORK_DATE
				, SUM(C01_CNT) AS C01_CNT
				, SUM(C02_CNT) AS C02_CNT
				, SUM(C03_CNT) AS C03_CNT
				, SUM(C04_CNT) AS C04_CNT
				, SUM(C05_CNT) AS C05_CNT
				, SUM(C06_CNT) AS C06_CNT
				, SUM(C07_CNT) AS C07_CNT
				, SUM(C08_CNT) AS C08_CNT
				, SUM(C09_CNT) AS C09_CNT
				, SUM(C10_CNT) AS C10_CNT
				, SUM(C11_CNT) AS C11_CNT
				, SUM(C12_CNT) AS C12_CNT
				, SUM(C13_CNT) AS C13_CNT
				, SUM(C14_CNT) AS C14_CNT
				, SUM(C15_CNT) AS C15_CNT
				, SUM(C16_CNT) AS C16_CNT
				, SUM(C17_CNT) AS C17_CNT
				, SUM(C18_CNT) AS C18_CNT
			FROM (
				SELECT H.WORK_DATE
				, CASE 
					WHEN MAIN_PAY_DIV = '4' AND H.BS_EXM_TYPE_DTL = '01' AND REGEXP_LIKE(UPPER(H.OBU_ATT), 'A[0-9A-F]') THEN '06'
					WHEN MAIN_PAY_DIV = '4' AND H.BS_EXM_TYPE_DTL = '01' AND REGEXP_LIKE(UPPER(H.OBU_ATT), 'B[0-9A-F]') THEN '07'
					ELSE H.BS_EXM_TYPE_DTL
				  END AS BS_EXM_TYPE_DTL
				FROM PRIM_ETCHAND H, PRIM_HANDCARNO C
				WHERE H.IC_CODE = #{IC_CODE}
				  AND H.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND H.EXM_DIV IN ('0', '3') -- 중복심사 건 우선순위 반영하여 도공 감면대상은 집계제외
				  AND H.VLTN_CODE = '00'
				  AND H.BS_EXM_TYPE_DIV IN ('1', '2', '4')
				  AND H.IC_CODE = C.IC_CODE(+)
				  AND H.WORK_DATE = C.WORK_DATE(+) 
				  AND H.WORK_NO = C.WORK_NO(+)
				  AND H.HAND_SNO = C.HAND_SNO(+)
				UNION ALL
				SELECT V.WORK_DATE
				, CASE 
					WHEN V.EXMT_DTL_TYPE = '01' THEN H.BS_EXM_TYPE_DTL
					ELSE V.EXMT_DTL_TYPE
				  END AS EXMT_DTL_TYPE
				FROM PRIM_ETCVLTN V, PRIM_HANDCARNO C, PRIM_ETCHAND H
				WHERE V.IC_CODE = #{IC_CODE}
				  AND V.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
				  AND V.HAND_TYPE = '40'
				  AND V.EXMT_DTL_TYPE != '98' -- 기타면제 제외
				  AND V.IC_CODE = C.IC_CODE(+)
				  AND V.WORK_DATE = C.WORK_DATE(+)
				  AND V.WORK_NO = C.WORK_NO(+)
				  AND V.HAND_SNO = C.HAND_SNO(+)
				  AND V.IC_CODE = H.IC_CODE(+)
				  AND V.WORK_DATE = H.WORK_DATE(+)
				  AND V.WORK_NO = H.WORK_NO(+)
				  AND V.HAND_SNO = H.HAND_SNO(+)
			)
			PIVOT (
				COUNT(*) AS CNT 
				FOR BS_EXM_TYPE_DTL IN ( '01' C01, '02' C02,
					'03' C03, '04' C04, '05' C05, '06' C06, '07' C07,
					'08' C08, '09' C09, '10' C10, '11' C11, '12' C12,
					'13' C13, '14' C14, '15' C15, '16' C16, '17' C17, '18' C18
				)
			)
			GROUP BY ROLLUP (WORK_DATE)
		) TB
		ORDER BY WORK_DATE
    </select>

    <!-- 월보시작 -->
    <select id="selectMonthTollFeeReportTrafficAll" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficAll 월보 통행량(전체) 1페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_ALL_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_ALL_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_ALL_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_ALL_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ALL_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_ALL_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ALL_CUR_MONTH_COMPACT_CAR_CNT,


            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_ALL_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_ALL_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ALL_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_ALL_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ALL_PRE_MONTH_COMPACT_CAR_CNT,


            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_ALL_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_ALL_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ALL_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_ALL_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ALL_PRE_YEAR_COMPACT_CAR_CNT,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,

            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE

        FROM (
                 -- 통행량(전체)(29개 컬럼)
                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                           VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                           VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                           VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                           VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                           VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                           VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                           VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                           VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTrafficAllExIn" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficAll 월보 통행량(전체)-기타(수입) 1페이지 */
        SELECT
            -- 당월
            NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END), 0) AS TRAFFIC_ALL_CUR_MONTH_EXTRA_INCOME,

            -- 전월
            NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) AS TRAFFIC_ALL_PRE_MONTH_EXTRA_INCOME,

            -- 전년동기
            NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) AS TRAFFIC_ALL_PRE_YEAR_EXTRA_INCOME,

            -- 전월대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_MONTH_EXTRA_INCOME_CHANGE_RATE,

            -- 전년동기대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_PRE_YEAR_EXTRA_INCOME_CHANGE_RATE,

            -- 당해 누계
            NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END), 0) AS TRAFFIC_ALL_CUMULATIVE_CURRENT_EXTRA_INCOME,

            -- 전년 누계
            NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) AS TRAFFIC_ALL_CUMULATIVE_PREVIOUS_EXTRA_INCOME,

            -- 누계 전년동기대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0)) / NULLIF(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0)) / NULLIF(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ALL_CUMULATIVE_EXTRA_INCOME_CHANGE_RATE

        FROM (
                 -- 기타수입건수: 사무실_수입_건수 + 사무실_환불_건수

                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     (OFC_PAY_CNT + OFC_RFND_CNT) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     (OFC_PAY_CNT + OFC_RFND_CNT) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     (OFC_PAY_CNT + OFC_RFND_CNT) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     (OFC_PAY_CNT + OFC_RFND_CNT) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     (OFC_PAY_CNT + OFC_RFND_CNT) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTrafficPremium" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficPremium 월보 통행량(유료) 2페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_PREMIUM_CUR_MONTH_COMPACT_CAR_CNT,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_PREMIUM_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_MONTH_COMPACT_CAR_CNT,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_PREMIUM_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_PREMIUM_PRE_YEAR_COMPACT_CAR_CNT,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,


            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_PREMIUM_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_PREMIUM_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE

        FROM (
                 -- 통행량(유료)(12개 컬럼): 차로수납_ETC 호환(선불)카드 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
                 --                  차로수납_ETC_할인_연속통행_후불전자카드 + 사전등록 + 위반_정상_선불 + 위반_정상_후불 + 연속통행_사전등록 +
                 --                  위반_연속통행_정상_선불 + 위반_연속통행_정상_후불

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,

                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,

                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,

                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,

                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,

                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                          VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                           LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                           VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                           LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                           VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

             )
    </select>

    <select id="selectMonthTollFeeReportTrafficEtcCar" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficEtcCar 월보 기타차량 이용현황 3페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUR_MONTH_COMPACT_CAR_CNT,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_MONTH_COMPACT_CAR_CNT,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ETC_CAR_PRE_YEAR_COMPACT_CAR_CNT,

            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,

            -- 기타차량 세부내역 계
            MAX(CASE WHEN PERIOD = 'DETAIL_SUM' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_DETAIL_TOTAL_CNT,
            -- 기타차량 세부내역 완납
            MAX(CASE WHEN PERIOD = 'DETAIL_PAY' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_DETAIL_PAY_CNT,
            -- 기타차량 세부내역 미납
            MAX(CASE WHEN PERIOD = 'DETAIL_UN_PAY' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_DETAIL_UNPAY_CNT,
            -- 기타차량 세부내역 기타
            MAX(CASE WHEN PERIOD = 'DETAIL_ETC' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_DETAIL_ETC_CNT,

            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,

            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_ETC_CAR_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_ETC_CAR_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE

        FROM (
                 -- 기타차량 이용현황(7개 컬럼):  위반_완납_현금 + 위반_완납_계좌 + 위반_미납 + 면제심사_미납 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_연속통행_미납

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_DC_UNP
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 기타차량 세부내역 계
                 SELECT
                     'DETAIL_SUM' AS PERIOD,
                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT
                                     + VLTN_UNP + EXMT_UNP + VLTN_DC_UNP
                                     + VLTN_UNFT
                         ), 0) AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 기타차량 세부내역 완납: 위반_완납_현금 + 위반_완납_계좌 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌
                 SELECT
                     'DETAIL_PAY' AS PERIOD,
                     NVL(SUM(VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT), 0) AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 기타차량 세부내역 미납: 위반_미납 + 면제심사_미납 + 위반_연속통행_미납
                 SELECT
                     'DETAIL_UN_PAY' AS PERIOD,
                     NVL(SUM(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP), 0) AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 기타차량 세부내역 기타: 위반_부적격
                 SELECT
                     'DETAIL_ETC' AS PERIOD,
                     NVL(SUM(VLTN_UNFT), 0) AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'
             )
    </select>

    <select id="selectMonthTollFeeReportTrafficContinuous" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficContinuous 월보 통행량(연속통행 할인) 4페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUR_MONTH_COMPACT_CAR_CNT,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_CONTINUOUS_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_MONTH_COMPACT_CAR_CNT,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_CONTINUOUS_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_CONTINUOUS_PRE_YEAR_COMPACT_CAR_CNT,

            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 당월 연속통행/통행량 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN TOTAL_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_TOTAL_CNT,

            -- 당월 연속통행/통행량 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN LARGE_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_LARGE_CAR_CNT,

            -- 당월 연속통행/통행량 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_MEDIUM_CAR_CNT,

            -- 당월 연속통행/통행량 (소형)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN SMALL_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_SMALL_CAR_CNT,

            -- 당월 연속통행/통행량 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_COMPACT_CAR_CNT,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,


            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_CONTINUOUS_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 누계 연속통행/통행량 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN TOTAL_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_CUMULATIVE_TOTAL_CNT,

            -- 누계 연속통행/통행량 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN LARGE_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_CUMULATIVE_LARGE_CAR_CNT,

            -- 누계 연속통행/통행량 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_CUMULATIVE_MEDIUM_CAR_CNT,

            -- 누계 연속통행/통행량 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN SMALL_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_CUMULATIVE_SMALL_CAR_CNT,

            -- 누계 연속통행/통행량 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_CONTINUOUS_DIVIDE_TRAFFIC_ALL_CUMULATIVE_COMPACT_CAR_CNT

        FROM (
                 -- 통행량(연속통행 할인)(8개 컬럼): 차로수납_ETC_할인_연속통행_호환(선불)카드 + 차로수납_ETC_할인_연속통행_후불전자카드 + 위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_연속통행_미납 + 연속통행_사전등록

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     NVL(SUM(SUM_CNTDC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN SUM_CNTDC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN SUM_CNTDC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN SUM_CNTDC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN SUM_CNTDC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     NVL(SUM(SUM_CNTDC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN SUM_CNTDC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN SUM_CNTDC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN SUM_CNTDC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN SUM_CNTDC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     NVL(SUM(SUM_CNTDC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN SUM_CNTDC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN SUM_CNTDC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN SUM_CNTDC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN SUM_CNTDC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     NVL(SUM(SUM_CNTDC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN SUM_CNTDC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN SUM_CNTDC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN SUM_CNTDC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN SUM_CNTDC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     NVL(SUM(SUM_CNTDC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN SUM_CNTDC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN SUM_CNTDC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN SUM_CNTDC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN SUM_CNTDC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           SUM_CNTDC
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           SUM_CNTDC
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 통행량 전체(연속통행/통행량)
                 SELECT
                     'TRAFFIC_ALL' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 통행량 전체(연속통행/통행량)
                 SELECT
                     'TRAFFIC_ALL_CUMULATIVE' AS PERIOD,
                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTrafficCommute" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficCommute 월보 통행량(출퇴근 할인) 5페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_COMMUTE_CUR_MONTH_COMPACT_CAR_CNT,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_COMMUTE_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_MONTH_COMPACT_CAR_CNT,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_COMMUTE_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_COMMUTE_PRE_YEAR_COMPACT_CAR_CNT,

            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 당월 연속통행/통행량 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN TOTAL_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_TOTAL_CNT,

            -- 당월 연속통행/통행량 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN LARGE_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_LARGE_CAR_CNT,

            -- 당월 연속통행/통행량 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_MEDIUM_CAR_CNT,

            -- 당월 연속통행/통행량 (소형)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN SMALL_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_SMALL_CAR_CNT,

            -- 당월 연속통행/통행량 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_COMPACT_CAR_CNT,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,


            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,


            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_COMMUTE_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,


            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 누계 연속통행/통행량 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN TOTAL_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_CUMULATIVE_TOTAL_CNT,

            -- 누계 연속통행/통행량 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN LARGE_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_CUMULATIVE_LARGE_CAR_CNT,

            -- 누계 연속통행/통행량 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_CUMULATIVE_MEDIUM_CAR_CNT,

            -- 누계 연속통행/통행량 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN SMALL_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_CUMULATIVE_SMALL_CAR_CNT,

            -- 누계 연속통행/통행량 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) / NULLIF(MAX(CASE WHEN PERIOD = 'TRAFFIC_ALL_CUMULATIVE' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 'FM99999990.00') || '%'
                END AS TRAFFIC_COMMUTE_DIVIDE_TRAFFIC_ALL_CUMULATIVE_COMPACT_CAR_CNT

        FROM (
                 -- 통행량(출퇴근 할인)(2개 컬럼): 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     NVL(SUM(LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     NVL(SUM(LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     NVL(SUM(LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     NVL(SUM(LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     NVL(SUM(LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC), 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 통행량 전체(출퇴근할인/통행량)
                 SELECT
                     'TRAFFIC_ALL' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 통행량 전체(출퇴근할인/통행량)
                 SELECT
                     'TRAFFIC_ALL_CUMULATIVE' AS PERIOD,

                     NVL(SUM(
                                 LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                 VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                 VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                 VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_CNT,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                          VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                          VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                          VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                          VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_CNT,

                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTrafficExemption" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTrafficExemption 월보 통행량(면제) 6페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_AVG_CNT,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_AVG_CNT,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_TOTAL_CNT,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_LARGE_CAR_CNT,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_MEDIUM_CAR_CNT,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_SMALL_CAR_CNT,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUR_MONTH_COMPACT_CAR_CNT,


            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END) AS TRAFFIC_EXEMPTION_PRE_MONTH_TOTAL_CNT,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_MONTH_LARGE_CAR_CNT,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_MONTH_MEDIUM_CAR_CNT,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_MONTH_SMALL_CAR_CNT,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_MONTH_COMPACT_CAR_CNT,


            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END) AS TRAFFIC_EXEMPTION_PRE_YEAR_TOTAL_CNT,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_YEAR_LARGE_CAR_CNT,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_YEAR_MEDIUM_CAR_CNT,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_YEAR_SMALL_CAR_CNT,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END) AS TRAFFIC_EXEMPTION_PRE_YEAR_COMPACT_CAR_CNT,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_MONTH_TOTAL_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_MONTH_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_MONTH_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_MONTH_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_MONTH_COMPACT_CAR_CNT_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_CNT END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_YEAR_TOTAL_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_YEAR_LARGE_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_YEAR_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_YEAR_SMALL_CAR_CNT_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_PRE_YEAR_COMPACT_CAR_CNT_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,


            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_CURRENT_TOTAL_CNT,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_CURRENT_LARGE_CAR_CNT,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_CURRENT_MEDIUM_CAR_CNT,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_CURRENT_SMALL_CAR_CNT,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_CURRENT_COMPACT_CAR_CNT,


            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_PREVIOUS_TOTAL_CNT,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_PREVIOUS_LARGE_CAR_CNT,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_PREVIOUS_MEDIUM_CAR_CNT,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_PREVIOUS_SMALL_CAR_CNT,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END) AS TRAFFIC_EXEMPTION_CUMULATIVE_PREVIOUS_COMPACT_CAR_CNT,


            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_CUMULATIVE_TOTAL_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_CUMULATIVE_LARGE_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_CUMULATIVE_MEDIUM_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_CUMULATIVE_SMALL_CAR_CNT_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_CNT END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TRAFFIC_EXEMPTION_CUMULATIVE_COMPACT_CAR_CNT_CHANGE_RATE

        FROM (
                 -- 통행량(면제)(5개 컬럼): 차로면제_ETC_면제OBU + 차로면제_ETC_면제카드 + 차로면제_ETC_부산시 + 위반_면제 + 위반_면제_부산시

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN) , 0) AS TOTAL_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  IN (3,4,5) THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS LARGE_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 2 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS MEDIUM_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 1 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS SMALL_CAR_CNT,
                     NVL(SUM(CASE WHEN DFT_CAR_TYPE  = 6 THEN LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN ELSE 0 END), 0) AS COMPACT_CAR_CNT,
                     0 AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(대) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (대) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_CNT,
                     0 AS LARGE_CAR_CNT,
                     0 AS MEDIUM_CAR_CNT,
                     0 AS SMALL_CAR_CNT,
                     0 AS COMPACT_CAR_CNT,
                     NVL(ROUND(NVL(SUM(
                                           LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportExemptionDetail" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportExemptionDetail 월보 세부면제현황 7페이지 */
        SELECT
            -- [당월 통행량]
            -- 총(24개 컬럼): 차로면제_ETC_면제OBU + 차로면제_ETC_면제카드 + 위반_면제 + 차로면제_ETC_부산시 + 위반_면제_부산시 +
            --             위반_미납 + 면제심사_미납 + 위반_연속통행_미납 + 위반_완납_현금 + 위반_완납_계좌 +
            --             위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 차로수납_ETC 호환(선불)카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --             위반_정상_선불 + 위반_연속통행_정상_선불 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_후불전자카드 +
            --             위반_정상_후불 + 위반_연속통행_정상_후불 + 사전등록 + 연속통행_사전등록
            (
                SELECT
                    NVL(SUM(
                                LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_TOTAL_CNT,

            -- 유료통행량(20개컬럼 - 유료 + 기타차량세부내역(완납 + 미납 + 기타(사무실수납)) )
            -- 유료(12개 컬럼):      차로수납_ETC 호환(선불)카드 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --                     차로수납_ETC_할인_연속통행_후불전자카드 + 사전등록 + 위반_정상_선불 + 위반_정상_후불 + 연속통행_사전등록 +
            --                     위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 +
            -- 기타차량세부내역(8개컬럼): 위반_완납_현금 + 위반_완납_계좌 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_미납 +
            --                       면제심사_미납 + 위반_연속통행_미납 + 위반_부적격
            (
                SELECT
                    NVL(SUM(
                                LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD +
                                VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_UNP +
                                EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_PREMIUM_CNT,

            -- 장애인 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_05), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_05_CNT,

            -- 유공자 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_04), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_04_CNT,

            -- 공차택시 통행량
            (
                SELECT
                    NVL(SUM(EMPTY_TAXI_CNT), 0)
                FROM PROC_DAYFININFO_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
            ) AS MONTH_EXMT_DETAIL_EMPTY_TAXI_CNT,

            -- 두리발 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_14), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_14_CNT,

            -- 다자녀 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_03), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_03_CNT,

            -- 친환경 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_06), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_06_CNT,

            -- 기타 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_ETC), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '0'
            ) AS MONTH_EXMT_DETAIL_ETC_CNT,

            -- 면제합계 통행량
            (
                SELECT
                    (SELECT NVL(SUM(EXMT_DETAIL_05), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_04), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_14), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_03), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_06), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_ETC), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EMPTY_TAXI_CNT), 0) FROM PROC_DAYFININFO_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%')
                FROM DUAL
            ) AS MONTH_EXMT_DETAIL_CNT_TOTAL,


            -- [당월 통행료]
            -- 총(24개 컬럼): 차로면제_ETC_면제OBU + 차로면제_ETC_면제카드 + 위반_면제 + 차로면제_ETC_부산시 + 위반_면제_부산시 +
            --             위반_미납 + 면제심사_미납 + 위반_연속통행_미납 + 위반_완납_현금 + 위반_완납_계좌 +
            --             위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 차로수납_ETC 호환(선불)카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --             위반_정상_선불 + 위반_연속통행_정상_선불 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_후불전자카드 +
            --             위반_정상_후불 + 위반_연속통행_정상_후불 + 사전등록 + 연속통행_사전등록
            (
                SELECT
                    NVL(SUM(
                                LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_TOTAL_FARE,

            -- 유료통행료(20개컬럼 - 유료 + 기타차량세부내역(완납 + 미납 + 기타(사무실수납)))
            -- 유료(12개 컬럼):      차로수납_ETC 호환(선불)카드 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --                     차로수납_ETC_할인_연속통행_후불전자카드 + 사전등록 + 위반_정상_선불 + 위반_정상_후불 + 연속통행_사전등록 +
            --                     위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 +
            -- 기타차량세부내역(8개컬럼): 위반_완납_현금 + 위반_완납_계좌 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_미납 +
            --                       면제심사_미납 + 위반_연속통행_미납 + 위반_부적격
            (
                SELECT
                    NVL(SUM(
                                LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD + VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH +
                                VLTN_DC_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_PREMIUM_FARE,

            -- 장애인 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_05), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_05_FARE,

            -- 유공자 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_04), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_04_FARE,

            -- 공차택시 통행료
            (
                SELECT
                    NVL(SUM(EMPTY_TAXI_FARE), 0)
                FROM PROC_DAYFININFO_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
            ) AS MONTH_EXMT_DETAIL_EMPTY_TAXI_FARE,

            -- 두리발 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_14), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_14_FARE,

            -- 다자녀 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_03), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_03_FARE,

            -- 친환경 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_06), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_06_FARE,

            -- 기타 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_ETC), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE LIKE #{WORK_DATE} || '%'
                  AND SUM_DIV = '1'
            ) AS MONTH_EXMT_DETAIL_ETC_FARE,

            -- 면제합계 통행료
            (
                SELECT
                    (SELECT NVL(SUM(EXMT_DETAIL_05), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_04), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_14), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_03), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_06), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_ETC), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%' AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EMPTY_TAXI_FARE), 0) FROM PROC_DAYFININFO_AFTER WHERE WORK_DATE LIKE #{WORK_DATE} || '%')
                FROM DUAL
            ) AS MONTH_EXMT_DETAIL_FARE_TOTAL,


            -- [누계 통행량]
            -- 총(24개 컬럼): 차로면제_ETC_면제OBU + 차로면제_ETC_면제카드 + 위반_면제 + 차로면제_ETC_부산시 + 위반_면제_부산시 +
            --             위반_미납 + 면제심사_미납 + 위반_연속통행_미납 + 위반_완납_현금 + 위반_완납_계좌 +
            --             위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 차로수납_ETC 호환(선불)카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --             위반_정상_선불 + 위반_연속통행_정상_선불 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_후불전자카드 +
            --             위반_정상_후불 + 위반_연속통행_정상_후불 + 사전등록 + 연속통행_사전등록
            (
                SELECT
                    NVL(SUM(
                                LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_TOTAL_CNT,

            -- 유료통행량(20개컬럼 - 유료 + 기타차량세부내역(완납 + 미납 + 기타(사무실수납)))
            -- 유료(12개 컬럼):      차로수납_ETC 호환(선불)카드 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --                     차로수납_ETC_할인_연속통행_후불전자카드 + 사전등록 + 위반_정상_선불 + 위반_정상_후불 + 연속통행_사전등록 +
            --                     위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 +
            -- 기타차량세부내역(8개컬럼): 위반_완납_현금 + 위반_완납_계좌 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_미납 +
            --                       면제심사_미납 + 위반_연속통행_미납 + 위반_부적격
            (
                SELECT
                    NVL(SUM(
                                LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD + VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH +
                                VLTN_DC_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_PREMIUM_CNT,

            -- 장애인 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_05), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_05_CNT,

            -- 유공자 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_04), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_04_CNT,

            -- 공차택시 통행량
            (
                SELECT
                    NVL(SUM(EMPTY_TAXI_CNT), 0)
                FROM PROC_DAYFININFO_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
            ) AS CUMULATIVE_EXMT_DETAIL_EMPTY_TAXI_CNT,

            -- 두리발 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_14), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_14_CNT,

            -- 다자녀 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_03), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_03_CNT,

            -- 친환경 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_06), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_06_CNT,

            -- 기타 통행량
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_ETC), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '0'
            ) AS CUMULATIVE_EXMT_DETAIL_ETC_CNT,

            -- 면제합계 통행량
            (
                SELECT
                    (SELECT NVL(SUM(EXMT_DETAIL_05), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_04), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_14), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_03), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_06), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EXMT_DETAIL_ETC), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '0') +
                    (SELECT NVL(SUM(EMPTY_TAXI_CNT), 0) FROM PROC_DAYFININFO_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD'))
                FROM DUAL
            ) AS CUMULATIVE_EXMT_DETAIL_CNT_TOTAL,


            -- [누계 통행료]
            -- 총(24개 컬럼): 차로면제_ETC_면제OBU + 차로면제_ETC_면제카드 + 위반_면제 + 차로면제_ETC_부산시 + 위반_면제_부산시 +
            --             위반_미납 + 면제심사_미납 + 위반_연속통행_미납 + 위반_완납_현금 + 위반_완납_계좌 +
            --             위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 차로수납_ETC 호환(선불)카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --             위반_정상_선불 + 위반_연속통행_정상_선불 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_후불전자카드 +
            --             위반_정상_후불 + 위반_연속통행_정상_후불 + 사전등록 + 연속통행_사전등록
            (
                SELECT
                    NVL(SUM(
                                LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_EPCARD + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + VLTN_EXMT_ELCARD_BUSAN +
                                VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_PAY_CASH + VLTN_PAY_ACNT +
                                VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC +
                                VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD + VLTN_PRE_REG + VLTN_DC_PRE_REG
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_TOTAL_FARE,

            -- 유료통행료(20개컬럼 - 유료 + 기타차량세부내역(완납 + 미납 + 기타(사무실수납)))
            -- 유료(12개 컬럼):      차로수납_ETC 호환(선불)카드 + 차로수납_ETC 후불전자카드 + 차로수납_ETC_할인_출퇴근_호환(선불)카드 + 차로수납_ETC_할인_출퇴근_후불전자카드 + 차로수납_ETC_할인_연속통행_호환(선불)카드 +
            --                     차로수납_ETC_할인_연속통행_후불전자카드 + 사전등록 + 위반_정상_선불 + 위반_정상_후불 + 연속통행_사전등록 +
            --                     위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 +
            -- 기타차량세부내역(8개컬럼): 위반_완납_현금 + 위반_완납_계좌 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_미납 +
            --                       면제심사_미납 + 위반_연속통행_미납 + 위반_부적격
            (
                SELECT
                    NVL(SUM(
                                LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD + VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH +
                                VLTN_DC_PAY_ACNT + VLTN_UNP + EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                        ), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_PREMIUM_FARE,

            -- 장애인 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_05), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_05_FARE,

            -- 유공자 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_04), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_04_FARE,

            -- 공차택시 통행료
            (
                SELECT
                    NVL(SUM(EMPTY_TAXI_FARE), 0)
                FROM PROC_DAYFININFO_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
            ) AS CUMULATIVE_EXMT_DETAIL_EMPTY_TAXI_FARE,

            -- 두리발 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_14), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_14_FARE,

            -- 다자녀 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_03), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_03_FARE,

            -- 친환경 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_06), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_06_FARE,

            -- 기타 통행료
            (
                SELECT
                    NVL(SUM(EXMT_DETAIL_ETC), 0)
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
                  AND SUM_DIV = '1'
            ) AS CUMULATIVE_EXMT_DETAIL_ETC_FARE,

            -- 면제합계 통행료
            (
                SELECT
                    (SELECT NVL(SUM(EXMT_DETAIL_05), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_04), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_14), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_03), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_06), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EXMT_DETAIL_ETC), 0) FROM PROC_DAYFINPAYTOT_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD') AND SUM_DIV = '1') +
                    (SELECT NVL(SUM(EMPTY_TAXI_FARE), 0) FROM PROC_DAYFININFO_AFTER WHERE WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD'))
                FROM DUAL
            ) AS CUMULATIVE_EXMT_DETAIL_FARE_TOTAL
        FROM DUAL
    </select>

    <select id="selectMonthTollFeeReporHiPassUse" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReporHiPassUse 월보 하이패스 이용 현황 8페이지 */
        SELECT
            TO_CHAR(TO_DATE('202409', 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE('202409', 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,


            -- 당월 유료통행량
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) AS CURRENT_MONTH_PREMIUM_CNT,

            -- 당월 전자지불(전체) 통행량
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ECARD_CNT END) AS CURRENT_MONTH_ECARD_CNT,
            -- 당월 전자지불(전체) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ECARD_CNT END) / MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CURRENT_MONTH_ECARD_USAGE_RATE,

            -- 당월 하이패스(선불) 통행량
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EPCARD_CNT END) AS CURRENT_MONTH_EPCARD_CNT,
            -- 당월 하이패스(선불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EPCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CURRENT_MONTH_EPCARD_USAGE_RATE,

            -- 당월 하이패스(후불) 통행량
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ELCARD_CNT END) AS CURRENT_MONTH_ELCARD_CNT,
            -- 당월 하이패스(후불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ELCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CURRENT_MONTH_ELCARD_USAGE_RATE,

            -- 당월 사전등록 통행량
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN VLTN_PRE_REG_CNT END) AS CURRENT_MONTH_VLTN_PRE_REG_CNT,
            -- 당월 사전등록 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN VLTN_PRE_REG_CNT END) / MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CURRENT_MONTH_VLTN_PRE_REG_USAGE_RATE,


            -- 전년동기 유료통행량
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) AS PREVIOUS_YEAR_PREMIUM_CNT,

            -- 전년동기 전자지불(전체) 통행량
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END) AS PREVIOUS_YEAR_ECARD_CNT,
            -- 전년동기 전자지불(전체) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END) / MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS PREVIOUS_YEAR_ECARD_USAGE_RATE,

            -- 전년동기 하이패스(선불) 통행량
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END) AS PREVIOUS_YEAR_EPCARD_CNT,
            -- 전년동기 하이패스(선불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END) / MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS PREVIOUS_YEAR_EPCARD_USAGE_RATE,

            -- 전년동기 하이패스(후불) 통행량
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END) AS PREVIOUS_YEAR_ELCARD_CNT,
            -- 전년동기 하이패스(후불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END) / MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS PREVIOUS_YEAR_ELCARD_USAGE_RATE,

            -- 전년동기 사전등록 통행량
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) AS PREVIOUS_YEAR_VLTN_PRE_REG_CNT,
            -- 전년동기 사전등록 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) / MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS PREVIOUS_YEAR_VLTN_PRE_REG_USAGE_RATE,


            -- 당월 유료통행량 대비 대수
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) AS CURRENT_MONTH_PREVIOUS_YEAR_PREMIUM_CNT_MINUS,
            -- 당월 유료통행량 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN PREMIUM_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN PREMIUM_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CURRENT_MONTH_PREVIOUS_YEAR_PREMIUM_PERCENT,

            -- 당월 전자지불(전체) 대비 대수
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ECARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END) AS CURRENT_MONTH_PREVIOUS_YEAR_ECARD_CNT_MINUS,
            -- 당월 전자지불(전체) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ECARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ECARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CURRENT_MONTH_PREVIOUS_YEAR_ECARD_PERCENT,

            -- 당월 하이패스(선불) 대비 대수
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EPCARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END) AS CURRENT_MONTH_PREVIOUS_YEAR_EPCARD_CNT_MINUS,
            -- 당월 하이패스(선불) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EPCARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EPCARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CURRENT_MONTH_PREVIOUS_YEAR_EPCARD_PERCENT,

            -- 당월 하이패스(후불) 대비 대수
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ELCARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END) AS CURRENT_MONTH_PREVIOUS_YEAR_ELCARD_CNT_MINUS,
            -- 당월 하이패스(후불) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN ELCARD_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN ELCARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CURRENT_MONTH_PREVIOUS_YEAR_ELCARD_PERCENT,

            -- 당월 사전등록 대비 대수
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN VLTN_PRE_REG_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) AS CURRENT_MONTH_PREVIOUS_YEAR_VLTN_PRE_REG_CNT_MINUS,
            -- 당월 사전등록 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN VLTN_PRE_REG_CNT END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN VLTN_PRE_REG_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CURRENT_MONTH_PREVIOUS_YEAR_VLTN_PRE_REG_PERCENT,


            -- 당해 누계 유료통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) AS CUMULATIVE_CURRENT_PREMIUM_CNT,

            -- 당해 누계 전자지불(전체) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ECARD_CNT END) AS CUMULATIVE_CURRENT_ECARD_CNT,
            -- 당해 누계 전자지불(전체) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ECARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_CURRENT_ECARD_USAGE_RATE,

            -- 당해 누계 하이패스(선불) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EPCARD_CNT END) AS CUMULATIVE_CURRENT_EPCARD_CNT,
            -- 당해 누계 하이패스(선불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EPCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_CURRENT_EPCARD_USAGE_RATE,

            -- 당해 누계 하이패스(후불) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ELCARD_CNT END) AS CUMULATIVE_CURRENT_ELCARD_CNT,
            -- 당해 누계 하이패스(후불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ELCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_CURRENT_ELCARD_USAGE_RATE,

            -- 당해 누계 사전등록 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN VLTN_PRE_REG_CNT END) AS CUMULATIVE_CURRENT_VLTN_PRE_REG_CNT,
            -- 당해 누계 사전등록 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN VLTN_PRE_REG_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_CURRENT_VLTN_PRE_REG_USAGE_RATE,


            -- 전년 누계 유료통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) AS CUMULATIVE_PREVIOUS_PREMIUM_CNT,

            -- 전년 누계 전자지불(전체) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END) AS CUMULATIVE_PREVIOUS_ECARD_CNT,
            -- 전년 전자지불(전체) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_PREVIOUS_ECARD_USAGE_RATE,

            -- 전년 누계 하이패스(선불) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END) AS CUMULATIVE_PREVIOUS_EPCARD_CNT,
            -- 전년 누계 하이패스(선불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_PREVIOUS_EPCARD_USAGE_RATE,

            -- 전년 누계 하이패스(후불) 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END) AS CUMULATIVE_PREVIOUS_ELCARD_CNT,
            -- 전년 누계 하이패스(후불) 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_PREVIOUS_ELCARD_USAGE_RATE,

            -- 전년 누계 사전등록 통행량
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) AS CUMULATIVE_PREVIOUS_VLTN_PRE_REG_CNT,
            -- 전년 누계 사전등록 이용률
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(ROUND(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) / MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) * 100, 2), 'FM99999990.00') || '%'
                END AS CUMULATIVE_PREVIOUS_VLTN_PRE_REG_USAGE_RATE,


            -- 누계 유료통행량 대비 대수
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_PREMIUM_CNT_MINUS,
            -- 누계 유료통행량 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN PREMIUM_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN PREMIUM_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_PREMIUM_PERCENT,

            -- 누계 전자지불(전체) 대비 대수
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ECARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END) AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_ECARD_CNT_MINUS,
            -- 누계 전자지불(전체) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ECARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ECARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_ECARD_PERCENT,

            -- 누계 하이패스(선불) 대비 대수
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EPCARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END) AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_EPCARD_CNT_MINUS,
            -- 누계 하이패스(선불) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EPCARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EPCARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_EPCARD_PERCENT,

            -- 누계 하이패스(후불) 대비 대수
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ELCARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END) AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_ELCARD_CNT_MINUS,
            -- 누계 하이패스(후불) 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN ELCARD_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN ELCARD_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_ELCARD_PERCENT,

            -- 누계 사전등록 대비 대수
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN VLTN_PRE_REG_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_VLTN_PRE_REG_CNT_MINUS,
            -- 누계 사전등록 대비 %
            CASE
                WHEN MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) = 0 THEN '0.00%'
                ELSE TO_CHAR(
                             ROUND(
                                     (MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN VLTN_PRE_REG_CNT END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END)) /
                                     MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN VLTN_PRE_REG_CNT END) * 100,
                                     2
                             ),
                             'FM99999990.00'
                     ) || '%'
                END AS CUMULATIVE_CURRENT_CUMULATIVE_PREVIOUS_VLTN_PRE_REG_PERCENT

        FROM (
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     -- 유료통행량
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_UNP +
                                 EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                         ), 0) AS PREMIUM_CNT,

                     -- 전자지불(전체)
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS ECARD_CNT,

                     -- 하이패스(선불)
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD
                         ), 0) AS EPCARD_CNT,

                     -- 하이패스(후불)
                     NVL(SUM(
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS ELCARD_CNT,

                     -- 사전등록
                     NVL(SUM(
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS VLTN_PRE_REG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_UNP +
                                 EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                         ), 0) AS PREMIUM_CNT,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS ECARD_CNT,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD
                         ), 0) AS EPCARD_CNT,
                     NVL(SUM(
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS ELCARD_CNT,
                     NVL(SUM(
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS VLTN_PRE_REG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND SUM_DIV = '0'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_UNP +
                                 EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                         ), 0) AS PREMIUM_CNT,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS ECARD_CNT,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD
                         ), 0) AS EPCARD_CNT,
                     NVL(SUM(
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS ELCARD_CNT,
                     NVL(SUM(
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS VLTN_PRE_REG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC +
                                 LANE_PAY_CNTDC_ELCARD_ETC + VLTN_PRE_REG + VLTN_NOML_EPCARD + VLTN_NOML_ELCARD + VLTN_DC_PRE_REG +
                                 VLTN_DC_NOML_EPCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT + VLTN_UNP +
                                 EXMT_UNP + VLTN_DC_UNP + VLTN_UNFT
                         ), 0) AS PREMIUM_CNT,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS ECARD_CNT2,
                     NVL(SUM(
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD
                         ), 0) AS EPCARD_CNT,
                     NVL(SUM(
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD
                         ), 0) AS ELCARD_CNT,
                     NVL(SUM(
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS VLTN_PRE_REG_CNT
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND SUM_DIV = '0'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTollAll" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTollAll 월보 통행료(전체) 9페이지 */
        SELECT
            -- 당월-일평균 구하기 위한 일자
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG_DAY_COUNT' THEN DAYS_PASSED END) AS CURRENT_DAYS_PASSED,

            -- 누계-일평균 구하기 위한 일자
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG_DAY_COUNT' THEN DAYS_PASSED END) AS CUMULATIVE_DAYS_PASSED,

            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_FARE END) AS TOLL_ALL_CUR_MONTH_AVG_FARE,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_FARE END) AS TOLL_ALL_CUMULATIVE_AVG_FARE,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) AS TOLL_ALL_CUR_MONTH_TOTAL_FARE,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_ALL_CUR_MONTH_LARGE_CAR_FARE,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_ALL_CUR_MONTH_MEDIUM_CAR_FARE,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_ALL_CUR_MONTH_SMALL_CAR_FARE,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_ALL_CUR_MONTH_COMPACT_CAR_FARE,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END) AS TOLL_ALL_PRE_MONTH_TOTAL_FARE,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_ALL_PRE_MONTH_LARGE_CAR_FARE,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_ALL_PRE_MONTH_MEDIUM_CAR_FARE,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_ALL_PRE_MONTH_SMALL_CAR_FARE,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_ALL_PRE_MONTH_COMPACT_CAR_FARE,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END) AS TOLL_ALL_PRE_YEAR_TOTAL_FARE,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END) AS TOLL_ALL_PRE_YEAR_LARGE_CAR_FARE,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END) AS TOLL_ALL_PRE_YEAR_MEDIUM_CAR_FARE,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END) AS TOLL_ALL_PRE_YEAR_SMALL_CAR_FARE,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END) AS TOLL_ALL_PRE_YEAR_COMPACT_CAR_FARE,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_TOTAL_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_COMPACT_CAR_FARE_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_TOTAL_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_COMPACT_CAR_FARE_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,

            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) AS TOLL_ALL_CUMULATIVE_CURRENT_TOTAL_FARE,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_CURRENT_LARGE_CAR_FARE,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_CURRENT_MEDIUM_CAR_FARE,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_CURRENT_SMALL_CAR_FARE,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_CURRENT_COMPACT_CAR_FARE,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END) AS TOLL_ALL_CUMULATIVE_PREVIOUS_TOTAL_FARE,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_PREVIOUS_LARGE_CAR_FARE,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_PREVIOUS_MEDIUM_CAR_FARE,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_PREVIOUS_SMALL_CAR_FARE,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END) AS TOLL_ALL_CUMULATIVE_PREVIOUS_COMPACT_CAR_FARE,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_TOTAL_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_LARGE_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_SMALL_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_COMPACT_CAR_FARE_CHANGE_RATE

        FROM (
                 -- 통행료(전체)(29개 컬럼) -> 유료통행량으로 변경

                 SELECT
                     'CURRENT_MONTH' AS PERIOD,

                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE,

                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,

                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE,

                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,

                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE,

                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,

                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE,

                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,

                     NVL(SUM(
                                 VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                 LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                 LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                 VLTN_PRE_REG + VLTN_DC_PRE_REG
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN
                                          VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                          LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                          LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                          VLTN_PRE_REG + VLTN_DC_PRE_REG
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE,

                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(원) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(
                                           VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                           LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                           LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                           VLTN_PRE_REG + VLTN_DC_PRE_REG
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_FARE,
                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (원) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(
                                           VLTN_PAY_CASH + VLTN_PAY_ACNT + VLTN_DC_PAY_CASH + VLTN_DC_PAY_ACNT +
                                           LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD +
                                           LANE_PAY_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_CNTDC_ELCARD_ETC + VLTN_NOML_ELCARD + VLTN_DC_NOML_ELCARD +
                                           VLTN_PRE_REG + VLTN_DC_PRE_REG
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_FARE,
                     SUBSTR(MAX(WORK_DATE), 7, 8) AS DAYS_PASSED
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                   -- 당월 일일평균(원) 일수, SUM은 오즈리포트 디자이너에서 수행
                 SELECT
                    'CURRENT_AVG_DAY_COUNT' AS PERIOD,
                    0 AS TOTAL_FARE,
                    0 AS LARGE_CAR_FARE,
                    0 AS MEDIUM_CAR_FARE,
                    0 AS SMALL_CAR_FARE,
                    0 AS COMPACT_CAR_FARE,
                    0 AS AVG_FARE,
                    NVL(SUBSTR(MAX(WORK_DATE), 7, 8), 0) AS DAYS_PASSED
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = '094'
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균(원) 일수, SUM은 오즈리포트 디자이너에서 수행
                 SELECT
                     'CUMULATIVE_AVG_DAY_COUNT' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     0 AS AVG_FARE,
                     TO_CHAR(TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(TO_CHAR(TRUNC(TO_DATE(MAX(WORK_DATE), 'YYYYMMDD'), 'YEAR'), 'YYYYMMDD'), 'YYYYMMDD') + 1) AS DAYS_PASSED
                FROM PROC_DAYFINPAYTOT_AFTER
                WHERE 1 = 1
                   AND IC_CODE = '094'
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTollAllExIn" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTollAllExIn 월보 통행료(전체)-기타(수입) 9페이지 */
        SELECT
            -- 당월
            NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END), 0) AS TOLL_ALL_CUR_MONTH_EXTRA_INCOME,

            -- 전월
            NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) AS TOLL_ALL_PRE_MONTH_EXTRA_INCOME,

            -- 전년동기
            NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) AS TOLL_ALL_PRE_YEAR_EXTRA_INCOME,

            -- 전월대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_MONTH_EXTRA_INCOME_CHANGE_RATE,

            -- 전년동기대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END),0)) / NULLIF(SUM(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_PRE_YEAR_EXTRA_INCOME_CHANGE_RATE,

            -- 당해 누계
            NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END), 0) AS TOLL_ALL_CUMULATIVE_CURRENT_EXTRA_INCOME,

            -- 전년 누계
            NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) AS TOLL_ALL_CUMULATIVE_PREVIOUS_EXTRA_INCOME,

            -- 누계 전년동기대비 증감률
            CASE
                WHEN NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0)) / NULLIF(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN EXTRA_INCOME END),0) - NVL(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0)) / NULLIF(SUM(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN EXTRA_INCOME END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_ALL_CUMULATIVE_EXTRA_INCOME_CHANGE_RATE

        FROM (
                 -- 기타수입금액: 사무실_수입_금액 - 사무실_환불_금액

                 SELECT
                     'CURRENT_MONTH' AS PERIOD,
                     (OFC_PAY_FARE + ( - OFC_RFND_FARE)) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,
                     (OFC_PAY_FARE + ( - OFC_RFND_FARE)) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,
                     (OFC_PAY_FARE + ( - OFC_RFND_FARE)) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,
                     (OFC_PAY_FARE + ( - OFC_RFND_FARE)) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,
                     (OFC_PAY_FARE + ( - OFC_RFND_FARE)) AS EXTRA_INCOME
                 FROM PROC_DAYFININFO_AFTER
                 WHERE 1 = 1
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTollContinuous" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTollContinuous 월보 통행료(연속통행 할인 금액) 10페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_AVG_FARE,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_AVG_FARE,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_TOTAL_FARE,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_LARGE_CAR_FARE,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_MEDIUM_CAR_FARE,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_SMALL_CAR_FARE,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_CONTINUOUS_CUR_MONTH_COMPACT_CAR_FARE,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END) AS TOLL_CONTINUOUS_PRE_MONTH_TOTAL_FARE,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_MONTH_LARGE_CAR_FARE,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_MONTH_MEDIUM_CAR_FARE,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_MONTH_SMALL_CAR_FARE,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_MONTH_COMPACT_CAR_FARE,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END) AS TOLL_CONTINUOUS_PRE_YEAR_TOTAL_FARE,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_YEAR_LARGE_CAR_FARE,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_YEAR_MEDIUM_CAR_FARE,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_YEAR_SMALL_CAR_FARE,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END) AS TOLL_CONTINUOUS_PRE_YEAR_COMPACT_CAR_FARE,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_MONTH_TOTAL_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_MONTH_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_MONTH_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_MONTH_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_MONTH_COMPACT_CAR_FARE_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_YEAR_TOTAL_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_YEAR_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_YEAR_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_YEAR_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_PRE_YEAR_COMPACT_CAR_FARE_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,

            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_CURRENT_TOTAL_FARE,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_CURRENT_LARGE_CAR_FARE,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_CURRENT_MEDIUM_CAR_FARE,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_CURRENT_SMALL_CAR_FARE,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_CURRENT_COMPACT_CAR_FARE,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_PREVIOUS_TOTAL_FARE,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_PREVIOUS_LARGE_CAR_FARE,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_PREVIOUS_MEDIUM_CAR_FARE,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_PREVIOUS_SMALL_CAR_FARE,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END) AS TOLL_CONTINUOUS_CUMULATIVE_PREVIOUS_COMPACT_CAR_FARE,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_CUMULATIVE_TOTAL_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_CUMULATIVE_LARGE_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_CUMULATIVE_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_CUMULATIVE_SMALL_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_CONTINUOUS_CUMULATIVE_COMPACT_CAR_FARE_CHANGE_RATE

        FROM (
                 -- 통행료(연속통행 할인 금액)(8개 컬럼): 차로수납_ETC_할인_연속통행_호환(선불)카드 + 차로수납_ETC_할인_연속통행_후불전자카드 + 위반_연속통행_정상_선불 + 위반_연속통행_정상_후불 + 위반_연속통행_완납_현금 + 위반_연속통행_완납_계좌 + 위반_연속통행_미납 + 연속통행_사전등록

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,

                     NVL(SUM(
                                 SUM_CNTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,

                     NVL(SUM(SUM_CNTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,

                     NVL(SUM(SUM_CNTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,

                     NVL(SUM(SUM_CNTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,

                     NVL(SUM(SUM_CNTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 2
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 1
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                                 CASE WHEN DFT_CAR_TYPE  = 6
                                          THEN SUM_CNTDC
                                      ELSE 0
                                     END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(원) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(SUM_CNTDC
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_FARE
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (원) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(SUM_CNTDC
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_FARE
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>

    <select id="selectMonthTollFeeReportTollCommute" parameterType="hashMap" resultType="hashMap">
        /* Mapper ID: selectMonthTollFeeReportTollCommute 월보 통행료(출퇴근 할인 금액) 11페이지 */
        SELECT
            -- 당월 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CURRENT_AVG' THEN AVG_FARE END) AS TOLL_COMMUTE_CUR_MONTH_AVG_FARE,
            -- 누계 일일 평균(대)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_AVG' THEN AVG_FARE END) AS TOLL_COMMUTE_CUMULATIVE_AVG_FARE,

            -- 당월 (계)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) AS TOLL_COMMUTE_CUR_MONTH_TOTAL_FARE,
            -- 당월 (대형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_COMMUTE_CUR_MONTH_LARGE_CAR_FARE,
            -- 당월 (중형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_COMMUTE_CUR_MONTH_MEDIUM_CAR_FARE,
            -- 당월 (소형차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_COMMUTE_CUR_MONTH_SMALL_CAR_FARE,
            -- 당월 (경차)
            MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_COMMUTE_CUR_MONTH_COMPACT_CAR_FARE,

            -- 전월 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END) AS TOLL_COMMUTE_PRE_MONTH_TOTAL_FARE,
            -- 전월 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END) AS TOLL_COMMUTE_PRE_MONTH_LARGE_CAR_FARE,
            -- 전월 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END) AS TOLL_COMMUTE_PRE_MONTH_MEDIUM_CAR_FARE,
            -- 전월 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END) AS TOLL_COMMUTE_PRE_MONTH_SMALL_CAR_FARE,
            -- 전월 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END) AS TOLL_COMMUTE_PRE_MONTH_COMPACT_CAR_FARE,

            -- 전년동기 (계)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END) AS TOLL_COMMUTE_PRE_YEAR_TOTAL_FARE,
            -- 전년동기 (대형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END) AS TOLL_COMMUTE_PRE_YEAR_LARGE_CAR_FARE,
            -- 전년동기 (중형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END) AS TOLL_COMMUTE_PRE_YEAR_MEDIUM_CAR_FARE,
            -- 전년동기 (소형차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END) AS TOLL_COMMUTE_PRE_YEAR_SMALL_CAR_FARE,
            -- 전년동기 (경차)
            MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END) AS TOLL_COMMUTE_PRE_YEAR_COMPACT_CAR_FARE,


            -- 전월대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_MONTH_TOTAL_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_MONTH_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_MONTH_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_MONTH_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전월대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_MONTH' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_MONTH_COMPACT_CAR_FARE_CHANGE_RATE,


            -- 전년동기대비 증감률 (계)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN TOTAL_FARE END), 0) * 100, 2 ), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_YEAR_TOTAL_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_YEAR_LARGE_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_YEAR_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END))/ NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_YEAR_SMALL_CAR_FARE_CHANGE_RATE,

            -- 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CURRENT_MONTH' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'PREVIOUS_YEAR' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_PRE_YEAR_COMPACT_CAR_FARE_CHANGE_RATE,


            TO_CHAR(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YYYY-MM') AS CUR_MONTH,
            TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYY-MM') AS PRE_YEAR_MONTH,

            -- 당해 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) AS TOLL_COMMUTE_CUMULATIVE_CURRENT_TOTAL_FARE,
            -- 당해 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_CURRENT_LARGE_CAR_FARE,
            -- 당해 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_CURRENT_MEDIUM_CAR_FARE,
            -- 당해 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_CURRENT_SMALL_CAR_FARE,
            -- 당해 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_CURRENT_COMPACT_CAR_FARE,

            -- 전년 누계 (계)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END) AS TOLL_COMMUTE_CUMULATIVE_PREVIOUS_TOTAL_FARE,
            -- 전년 누계 (대형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_PREVIOUS_LARGE_CAR_FARE,
            -- 전년 누계 (중형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_PREVIOUS_MEDIUM_CAR_FARE,
            -- 전년 누계 (소형차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_PREVIOUS_SMALL_CAR_FARE,
            -- 전년 누계 (경차)
            MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END) AS TOLL_COMMUTE_CUMULATIVE_PREVIOUS_COMPACT_CAR_FARE,

            -- 누계 전년동기대비 증감률 (전체)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN TOTAL_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN TOTAL_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_CUMULATIVE_TOTAL_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (대형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN LARGE_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN LARGE_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_CUMULATIVE_LARGE_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (중형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN MEDIUM_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN MEDIUM_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_CUMULATIVE_MEDIUM_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (소형차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN SMALL_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN SMALL_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_CUMULATIVE_SMALL_CAR_FARE_CHANGE_RATE,

            -- 누계 전년동기대비 증감률 (경차)
            CASE
                WHEN NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0) = 0 THEN '0.00%'
                ELSE TO_CHAR(NVL(ROUND((MAX(CASE WHEN PERIOD = 'CUMULATIVE_CURRENT' THEN COMPACT_CAR_FARE END) - MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END)) / NULLIF(MAX(CASE WHEN PERIOD = 'CUMULATIVE_PREVIOUS' THEN COMPACT_CAR_FARE END), 0) * 100, 2), 0), 'FM99999990.00') || '%'
                END AS TOLL_COMMUTE_CUMULATIVE_COMPACT_CAR_FARE_CHANGE_RATE

        FROM (
                 -- 통행료(출퇴근 할인 금액)(1개 컬럼): 출퇴근할인_할인금액(SUM_CMTDC)

                 -- 당월 조회조건
                 SELECT
                     'CURRENT_MONTH' AS PERIOD,

                     NVL(SUM(
                            SUM_CMTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 2
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 1
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 6
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 전월 조회조건
                 SELECT
                     'PREVIOUS_MONTH' AS PERIOD,

                     NVL(SUM(
                                 SUM_CMTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 2
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 1
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 6
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -1), 'YYYYMM') || '%'

                 UNION ALL

                 -- 전년동기 조회조건
                 SELECT
                     'PREVIOUS_YEAR' AS PERIOD,

                     NVL(SUM(
                                 SUM_CMTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 2
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 1
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 6
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMM'), -12), 'YYYYMM') || '%'

                 UNION ALL

                 -- 당해 누계 조회조건
                 SELECT
                     'CUMULATIVE_CURRENT' AS PERIOD,

                     NVL(SUM(
                                 SUM_CMTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE IN (3, 4, 5)
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 2
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 1
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 6
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')

                 UNION ALL

                 -- 전년 누계 조회조건
                 SELECT
                     'CUMULATIVE_PREVIOUS' AS PERIOD,

                     NVL(SUM(
                                 SUM_CMTDC
                         ), 0) AS TOTAL_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  IN (3, 4, 5)
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS LARGE_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 2
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS MEDIUM_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 1
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS SMALL_CAR_FARE,

                     NVL(SUM(
                            CASE WHEN DFT_CAR_TYPE  = 6
                                THEN SUM_CMTDC
                                ELSE 0
                            END), 0) AS COMPACT_CAR_FARE,

                     0 AS AVG_FARE

                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), -12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), -12), 'YYYYMMDD')

                 UNION ALL

                 -- 당월 일일평균(원) 조회조건
                 SELECT
                     'CURRENT_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(
                                        SUM_CMTDC
                                   ), 0) / SUBSTR(MAX(WORK_DATE), 7, 8), 0), 0) AS AVG_FARE
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE LIKE #{WORK_DATE} || '%'

                 UNION ALL

                 -- 누계 일일평균 (원) 조회조건
                 SELECT
                     'CUMULATIVE_AVG' AS PERIOD,
                     0 AS TOTAL_FARE,
                     0 AS LARGE_CAR_FARE,
                     0 AS MEDIUM_CAR_FARE,
                     0 AS SMALL_CAR_FARE,
                     0 AS COMPACT_CAR_FARE,
                     NVL(ROUND(NVL(SUM(
                                        SUM_CMTDC
                                   ), 0)  / (TO_DATE(MAX(WORK_DATE), 'YYYYMMDD') - TO_DATE(SUBSTR(MAX(WORK_DATE), 1, 4) || '0101', 'YYYYMMDD') + 1), 0), 0) AS AVG_FARE
                 FROM PROC_DAYFINPAYTOT_AFTER
                 WHERE 1 = 1
                   AND IC_CODE = #{IC_CODE}
                   AND SUM_DIV = '1'
                   AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMM'), 'YEAR'), 'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE(#{WORK_DATE}, 'YYYYMM')), 'YYYYMMDD')
             )
    </select>
    <!-- 월보끝 -->

   	<!-- 통행료 징수관련 동향 - 전체 통행량 증감상황 -->
	<select id="selectDailyTollTrendsDailyAvgContrast" resultType="hashmap">
	/* Mapper ID: selectDailyTollTrendsDailyAvgContrast */
		SELECT IC_CODE
			, TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), -12), 'YYYY') AS PRE_YEAR
			, #{WORK_DATE} AS WORK_DATE
			, NVL(PER_DAY_TOT, 0) AS PER_DAY_TOT, NVL(PER_MONTH_TOT, 0) AS PER_MONTH_TOT, NVL(PRE_YEAR_TOT, 0) AS PRE_YEAR_TOT
			, NVL(PER_DAY_IC1, 0) AS PER_DAY_IC1, NVL(PER_MONTH_IC1, 0) AS PER_MONTH_IC1, NVL(PRE_YEAR_IC1, 0) AS PRE_YEAR_IC1
			, NVL(PER_DAY_IC2, 0) AS PER_DAY_IC2, NVL(PER_MONTH_IC2, 0) AS PER_MONTH_IC2, NVL(PRE_YEAR_IC2, 0) AS PRE_YEAR_IC2
			, NVL(PER_DAY_IC3, 0) AS PER_DAY_IC3, NVL(PER_MONTH_IC3, 0) AS PER_MONTH_IC3, NVL(PRE_YEAR_IC3, 0) AS PRE_YEAR_IC3
			, NVL(PER_DAY_IC4, 0) AS PER_DAY_IC4, NVL(PER_MONTH_IC4, 0) AS PER_MONTH_IC4, NVL(PRE_YEAR_IC4, 0) AS PRE_YEAR_IC4
			, NVL(PER_DAY_IC5, 0) AS PER_DAY_IC5, NVL(PER_MONTH_IC5, 0) AS PER_MONTH_IC5, NVL(PRE_YEAR_IC5, 0) AS PRE_YEAR_IC5
		FROM (
			SELECT IC_CODE
				, 'PRE_YEAR' AS DIV
				, ROUND(IC1_CNT / DAY_CNT) AS IC1
				, ROUND(IC2_CNT / DAY_CNT) AS IC2
				, ROUND(IC3_CNT / DAY_CNT) AS IC3
				, ROUND(IC4_CNT / DAY_CNT) AS IC4
				, ROUND(IC5_CNT / DAY_CNT) AS IC5
				, ROUND(IC1_CNT / DAY_CNT) 
				+ ROUND(IC2_CNT / DAY_CNT) 
				+ ROUND(IC3_CNT / DAY_CNT) 
				+ ROUND(IC4_CNT / DAY_CNT) 
				+ ROUND(IC5_CNT / DAY_CNT) 
				AS TOT
			FROM(
				SELECT IC_CODE, COUNT(WORK_DATE) AS DAY_CNT
					, SUM(IC1_CNT) AS IC1_CNT
					, SUM(IC2_CNT) AS IC2_CNT
					, SUM(IC3_CNT) AS IC3_CNT
					, SUM(IC4_CNT) AS IC4_CNT
					, SUM(IC5_CNT) AS IC5_CNT
				FROM
				(
					SELECT IC_CODE, WORK_DATE, IC_DIV
						-- 전자카드
						, NVL(LANE_PAY_EPCARD_ETC, 0) + NVL(LANE_PAY_ELCARD_ETC, 0)
						+ NVL(LANE_PAY_CMTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CMTDC_ELCARD_ETC, 0)
						+ NVL(LANE_PAY_CNTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CNTDC_ELCARD_ETC, 0)
						+ NVL(VLTN_NOML_EPCARD, 0) + NVL(VLTN_NOML_ELCARD, 0)
						+ NVL(VLTN_DC_NOML_EPCARD, 0) + NVL(VLTN_DC_NOML_ELCARD, 0)
						-- 사전등록
						+ NVL(VLTN_PRE_REG, 0) + NVL(VLTN_DC_PRE_REG, 0)
						-- 현금
						+ NVL(VLTN_PAY_CASH, 0) + NVL(VLTN_PAY_ACNT, 0) + NVL(VLTN_DC_PAY_CASH, 0) + NVL(VLTN_DC_PAY_ACNT, 0)
						-- 면제
						+ NVL(LANE_EXEM_OBU_ETC, 0) + NVL(LANE_EXEM_CARD_ETC, 0) + NVL(LANE_EXEM_BUSAN_ETC, 0)
						+ NVL(VLTN_EXMT, 0) + NVL(VLTN_EXMT_BUSAN, 0)
						-- 선불출금제외 + NVL(EXMT_EPCARD_PAY, 0) + NVL(EXMT_EPCARD_PAY_BUSAN, 0)
						-- 미납
						+ NVL(VLTN_UNP, 0) + NVL(EXMT_UNP, 0) + NVL(VLTN_DC_UNP, 0)
							AS CNT 
					FROM PROC_DAYFINPAYTOT TOT
					WHERE 1 = 1
					  AND IC_CODE = #{IC_CODE}
					  AND WORK_DATE LIKE TO_CHAR(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), -12), 'YYYY') || '____'
					  AND SUM_DIV = '0'
				) PIVOT (
					SUM(CNT) AS CNT FOR IC_DIV IN (1 AS IC1, 2 AS IC2, 3 AS IC3, 4 AS IC4, 5 AS IC5)
				)
				GROUP BY IC_CODE
			)
			UNION ALL
			SELECT IC_CODE
				, 'PER_MONTH'
				, ROUND(IC1_CNT / DAY_CNT) AS IC1
				, ROUND(IC2_CNT / DAY_CNT) AS IC2
				, ROUND(IC3_CNT / DAY_CNT) AS IC3
				, ROUND(IC4_CNT / DAY_CNT) AS IC4
				, ROUND(IC5_CNT / DAY_CNT) AS IC5
				, ROUND(IC1_CNT / DAY_CNT) 
				+ ROUND(IC2_CNT / DAY_CNT) 
				+ ROUND(IC3_CNT / DAY_CNT) 
				+ ROUND(IC4_CNT / DAY_CNT) 
				+ ROUND(IC5_CNT / DAY_CNT) 
				AS TOT
			FROM(
				SELECT IC_CODE, COUNT(WORK_DATE) AS DAY_CNT
					, SUM(IC1_CNT) AS IC1_CNT
					, SUM(IC2_CNT) AS IC2_CNT
					, SUM(IC3_CNT) AS IC3_CNT
					, SUM(IC4_CNT) AS IC4_CNT
					, SUM(IC5_CNT) AS IC5_CNT
				FROM
				(
					SELECT IC_CODE, WORK_DATE, IC_DIV
						-- 전자카드
						, NVL(LANE_PAY_EPCARD_ETC, 0) + NVL(LANE_PAY_ELCARD_ETC, 0)
						+ NVL(LANE_PAY_CMTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CMTDC_ELCARD_ETC, 0)
						+ NVL(LANE_PAY_CNTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CNTDC_ELCARD_ETC, 0)
						+ NVL(VLTN_NOML_EPCARD, 0) + NVL(VLTN_NOML_ELCARD, 0)
						+ NVL(VLTN_DC_NOML_EPCARD, 0) + NVL(VLTN_DC_NOML_ELCARD, 0)
						-- 사전등록
						+ NVL(VLTN_PRE_REG, 0) + NVL(VLTN_DC_PRE_REG, 0)
						-- 현금
						+ NVL(VLTN_PAY_CASH, 0) + NVL(VLTN_PAY_ACNT, 0) + NVL(VLTN_DC_PAY_CASH, 0) + NVL(VLTN_DC_PAY_ACNT, 0)
						-- 면제
						+ NVL(LANE_EXEM_OBU_ETC, 0) + NVL(LANE_EXEM_CARD_ETC, 0) + NVL(LANE_EXEM_BUSAN_ETC, 0)
						+ NVL(VLTN_EXMT, 0) + NVL(VLTN_EXMT_BUSAN, 0)
						-- 선불출금제외 + NVL(EXMT_EPCARD_PAY, 0) + NVL(EXMT_EPCARD_PAY_BUSAN, 0)
						-- 미납
						+ NVL(VLTN_UNP, 0) + NVL(EXMT_UNP, 0) + NVL(VLTN_DC_UNP, 0)
							AS CNT 
					FROM PROC_DAYFINPAYTOT TOT
					WHERE 1 = 1
					  AND IC_CODE = #{IC_CODE}

				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), 'MM'),'YYYYMMDD') AND #{WORK_DATE}
					  AND SUM_DIV = '0'
				) PIVOT (
					SUM(CNT) AS CNT FOR IC_DIV IN (1 AS IC1, 2 AS IC2, 3 AS IC3, 4 AS IC4, 5 AS IC5)
				)
				GROUP BY IC_CODE
			)
			UNION ALL	
			SELECT IC_CODE
				, 'PER_DAY'
				, IC1_CNT
				, IC2_CNT
				, IC3_CNT
				, IC4_CNT
				, IC5_CNT
				, IC1_CNT + IC2_CNT + IC3_CNT + IC4_CNT + IC5_CNT AS TOT
			FROM(
				SELECT IC_CODE, IC_DIV
					-- 전자카드
					, NVL(LANE_PAY_EPCARD_ETC, 0) + NVL(LANE_PAY_ELCARD_ETC, 0)
					+ NVL(LANE_PAY_CMTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CMTDC_ELCARD_ETC, 0)
					+ NVL(LANE_PAY_CNTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CNTDC_ELCARD_ETC, 0)
					+ NVL(VLTN_NOML_EPCARD, 0) + NVL(VLTN_NOML_ELCARD, 0)
					+ NVL(VLTN_DC_NOML_EPCARD, 0) + NVL(VLTN_DC_NOML_ELCARD, 0)
					-- 사전등록
					+ NVL(VLTN_PRE_REG, 0) + NVL(VLTN_DC_PRE_REG, 0)
					-- 현금
					+ NVL(VLTN_PAY_CASH, 0) + NVL(VLTN_PAY_ACNT, 0) + NVL(VLTN_DC_PAY_CASH, 0) + NVL(VLTN_DC_PAY_ACNT, 0)
					-- 면제
					+ NVL(LANE_EXEM_OBU_ETC, 0) + NVL(LANE_EXEM_CARD_ETC, 0) + NVL(LANE_EXEM_BUSAN_ETC, 0)
					+ NVL(VLTN_EXMT, 0) + NVL(VLTN_EXMT_BUSAN, 0)
					-- 선불출금제외 + NVL(EXMT_EPCARD_PAY, 0) + NVL(EXMT_EPCARD_PAY_BUSAN, 0)
					-- 미납
					+ NVL(VLTN_UNP, 0) + NVL(EXMT_UNP, 0) + NVL(VLTN_DC_UNP, 0)
						AS CNT 
				FROM PROC_DAYFINPAYTOT TOT
				WHERE 1 = 1
				  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE = #{WORK_DATE}
				  AND SUM_DIV = '0'
			) PIVOT (
				SUM(CNT) AS CNT FOR IC_DIV IN (1 AS IC1, 2 AS IC2, 3 AS IC3, 4 AS IC4, 5 AS IC5)
			)
		) PIVOT ( SUM(IC1) AS IC1
				, SUM(IC2) AS IC2
				, SUM(IC3) AS IC3
				, SUM(IC4) AS IC4
				, SUM(IC5) AS IC5
				, SUM(TOT) AS TOT
			FOR DIV IN ('PRE_YEAR' AS PRE_YEAR, 'PER_MONTH' AS PER_MONTH, 'PER_DAY' AS PER_DAY)
		) RES
	</select>
	
   	<!-- 통행료 징수관련 동향 - 유형별 통행량 -->
	<select id="selectDailyTollTrendsTollTraffic" resultType="hashmap">
	/* Mapper ID: selectDailyTollTrendsTollTraffic */
		SELECT DIV.IC_CODE, DIV.DATE_CODE AS DATE_DIV
			, ROW_NUMBER() OVER(ORDER BY DIV.IC_CODE, DIV.DATE_CODE) AS ROW_NUMBER 
			, SUM(NVL(ECARD_CNT, 0) + NVL(PREREG_CNT, 0) + NVL(CASH_CNT, 0) 
				+ NVL(EXEMPT_CNT, 0) + NVL(UNPAID_CNT, 0)) AS TOT_CNT
			, NVL(SUM(ECARD_CNT), 0) AS ECARD_CNT
			, NVL(SUM(PREREG_CNT), 0) AS PREREG_CNT
			, NVL(SUM(CASH_CNT), 0) AS CASH_CNT
			, NVL(SUM(EXEMPT_CNT), 0) AS EXEMPT_CNT
			, NVL(SUM(UNPAID_CNT), 0) AS UNPAID_CNT
		FROM (
			SELECT IC_CODE, 'DAY' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_CNT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_CNT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_CNT
				, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(LANE_EXEM_BUSAN_ETC)
				+ SUM(VLTN_EXMT) + SUM(VLTN_EXMT_BUSAN)
				-- 선불출금제외 + SUM(EXMT_EPCARD_PAY) + SUM(EXMT_EPCARD_PAY_BUSAN)
				 AS EXEMPT_CNT
				, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP) AS UNPAID_CNT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
			  AND WORK_DATE = #{WORK_DATE}
			  AND SUM_DIV = '0'
			GROUP BY IC_CODE, WORK_DATE
			UNION ALL 
			SELECT IC_CODE, 'MONTH' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_CNT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_CNT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_CNT
				, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(LANE_EXEM_BUSAN_ETC)
				+ SUM(VLTN_EXMT) + SUM(VLTN_EXMT_BUSAN)
				-- 선불출금제외 + SUM(EXMT_EPCARD_PAY) + SUM(EXMT_EPCARD_PAY_BUSAN)
				 AS EXEMPT_CNT
				, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP) AS UNPAID_CNT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), 'MM'),'YYYYMMDD') AND #{WORK_DATE}
			  AND SUM_DIV = '0'
			GROUP BY IC_CODE, WORK_DATE
			UNION ALL 
			SELECT IC_CODE, 'YEAR' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_CNT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_CNT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_CNT
				, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(LANE_EXEM_BUSAN_ETC)
				+ SUM(VLTN_EXMT) + SUM(VLTN_EXMT_BUSAN)
				-- 선불출금제외 + SUM(EXMT_EPCARD_PAY) + SUM(EXMT_EPCARD_PAY_BUSAN)
				 AS EXEMPT_CNT
				, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP) AS UNPAID_CNT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), 'YYYY'),'YYYYMMDD') AND #{WORK_DATE}
			  AND SUM_DIV = '0'
			GROUP BY IC_CODE, WORK_DATE
		) RAW_DATA, (
			SELECT #{IC_CODE} AS IC_CODE, 'DAY' AS DATE_CODE FROM DUAL
			UNION 
			SELECT #{IC_CODE}, 'MONTH' FROM DUAL
			UNION 
			SELECT #{IC_CODE}, 'YEAR' FROM DUAL
		) DIV
		WHERE 1 = 1
	 	  AND DIV.IC_CODE = RAW_DATA.IC_CODE(+)
		  AND DIV.DATE_CODE = RAW_DATA.DATE_DIV(+)
		GROUP BY DIV.IC_CODE, DIV.DATE_CODE
	</select>

   	<!-- 통행료 징수관련 동향 - 통행료 수입 -->
	<select id="selectDailyTollTrendsTollSummary" resultType="hashmap">
	/* Mapper ID: selectDailyTollTrendsTollSummary */
		SELECT DIV.IC_CODE, DIV.DATE_CODE AS DATE_DIV
			, ROW_NUMBER() OVER(ORDER BY DIV.IC_CODE, DIV.DATE_CODE) AS ROW_NUMBER 
			, SUM(NVL(ECARD_AMT, 0) + NVL(PREREG_AMT, 0) + NVL(CASH_AMT, 0) + NVL(OTHER_AMT, 0)) AS TOT_AMT
			, NVL(SUM(ECARD_AMT), 0) AS ECARD_AMT
			, NVL(SUM(PREREG_AMT), 0) AS PREREG_AMT
			, SUM(NVL(CASH_AMT, 0) + NVL(OTHER_AMT, 0)) AS CASH_AMT 
			, DECODE(COUNT(RAW_DATA.WORK_DATE), 0, 0, ROUND(SUM(NVL(ECARD_AMT, 0) + NVL(PREREG_AMT, 0) + NVL(CASH_AMT, 0) + NVL(OTHER_AMT, 0)) / COUNT(RAW_DATA.WORK_DATE))) AS DAY_AVG
		FROM (
			SELECT IC_CODE, 'DAY' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_AMT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_AMT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_AMT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
			  AND WORK_DATE = #{WORK_DATE}
			  AND SUM_DIV = '1'
			GROUP BY IC_CODE, WORK_DATE
			UNION ALL 
			SELECT IC_CODE, 'MONTH' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_AMT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_AMT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_AMT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), 'MM'),'YYYYMMDD') AND #{WORK_DATE}
			  AND SUM_DIV = '1'
			GROUP BY IC_CODE, WORK_DATE
			UNION ALL 
			SELECT IC_CODE, 'YEAR' AS DATE_DIV, WORK_DATE
				, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_ELCARD_ETC)
				+ SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC)
				+ SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC)
				+ SUM(VLTN_NOML_EPCARD) + SUM(VLTN_NOML_ELCARD)
				+ SUM(VLTN_DC_NOML_EPCARD) + SUM(VLTN_DC_NOML_ELCARD) AS ECARD_AMT
				-- 사전등록
				, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG) AS PREREG_AMT
				-- 현금
				, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT) AS CASH_AMT
			FROM PROC_DAYFINPAYTOT TOT
			WHERE 1 = 1
			  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), 'YYYY'),'YYYYMMDD') AND #{WORK_DATE}
			  AND SUM_DIV = '1'
			GROUP BY IC_CODE, WORK_DATE
		) RAW_DATA, (
			SELECT IC_CODE, 'DAY' AS DATE_CODE, WORK_DATE, SUM(OFC_PAY_FARE) - SUM(OFC_RFND_FARE) AS OTHER_AMT FROM PROC_DAYFININFO WHERE IC_CODE = #{IC_CODE} AND WORK_DATE = #{WORK_DATE} GROUP BY IC_CODE, WORK_DATE 
			UNION ALL
			SELECT IC_CODE, 'MONTH', WORK_DATE, SUM(OFC_PAY_FARE) - SUM(OFC_RFND_FARE) AS OTHER_AM FROM PROC_DAYFININFO WHERE IC_CODE = #{IC_CODE} AND WORK_DATE LIKE SUBSTR(#{WORK_DATE}, 1, 6) || '__' GROUP BY IC_CODE, WORK_DATE 
			UNION ALL
			SELECT IC_CODE, 'YEAR', WORK_DATE, SUM(OFC_PAY_FARE) - SUM(OFC_RFND_FARE) AS OTHER_AM FROM PROC_DAYFININFO WHERE IC_CODE = #{IC_CODE} AND WORK_DATE LIKE SUBSTR(#{WORK_DATE}, 1, 4) || '____' GROUP BY IC_CODE, WORK_DATE 
			) DIV
		WHERE 1 = 1
	 	  AND DIV.IC_CODE = RAW_DATA.IC_CODE(+)
		  AND DIV.DATE_CODE = RAW_DATA.DATE_DIV(+)
		  AND DIV.WORK_DATE = RAW_DATA.WORK_DATE(+)
		GROUP BY DIV.IC_CODE, DIV.DATE_CODE
	</select>
    
   	<!-- 통행료 징수관련 동향 - 추이분석 -->
	<select id="selectDailyTollTrendsDailyAvgContrastQuater" resultType="hashmap">
	/* Mapper ID: selectDailyTollTrendsDailyAvgContrastQuater */
		SELECT IC_CODE, DATE_YEAR
			, DECODE(DATE_YEAR, SUBSTR(#{WORK_DATE}, 1, 4), 'CURR', 'PREV') AS YEAR_DIV
		, DECODE(Q1_DATE_CNT, 0, 0, NVL(ROUND(Q1_CNT / Q1_DATE_CNT), 0)) AS Q1_AVG
		, DECODE(Q2_DATE_CNT, 0, 0, NVL(ROUND(Q2_CNT / Q2_DATE_CNT), 0)) AS Q2_AVG
		, DECODE(Q3_DATE_CNT, 0, 0, NVL(ROUND(Q3_CNT / Q3_DATE_CNT), 0)) AS Q3_AVG
		, DECODE(Q4_DATE_CNT, 0, 0, NVL(ROUND(Q4_CNT / Q4_DATE_CNT), 0)) AS Q4_AVG
		FROM (
			SELECT IC_CODE, SUBSTR(WORK_DATE, 1, 4) AS DATE_YEAR, QUARTER
				, SUM(NVL(ECARD_CNT, 0) + NVL(PREREG_CNT, 0) + NVL(CASH_CNT, 0) 
					+ NVL(EXEMPT_CNT, 0) + NVL(UNPAID_CNT, 0)) AS TOT_CNT
				, COUNT(DISTINCT(WORK_DATE)) AS DATE_CNT
			FROM (
				SELECT IC_CODE, WORK_DATE, TO_CHAR(TO_DATE(WORK_DATE, 'YYYYMMDD'), 'Q') AS QUARTER
					, NVL(LANE_PAY_EPCARD_ETC, 0) + NVL(LANE_PAY_ELCARD_ETC, 0)
					+ NVL(LANE_PAY_CMTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CMTDC_ELCARD_ETC, 0)
					+ NVL(LANE_PAY_CNTDC_EPCARD_ETC, 0) + NVL(LANE_PAY_CNTDC_ELCARD_ETC, 0)
					+ NVL(VLTN_NOML_EPCARD, 0) + NVL(VLTN_NOML_ELCARD, 0)
					+ NVL(VLTN_DC_NOML_EPCARD, 0) + NVL(VLTN_DC_NOML_ELCARD, 0) AS ECARD_CNT
					-- 사전등록
					, NVL(VLTN_PRE_REG, 0) + NVL(VLTN_DC_PRE_REG, 0) AS PREREG_CNT
					-- 현금
					, NVL(VLTN_PAY_CASH, 0) + NVL(VLTN_PAY_ACNT, 0) + NVL(VLTN_DC_PAY_CASH, 0) + NVL(VLTN_DC_PAY_ACNT, 0) AS CASH_CNT
					, NVL(LANE_EXEM_OBU_ETC, 0) + NVL(LANE_EXEM_CARD_ETC, 0) + NVL(LANE_EXEM_BUSAN_ETC, 0)
					+ NVL(VLTN_EXMT, 0) + NVL(VLTN_EXMT_BUSAN, 0)
					 AS EXEMPT_CNT
					, NVL(VLTN_UNP, 0) + NVL(EXMT_UNP, 0) + NVL(VLTN_DC_UNP, 0) AS UNPAID_CNT
				FROM PROC_DAYFINPAYTOT TOT
				WHERE 1 = 1
				  AND IC_CODE = #{IC_CODE}
				  AND WORK_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE(#{WORK_DATE}, 'YYYYMMDD'), -12), 'YYYY'),'YYYYMMDD') AND #{WORK_DATE}
				  AND SUM_DIV = '0'
			) RAW_DATA
			GROUP BY IC_CODE, SUBSTR(WORK_DATE, 1, 4), QUARTER
		) PIVOT (
			SUM(TOT_CNT) AS CNT, SUM(DATE_CNT) AS DATE_CNT FOR QUARTER IN (1 AS Q1, 2 AS Q2, 3 AS Q3, 4 AS Q4)
		)
		ORDER BY IC_CODE, DATE_YEAR
	</select>
	
	<select id="selectMonthTollConstrunctionReport" parameterType="Map" resultType="Map">
		SELECT
			-- 현금수입
			NVL(FC_CHG_FORMAT(SUM(OFC_FARE), 4), 0) AS OFC_FARE,
			NVL(FC_CHG_FORMAT(SUM(OFC_CNT), 4), 0) AS OFC_CNT,
			-- 차로제어기(선후불)
			NVL(FC_CHG_FORMAT(SUM(TCS_EPCARD_FARE), 4), 0) AS TCS_EPCARD_FARE,
			NVL(FC_CHG_FORMAT(SUM(TCS_ELCARD_FARE), 4), 0) AS TCS_ELCARD_FARE,
			NVL(FC_CHG_FORMAT(SUM(TCS_EPCARD_CNT), 4), 0) AS TCS_EPCARD_CNT,
			NVL(FC_CHG_FORMAT(SUM(TCS_ELCARD_CNT), 4), 0) AS TCS_ELCARD_CNT,
			-- 환불금 
			NVL(FC_CHG_FORMAT(SUM(EXMT_RFND_EX_FARE), 4), 0) AS EXMT_RFND_EX_FARE,
			NVL(FC_CHG_FORMAT(SUM(EXMT_RFND_BUSAN_FARE), 4), 0) AS EXMT_RFND_BUSAN_FARE,
			-- 공차택시    
			NVL(FC_CHG_FORMAT(SUM(EMPTY_TAXI), 4), 0) AS EMPTY_TAXI,
			NVL(FC_CHG_FORMAT(SUM(EMPTY_TAXI_NON), 4), 0) AS EMPTY_TAXI_NON,
			-- 현금 하이패스(완납)
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_FARE_LIGHT), 4), 0) AS VLTN_PAY_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_FARE_SMALL), 4), 0) AS VLTN_PAY_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_FARE_BIG), 4), 0) AS VLTN_PAY_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_FARE_SPECIAL), 4), 0) AS VLTN_PAY_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_CNT_LIGHT), 4), 0) AS VLTN_PAY_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_CNT_SMALL), 4), 0) AS VLTN_PAY_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_CNT_BIG), 4), 0) AS VLTN_PAY_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PAY_CNT_SPECIAL), 4), 0) AS VLTN_PAY_CNT_SPECIAL,
			-- 선불 .하이패스    
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_FARE_LIGHT), 4), 0) AS LANE_EPCARD_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_FARE_SMALL), 4), 0) AS LANE_EPCARD_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_FARE_BIG), 4), 0) AS LANE_EPCARD_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_FARE_SPECIAL), 4), 0) AS LANE_EPCARD_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_CNT_LIGHT), 4), 0) AS LANE_EPCARD_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_CNT_SMALL), 4), 0) AS LANE_EPCARD_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_CNT_BIG), 4), 0) AS LANE_EPCARD_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(LANE_EPCARD_CNT_SPECIAL), 4), 0) AS LANE_EPCARD_CNT_SPECIAL,
			-- 선불.차로제어기, TCS_EPCARD_FARE
			-- 후불 .하이패스    
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_FARE_LIGHT), 4), 0) AS LANE_ELCARD_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_FARE_SMALL), 4), 0) AS LANE_ELCARD_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_FARE_BIG), 4), 0) AS LANE_ELCARD_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_FARE_SPECIAL), 4), 0) AS LANE_ELCARD_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_CNT_LIGHT), 4), 0) AS LANE_ELCARD_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_CNT_SMALL), 4), 0) AS LANE_ELCARD_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_CNT_BIG), 4), 0) AS LANE_ELCARD_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(LANE_ELCARD_CNT_SPECIAL), 4), 0) AS LANE_ELCARD_CNT_SPECIAL,
			-- 후불.차로제어기, TCS_ELCARD_FARE
			-- 사전등록       
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_FARE_LIGHT), 4), 0) AS VLTN_PRE_REG_FARE_LIGHT, 
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_FARE_SMALL), 4), 0) AS VLTN_PRE_REG_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_FARE_BIG), 4), 0) AS VLTN_PRE_REG_FARE_BIG, 
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_FARE_SPECIAL), 4), 0) AS VLTN_PRE_REG_FARE_SPECIAL, 
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_CNT_LIGHT), 4), 0) AS VLTN_PRE_REG_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_CNT_SMALL), 4), 0) AS VLTN_PRE_REG_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_CNT_BIG), 4), 0) AS VLTN_PRE_REG_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(VLTN_PRE_REG_CNT_SPECIAL), 4), 0) AS VLTN_PRE_REG_CNT_SPECIAL,
			-- 면제.하이패스  
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_FARE_LIGHT), 4), 0) AS EXMT_HIPASS_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_FARE_SMALL), 4), 0) AS EXMT_HIPASS_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_FARE_BIG), 4), 0) AS EXMT_HIPASS_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_FARE_SPECIAL), 4), 0) AS EXMT_HIPASS_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_CNT_LIGHT), 4), 0) AS EXMT_HIPASS_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_CNT_SMALL), 4), 0) AS EXMT_HIPASS_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_CNT_BIG), 4), 0) AS EXMT_HIPASS_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_HIPASS_CNT_SPECIAL), 4), 0) AS EXMT_HIPASS_CNT_SPECIAL,
			-- 면제.선불출금
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_FARE_LIGHT), 4), 0) AS EXMT_EPCARD_PAY_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_FARE_SMALL), 4), 0) AS EXMT_EPCARD_PAY_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_FARE_BIG), 4), 0) AS EXMT_EPCARD_PAY_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_FARE_SPECIAL), 4), 0) AS EXMT_EPCARD_PAY_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_CNT_LIGHT), 4), 0) AS EXMT_EPCARD_PAY_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_CNT_SMALL), 4), 0) AS EXMT_EPCARD_PAY_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_CNT_BIG), 4), 0) AS EXMT_EPCARD_PAY_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_CNT_SPECIAL), 4), 0) AS EXMT_EPCARD_PAY_CNT_SPECIAL,
			-- 면제.부산시      
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_FARE_LIGHT), 4), 0) AS EXMT_BUSAN_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_FARE_SMALL), 4), 0) AS EXMT_BUSAN_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_FARE_BIG), 4), 0) AS EXMT_BUSAN_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_FARE_SPECIAL), 4), 0) AS EXMT_BUSAN_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_CNT_LIGHT), 4), 0) AS EXMT_BUSAN_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_CNT_SMALL), 4), 0) AS EXMT_BUSAN_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_CNT_BIG), 4), 0) AS EXMT_BUSAN_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_BUSAN_CNT_SPECIAL), 4), 0) AS EXMT_BUSAN_CNT_SPECIAL,
			-- 면제.선불출금.부산시
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_FARE_LIGHT), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_FARE_SMALL), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_FARE_BIG), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_FARE_SPECIAL), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_CNT_LIGHT), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_CNT_SMALL), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_CNT_BIG), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(EXMT_EPCARD_PAY_BUSAN_CNT_SPECIAL), 4), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_SPECIAL,
			-- 사무실(미납)    
			NVL(FC_CHG_FORMAT(SUM(UNP_FARE_LIGHT), 4), 0) AS UNP_FARE_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(UNP_FARE_SMALL), 4), 0) AS UNP_FARE_SMALL,
			NVL(FC_CHG_FORMAT(SUM(UNP_FARE_BIG), 4), 0) AS UNP_FARE_BIG,
			NVL(FC_CHG_FORMAT(SUM(UNP_FARE_SPECIAL), 4), 0) AS UNP_FARE_SPECIAL,
			NVL(FC_CHG_FORMAT(SUM(UNP_CNT_LIGHT), 4), 0) AS UNP_CNT_LIGHT,
			NVL(FC_CHG_FORMAT(SUM(UNP_CNT_SMALL), 4), 0) AS UNP_CNT_SMALL,
			NVL(FC_CHG_FORMAT(SUM(UNP_CNT_BIG), 4), 0) AS UNP_CNT_BIG,
			NVL(FC_CHG_FORMAT(SUM(UNP_CNT_SPECIAL), 4), 0) AS UNP_CNT_SPECIAL,
			-- 수수료
			NVL(MAX(CMS_EPCARD),0) AS CMS_EPCARD,
			NVL(MAX(CMS_ELCARD),0) AS CMS_ELCARD,
			NVL(MAX(CMS_CARD),0) AS CMS_CARD
		FROM 
		(
		    SELECT
		        IC_CODE, 
				WORK_DATE,
				IC_DIV,
		        -- 현금수입
		        SUM(OFC_PAY_FARE) - SUM(OFC_RFND_FARE) AS OFC_FARE,
		        SUM(OFC_PAY_CNT) - SUM(OFC_RFND_CNT) AS OFC_CNT,
		        -- 차로제어기
		        SUM(TCS_EPCARD_FARE) AS TCS_EPCARD_FARE,
		        SUM(TCS_ELCARD_FARE) AS TCS_ELCARD_FARE,
		        SUM(TCS_EPCARD_CNT) AS TCS_EPCARD_CNT,
		        SUM(TCS_ELCARD_CNT) AS TCS_ELCARD_CNT,
		        -- 환불금
		        SUM(EXMT_RFND_EX_FARE) AS EXMT_RFND_EX_FARE,
		        SUM(EXMT_RFND_BUSAN_FARE) AS EXMT_RFND_BUSAN_FARE,
		        -- 공차택시
		        SUM(EMPTY_TAXI_CNT) AS EMPTY_TAXI,
		        SUM(EMPTY_TAXI_NON_CNT) AS EMPTY_TAXI_NON,
		        -- 수수료
		        (MAX(CMS_EPCARD)/100) AS CMS_EPCARD,
		        (MAX(CMS_ELCARD)/100) AS CMS_ELCARD,
		        (MAX(CMS_CARD)/100) AS CMS_CARD
		    FROM PROC_DAYFININFO 
		    WHERE IC_CODE = #{IC_CODE} 
	        <choose>
	        	<when test = "SUM != NULL">
	        		AND SUBSTR(WORK_DATE,1,4) = #{SUM}
	        		AND SUBSTR(WORK_DATE,1,6) <![CDATA[ <= ]]> #{MONTH}
	        	</when>
	        	<when test = "LASTYEAR != NULL">
	        		AND SUBSTR(WORK_DATE,1,6) = #{LASTYEAR}
	        	</when>
	        	<when test = "MONTH != NULL">
	        		AND SUBSTR(WORK_DATE,1,6) = #{MONTH}
	        	</when>
	        </choose> 
		    GROUP BY IC_CODE, WORK_DATE, IC_DIV
		) DFI LEFT JOIN 
		(
		    SELECT
		        NVL(FARE.IC_CODE, CNT.IC_CODE) AS IC_CODE,
			    NVL(FARE.WORK_DATE, CNT.WORK_DATE) AS WORK_DATE,
			    NVL(FARE.IC_DIV, CNT.IC_DIV) AS IC_DIV,
		        -- 현금. 하이패스(완납)
		        SUM(VLTN_PAY_FARE_6) AS VLTN_PAY_FARE_LIGHT,
		        SUM(VLTN_PAY_FARE_1) AS VLTN_PAY_FARE_SMALL,
		        SUM(VLTN_PAY_FARE_2) AS VLTN_PAY_FARE_BIG,
		        SUM(VLTN_PAY_FARE_3) + SUM(VLTN_PAY_FARE_4) + SUM(VLTN_PAY_FARE_5) AS VLTN_PAY_FARE_SPECIAL,
		        SUM(VLTN_PAY_CNT_6) AS VLTN_PAY_CNT_LIGHT,
		        SUM(VLTN_PAY_CNT_1) AS VLTN_PAY_CNT_SMALL,
		        SUM(VLTN_PAY_CNT_2) AS VLTN_PAY_CNT_BIG,
		        SUM(VLTN_PAY_CNT_3) + SUM(VLTN_PAY_CNT_4) + SUM(VLTN_PAY_CNT_5)  AS VLTN_PAY_CNT_SPECIAL,
		        -- 선불.하이패스,
		        SUM(LANE_EPCARD_FARE_6) AS LANE_EPCARD_FARE_LIGHT,
		        SUM(LANE_EPCARD_FARE_1) AS LANE_EPCARD_FARE_SMALL,
		        SUM(LANE_EPCARD_FARE_2) AS LANE_EPCARD_FARE_BIG,
		        SUM(LANE_EPCARD_FARE_3) + SUM(LANE_EPCARD_FARE_4) + SUM(LANE_EPCARD_FARE_5) AS LANE_EPCARD_FARE_SPECIAL,
		        SUM(LANE_EPCARD_CNT_6) AS LANE_EPCARD_CNT_LIGHT,
		        SUM(LANE_EPCARD_CNT_1) AS LANE_EPCARD_CNT_SMALL,
		        SUM(LANE_EPCARD_CNT_2) AS LANE_EPCARD_CNT_BIG,
		        SUM(LANE_EPCARD_CNT_3) + SUM(LANE_EPCARD_CNT_4) + SUM(LANE_EPCARD_CNT_5) AS LANE_EPCARD_CNT_SPECIAL,
		        -- 후불.하이패스
		        SUM(LANE_ELCARD_FARE_6) AS LANE_ELCARD_FARE_LIGHT,
		        SUM(LANE_ELCARD_FARE_1) AS LANE_ELCARD_FARE_SMALL,
		        SUM(LANE_ELCARD_FARE_2) AS LANE_ELCARD_FARE_BIG,
		        SUM(LANE_ELCARD_FARE_3) + SUM(LANE_ELCARD_FARE_4) + SUM(LANE_ELCARD_FARE_5) AS LANE_ELCARD_FARE_SPECIAL,
		        SUM(LANE_ELCARD_CNT_6) AS LANE_ELCARD_CNT_LIGHT,
		        SUM(LANE_ELCARD_CNT_1) AS LANE_ELCARD_CNT_SMALL,
		        SUM(LANE_ELCARD_CNT_2) AS LANE_ELCARD_CNT_BIG,
		        SUM(LANE_ELCARD_CNT_3) + SUM(LANE_ELCARD_CNT_4) + SUM(LANE_ELCARD_CNT_5) AS LANE_ELCARD_CNT_SPECIAL,
		        -- 사전등록
		        SUM(VLTN_PRE_REG_FARE_6) AS VLTN_PRE_REG_FARE_LIGHT,
		        SUM(VLTN_PRE_REG_FARE_1) AS VLTN_PRE_REG_FARE_SMALL,
		        SUM(VLTN_PRE_REG_FARE_2) AS VLTN_PRE_REG_FARE_BIG,
		        SUM(VLTN_PRE_REG_FARE_3) + SUM(VLTN_PRE_REG_FARE_4) + SUM(VLTN_PRE_REG_FARE_5) AS VLTN_PRE_REG_FARE_SPECIAL,
		        SUM(VLTN_PRE_REG_CNT_6) AS VLTN_PRE_REG_CNT_LIGHT,
		        SUM(VLTN_PRE_REG_CNT_1) AS VLTN_PRE_REG_CNT_SMALL,
		        SUM(VLTN_PRE_REG_CNT_2) AS VLTN_PRE_REG_CNT_BIG,
		        SUM(VLTN_PRE_REG_CNT_3) + SUM(VLTN_PRE_REG_CNT_4) + SUM(VLTN_PRE_REG_CNT_5) AS VLTN_PRE_REG_CNT_SPECIAL,
		        -- 면제.하이패스
		        SUM(EXMT_HIPASS_FARE_6) AS EXMT_HIPASS_FARE_LIGHT,
		        SUM(EXMT_HIPASS_FARE_1) AS EXMT_HIPASS_FARE_SMALL,
		        SUM(EXMT_HIPASS_FARE_2) AS EXMT_HIPASS_FARE_BIG,
		        SUM(EXMT_HIPASS_FARE_3) + SUM(EXMT_HIPASS_FARE_4) + SUM(EXMT_HIPASS_FARE_5) AS EXMT_HIPASS_FARE_SPECIAL,
		        SUM(EXMT_HIPASS_CNT_6) AS EXMT_HIPASS_CNT_LIGHT,
		        SUM(EXMT_HIPASS_CNT_1) AS EXMT_HIPASS_CNT_SMALL,
		        SUM(EXMT_HIPASS_CNT_2) AS EXMT_HIPASS_CNT_BIG,
		        SUM(EXMT_HIPASS_CNT_3) + SUM(EXMT_HIPASS_CNT_4) + SUM(EXMT_HIPASS_CNT_5) AS EXMT_HIPASS_CNT_SPECIAL,
				-- 면제.선불출금
				SUM(EXMT_EPCARD_PAY_FARE_6) AS EXMT_EPCARD_PAY_FARE_LIGHT,
				SUM(EXMT_EPCARD_PAY_FARE_1) AS EXMT_EPCARD_PAY_FARE_SMALL,
				SUM(EXMT_EPCARD_PAY_FARE_2) AS EXMT_EPCARD_PAY_FARE_BIG,
				SUM(EXMT_EPCARD_PAY_FARE_3) + SUM(EXMT_EPCARD_PAY_FARE_4) + SUM(EXMT_EPCARD_PAY_FARE_5) AS EXMT_EPCARD_PAY_FARE_SPECIAL,
				SUM(EXMT_EPCARD_PAY_CNT_6) AS EXMT_EPCARD_PAY_CNT_LIGHT,
				SUM(EXMT_EPCARD_PAY_CNT_1) AS EXMT_EPCARD_PAY_CNT_SMALL,
				SUM(EXMT_EPCARD_PAY_CNT_2) AS EXMT_EPCARD_PAY_CNT_BIG,
				SUM(EXMT_EPCARD_PAY_CNT_3) + SUM(EXMT_EPCARD_PAY_CNT_4) + SUM(EXMT_EPCARD_PAY_CNT_5) AS EXMT_EPCARD_PAY_CNT_SPECIAL,
		        -- 면제.부산시
		        SUM(EXMT_BUSAN_FARE_6) AS EXMT_BUSAN_FARE_LIGHT,
		        SUM(EXMT_BUSAN_FARE_1) AS EXMT_BUSAN_FARE_SMALL,
		        SUM(EXMT_BUSAN_FARE_2) AS EXMT_BUSAN_FARE_BIG,
		        SUM(EXMT_BUSAN_FARE_3) + SUM(EXMT_BUSAN_FARE_4) + SUM(EXMT_BUSAN_FARE_5) AS EXMT_BUSAN_FARE_SPECIAL,
		        SUM(EXMT_BUSAN_CNT_6) AS EXMT_BUSAN_CNT_LIGHT,
		        SUM(EXMT_BUSAN_CNT_1) AS EXMT_BUSAN_CNT_SMALL,
		        SUM(EXMT_BUSAN_CNT_2) AS EXMT_BUSAN_CNT_BIG,
		        SUM(EXMT_BUSAN_CNT_3) + SUM(EXMT_BUSAN_CNT_4) + SUM(EXMT_BUSAN_CNT_5) AS EXMT_BUSAN_CNT_SPECIAL,
				-- 면제.선불출금.부산시
				SUM(EXMT_EPCARD_PAY_BUSAN_FARE_6) AS EXMT_EPCARD_PAY_BUSAN_FARE_LIGHT,
				SUM(EXMT_EPCARD_PAY_BUSAN_FARE_1) AS EXMT_EPCARD_PAY_BUSAN_FARE_SMALL,
				SUM(EXMT_EPCARD_PAY_BUSAN_FARE_2) AS EXMT_EPCARD_PAY_BUSAN_FARE_BIG,
				SUM(EXMT_EPCARD_PAY_BUSAN_FARE_3) + SUM(EXMT_EPCARD_PAY_BUSAN_FARE_4) + SUM(EXMT_EPCARD_PAY_BUSAN_FARE_5) AS EXMT_EPCARD_PAY_BUSAN_FARE_SPECIAL,
				SUM(EXMT_EPCARD_PAY_BUSAN_CNT_6) AS EXMT_EPCARD_PAY_BUSAN_CNT_LIGHT,
				SUM(EXMT_EPCARD_PAY_BUSAN_CNT_1) AS EXMT_EPCARD_PAY_BUSAN_CNT_SMALL,
				SUM(EXMT_EPCARD_PAY_BUSAN_CNT_2) AS EXMT_EPCARD_PAY_BUSAN_CNT_BIG,
				SUM(EXMT_EPCARD_PAY_BUSAN_CNT_3) + SUM(EXMT_EPCARD_PAY_BUSAN_CNT_4) + SUM(EXMT_EPCARD_PAY_BUSAN_CNT_5) AS EXMT_EPCARD_PAY_BUSAN_CNT_SPECIAL,
		        -- 사무실(미납)
		        SUM(UNP_FARE_6) AS UNP_FARE_LIGHT,
		        SUM(UNP_FARE_1) AS UNP_FARE_SMALL,
		        SUM(UNP_FARE_2) AS UNP_FARE_BIG,
		        SUM(UNP_FARE_3) + SUM(UNP_FARE_4) + SUM(UNP_FARE_5) AS UNP_FARE_SPECIAL,
		        SUM(UNP_CNT_6) AS UNP_CNT_LIGHT,
		        SUM(UNP_CNT_1) AS UNP_CNT_SMALL,
		        SUM(UNP_CNT_2) AS UNP_CNT_BIG,
		        SUM(UNP_CNT_3) + SUM(UNP_CNT_4) + SUM(UNP_CNT_5) AS UNP_CNT_SPECIAL
		    FROM
		    (
		        SELECT 
		            IC_CODE,
		            WORK_DATE,
		            IC_DIV,
                    DFT_CAR_TYPE,
		            -- 현금.하이패스(완납)
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_CNT_6,
		            -- 선불.하이패스
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_CNT_6,
		            -- 후불.하이패스,
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_CNT_6,
		            -- 사전등록
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_CNT_6,
		            -- 면제.하이패스
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_CNT_6,
					-- 면제.선불출금
		            DECODE(DFT_CAR_TYPE , 1, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_CNT_6,
		            -- 면제.부산시
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_CNT_6,
					-- 면제.선불출금.부산시
		            DECODE(DFT_CAR_TYPE , 1, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_CNT_6,
		            -- 사무실(미납)
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_CNT_6
		        FROM
		            PROC_DAYFINPAYTOT
		        WHERE IC_CODE = #{IC_CODE}
					<choose>
			        	<when test = "SUM != NULL">
	        				AND SUBSTR(WORK_DATE,1,4) = #{SUM}
			        		AND SUBSTR(WORK_DATE,1,6) <![CDATA[ <= ]]> #{MONTH}
			        	</when>
			        	<when test = "LASTYEAR != NULL">
			        		AND SUBSTR(WORK_DATE,1,6) = #{LASTYEAR}
			        	</when>
			        	<when test = "MONTH != NULL">
			        		AND SUBSTR(WORK_DATE,1,6) = #{MONTH}
			        	</when>
			        </choose>
			        AND SUM_DIV = '0'
		        GROUP BY IC_CODE, WORK_DATE, IC_DIV, DFT_CAR_TYPE
        ) CNT LEFT JOIN
	     	(
	        	SELECT 
		            IC_CODE,
		            WORK_DATE,
		            IC_DIV,
                    DFT_CAR_TYPE ,
		            -- 현금.하이패스(완납)
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_PAY_CASH) + SUM(VLTN_PAY_ACNT) + SUM(VLTN_DC_PAY_CASH) + SUM(VLTN_DC_PAY_ACNT), 0) AS VLTN_PAY_FARE_6,
		            -- 선불.하이패스
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_PAY_EPCARD_ETC) + SUM(LANE_PAY_CMTDC_EPCARD_ETC) + SUM(LANE_PAY_CNTDC_EPCARD_ETC) + SUM(VLTN_NOML_EPCARD) + SUM(VLTN_DC_NOML_EPCARD), 0) AS LANE_EPCARD_FARE_6,
		            -- 후불.하이패스
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_PAY_ELCARD_ETC) + SUM(LANE_PAY_CMTDC_ELCARD_ETC) + SUM(LANE_PAY_CNTDC_ELCARD_ETC) + SUM(VLTN_NOML_ELCARD) +  + SUM(VLTN_DC_NOML_ELCARD), 0) AS LANE_ELCARD_FARE_6,
		            -- 사전등록
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_PRE_REG) + SUM(VLTN_DC_PRE_REG), 0) AS VLTN_PRE_REG_FARE_6,
		            -- 면제.하이패스
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_EXEM_OBU_ETC) + SUM(LANE_EXEM_CARD_ETC) + SUM(VLTN_EXMT), 0) AS EXMT_HIPASS_FARE_6,
					-- 면제.선불출금
		            DECODE(DFT_CAR_TYPE , 1, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(EXMT_EPCARD_PAY), 0) AS EXMT_EPCARD_PAY_FARE_6,
		            -- 면제.부산시
		            DECODE(DFT_CAR_TYPE , 1, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(LANE_EXEM_BUSAN_ETC) + SUM(VLTN_EXMT_BUSAN),0) AS EXMT_BUSAN_FARE_6,
					-- 면제.선불출금.부산시
		            DECODE(DFT_CAR_TYPE , 1, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(EXMT_EPCARD_PAY_BUSAN), 0) AS EXMT_EPCARD_PAY_BUSAN_FARE_6,
		            -- 사무실(미납)
		            DECODE(DFT_CAR_TYPE , 1, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_1,
		            DECODE(DFT_CAR_TYPE , 2, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_2,
		            DECODE(DFT_CAR_TYPE , 3, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_3,
		            DECODE(DFT_CAR_TYPE , 4, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_4,
		            DECODE(DFT_CAR_TYPE , 5, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_5,
		            DECODE(DFT_CAR_TYPE , 6, SUM(VLTN_UNP) + SUM(EXMT_UNP) + SUM(VLTN_DC_UNP), 0) AS UNP_FARE_6
		        FROM
		            PROC_DAYFINPAYTOT
		        WHERE IC_CODE = #{IC_CODE} 
					<choose>
			        	<when test = "SUM != NULL">
	        				AND SUBSTR(WORK_DATE,1,4) = #{SUM}
			        		AND SUBSTR(WORK_DATE,1,6) <![CDATA[ <= ]]> #{MONTH}
			        	</when>
			        	<when test = "LASTYEAR != NULL">
			        		AND SUBSTR(WORK_DATE,1,6) = #{LASTYEAR}
			        	</when>
			        	<when test = "MONTH != NULL">
			        		AND SUBSTR(WORK_DATE,1,6) = #{MONTH}
			        	</when>
			        </choose>
			        AND SUM_DIV = '1'
		        GROUP BY IC_CODE, WORK_DATE, IC_DIV, DFT_CAR_TYPE
        ) FARE ON FARE.IC_CODE = CNT.IC_CODE AND FARE.WORK_DATE = CNT.WORK_DATE AND FARE.DFT_CAR_TYPE  = CNT.DFT_CAR_TYPE  AND FARE.IC_DIV = CNT.IC_DIV
		    GROUP BY FARE.IC_CODE, FARE.WORK_DATE, CNT.IC_CODE, CNT.WORK_DATE, FARE.IC_DIV, CNT.IC_DIV
		) DFT ON DFI.IC_CODE = DFT.IC_CODE AND DFI.WORK_DATE = DFT.WORK_DATE AND DFI.IC_DIV = DFT.IC_DIV
		GROUP BY DFI.IC_CODE
	</select>

	<!-- 일별사무실유형현황 조회 -->
	<select id="selectDailyViolationCorrectionSummary" resultType="hashMap">
	/* Mapper ID: selectDailyViolationCorrectionSummary */
	SELECT DECODE(GROUPID, 23, '합계', FC_CHG_FORMAT(WORK_DATE, '1')) WORK_DATE_DP
		, FC_CHG_CODEDP('304', HAND_TYPE) HAND_TYPE_DP
		, CASE WHEN GROUPID = 7 THEN '소계' 
			WHEN GROUPID = 23 THEN '총합계'
			ELSE FC_CHG_CODEDP('057', VLTN_CODE)
		  END VLTN_CODE_DP
		, NVL(FC_CHG_CODEDP('132', VLTN_PAY_TYPE), '-') VLTN_PAY_TYPE_DP
		, CASE WHEN OFC_DIV = '99' THEN '감면단말기'
			WHEN OFC_DIV = '01' THEN '후불'
			WHEN OFC_DIV = '00' THEN '선불'
			ELSE '-' END OFC_DIV_DP
		, OFC_CNT OFC_CNT
		, DECODE(HAND_TYPE, '40', OFC_PASS_FARE, OFC_EXPT_PAY_FARE) OFC_TO_PAY
		-- 완납
		, DECODE(HAND_TYPE, '30', OFC_CNT, 0) OFC_PAY_CNT
		, DECODE(HAND_TYPE, '30', OFC_PAY_FARE, 0) OFC_PAY_FARE
		-- 미납
		, DECODE(HAND_TYPE, '10', OFC_CNT, 0) OFC_UNP_CNT
		, DECODE(HAND_TYPE, '10', OFC_PASS_FARE, 0) OFC_UNP_FARE
		-- 정상
		, DECODE(HAND_TYPE, '90', OFC_CNT, 0) OFC_NOR_CNT
		, DECODE(HAND_TYPE, '90', DECODE(VLTN_PAY_TYPE, '19', CRCT_PAY_FARE, OFC_EXPT_PAY_FARE), 0) OFC_NOR_FARE
		-- format
		, FC_CHG_FORMAT(OFC_CNT, 4) OFC_CNT_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '40', OFC_PASS_FARE, OFC_EXPT_PAY_FARE), 4) OFC_TO_PAY_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '30', OFC_CNT, 0), 4) OFC_PAY_CNT_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '30', OFC_PAY_FARE, 0), 4) OFC_PAY_FARE_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '10', OFC_CNT, 0), 4) OFC_UNP_CNT_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '10', OFC_PASS_FARE, 0), 4) OFC_UNP_FARE_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '90', OFC_CNT, 0), 4) OFC_NOR_CNT_DP
		, FC_CHG_FORMAT(DECODE(HAND_TYPE, '90', DECODE(VLTN_PAY_TYPE, '19', CRCT_PAY_FARE, OFC_EXPT_PAY_FARE), 0), 4) OFC_NOR_FARE_DP
	FROM (
		SELECT WORK_DATE
			, GROUPING_ID(WORK_DATE, HAND_TYPE, VLTN_CODE, VLTN_PAY_TYPE, OFC_DIV) GROUPID
			, HAND_TYPE
			, VLTN_CODE
			, VLTN_PAY_TYPE
			, OFC_DIV
			, COUNT(*) OFC_CNT
			, SUM(OFC_PASS_FARE) AS OFC_PASS_FARE
			, SUM(OFC_EXPT_PAY_FARE) OFC_EXPT_PAY_FARE
			, SUM(OFC_PAY_FARE) OFC_PAY_FARE
			, SUM(CRCT_PAY_FARE) CRCT_PAY_FARE
		FROM (
			SELECT V.WORK_DATE
				, V.HAND_TYPE
				, V.VLTN_CODE
				, V.VLTN_PAY_TYPE
				, CASE WHEN REGEXP_LIKE(V.OBU_ATT, '[1-7][0-9A-F]') THEN '99' ELSE V.ECARD_TYPE END AS OFC_DIV
				, (V.OFC_PASS_FARE) AS OFC_PASS_FARE
				, (V.OFC_EXPT_PAY_FARE) OFC_EXPT_PAY_FARE
				, (V.SUM_OFC_PAY_FARE) OFC_PAY_FARE
				, (DECODE(C.LPAY_CRCT_YN, 'Y', C.CRCT_PAY_FARE, 0)) CRCT_PAY_FARE
			FROM PRIM_ETCVLTN V, PRIM_ECARDHAND C
			WHERE V.IC_CODE = #{IC_CODE}
			  AND V.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
			  AND V.HAND_TYPE != '80'
			  AND V.IC_CODE = C.IC_CODE(+)
			  AND V.WORK_DATE = C.WORK_DATE(+)
			  AND V.WORK_NO = C.WORK_NO(+)
			  AND V.HAND_SNO = C.HAND_SNO(+)
		)
		GROUP BY CUBE(WORK_DATE, HAND_TYPE, VLTN_CODE, VLTN_PAY_TYPE, OFC_DIV)
		HAVING GROUPING_ID(WORK_DATE, HAND_TYPE, VLTN_CODE, VLTN_PAY_TYPE, OFC_DIV) IN (0, 7, 23)
	)
	ORDER BY WORK_DATE, HAND_TYPE, VLTN_CODE, VLTN_PAY_TYPE, OFC_DIV
	</select>
	
	<select id="selectGdtcsPassList" resultType="hashmap">
	/* Mapper ID: selectGdtcsPassList */
	
	SELECT ROW_NUMBER() over(order by A.WORK_DATE, A.JBC_SNO ) SEQ_NO, --  순번
			FC_CHG_FORMAT(D.WORK_DATE, '1') WORK_DATE,
			D.WORK_NO WORK_NO,
			D.HAND_SNO HAND_SNO,
			FC_CHG_FORMAT(D.HAND_DT, '11') HAND_DT,
            D.VLTN_CODE,
            D.OBU_NO,
            D.MAIN_PAY_DIV,
            D.BS_EXM_TYPE_DTL,
			DECODE(D.MAIN_PAY_DIV, '6', '0', FC_CHG_FORMAT(D.PASS_FARE, '4')) PASS_FARE,
            FC_CHG_FORMAT(D.PAY_FARE, '4') PAY_FARE,
			D.HAND_CAR_NO HAND_CAR_NO,
			A.JBC_CAR_NO JBC_CAR_NO,
            A.JBC_DRIVER JBC_DRIVER,
            FC_CHG_CODENM('297', A.BSTAXI_DIV) BSTAXI_DIV
            
		FROM 
		(select * from PRIM_JBCHAND where WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}) A,  
		(
		   SELECT B.IC_CODE, B.WORK_DATE, B.WORK_NO, B.HAND_SNO, B.HAND_DT, B.VLTN_CODE, B.OBU_NO, B.MAIN_PAY_DIV, B.BS_EXM_TYPE_DTL, B.PASS_FARE, B.PAY_FARE,C.HAND_CAR_NO
		    FROM PRIM_ETCHAND B, PRIM_HANDCARNO C
		    WHERE B.WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
		    AND B.IC_CODE = C.IC_CODE(+)
		    AND B.WORK_DATE = C.WORK_DATE(+)
		    AND B.WORK_NO = C.WORK_NO(+)
		    AND B.HAND_SNO = C.HAND_SNO(+)

		) D
		WHERE A.IC_CODE = D.IC_CODE(+)
		AND A.WORK_DATE = D.WORK_DATE(+)
		AND ('부산' || A.JBC_CAR_NO) = D.HAND_CAR_NO(+)
		<if test='BSTAXI_DIV != null and BSTAXI_DIV != ""'>
		   AND A.BSTAXI_DIV = #{BSTAXI_DIV}
		</if>
		<if test='JBC_CAR_NO != null and JBC_CAR_NO != ""'>
		   AND A.JBC_CAR_NO LIKE '%' || #{JBC_CAR_NO} || '%'
		</if>
		AND D.HAND_DT BETWEEN A.IN_DT AND A.OUT_DT
		ORDER BY A.WORK_DATE, A.JBC_SNO

	</select>
	
	<select id="selectJabicallPassList" resultType="hashmap">
	/* Mapper ID: selectJabicallPassList */
	
		SELECT JBC_SNO,
			JBC_CAR_NO,
			FC_CHG_FORMAT(IN_DT, '11') IN_DT,
			FC_CHG_FORMAT(OUT_DT, '11') OUT_DT,
            JBC_DRIVER,
            FC_CHG_CODENM('297', BSTAXI_DIV) BSTAXI_DIV
	
		FROM PRIM_JBCHAND
		WHERE 1=1
		AND WORK_DATE BETWEEN #{START_DATE} AND #{END_DATE}
		<if test='JBC_CAR_NO != null and JBC_CAR_NO != ""'>
		   AND JBC_CAR_NO LIKE '%' || #{JBC_CAR_NO} || '%'
		</if>
		<if test='BSTAXI_DIV != null and BSTAXI_DIV != ""'>
		   AND BSTAXI_DIV = #{BSTAXI_DIV}
		</if>
		ORDER BY WORK_DATE, JBC_SNO

	</select>

    <insert  id="updateJabicallFile" parameterType="hashMap">
    /* Mapper ID: JabicallFile */
    <foreach collection="params" item="vo" index="idx" separator=" " open="INSERT ALL" close="SELECT 1 FROM DUAL">
	INTO PRIM_JBCHAND
        ( 
        WORK_DATE,
        IC_CODE,
        JBC_SNO,
        JBC_CAR_NO,
        IN_DT,
        OUT_DT,
        JBC_DRIVER,
        BSTAXI_DIV
        )
        VALUES
         (
            #{vo.WORK_DATE},
            #{vo.IC_CODE},
            #{vo.JBC_SNO},
            #{vo.JBC_CAR_NO},
            #{vo.IN_DT},
            #{vo.OUT_DT},
            #{vo.JBC_DRIVER},
            #{vo.BSTAXI_DIV}
            )
        </foreach>
	</insert>
	
	
	<select id="selectAllInfo" resultType="hashmap">
	/* Mapper ID:  selectAllInfo*/
	-- 1-1, 2-1). 공차 전/후 하이패스, 비하이패스(사전등록), 면제차량, 미수납 건수, 금액
		
		SELECT
		    '적용 후 건수' AS SUM_DIV,
		    NVL(SUM(LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD),0) AS 선불하이패스,
		    NVL(SUM(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC),0) AS 후불하이패스,
		    NVL(SUM(VLTN_PRE_REG + VLTN_DC_PRE_REG),0) AS 사전등록,
		    NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + VLTN_EXMT_EPCARD + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_ELCARD_BUSAN),0) AS 면제,
		    NVL(SUM(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP),0) AS 미납,
		    NVL(SUM((LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD)+(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC)+(VLTN_PRE_REG + VLTN_DC_PRE_REG)+(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + VLTN_EXMT_EPCARD + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_ELCARD_BUSAN)+(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP)),0) AS 합계
		FROM
		    PROC_DAYFINPAYTOT_AFTER
		WHERE WORK_DATE = #{WORK_DATE} 
			AND SUM_DIV = 0
		UNION ALL
		SELECT
		    '적용 후 금액' AS SUM_DIV,
		    NVL(SUM(LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD),0) AS 선불하이패스,
		    NVL(SUM(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC),0) AS 후불하이패스,
		    NVL(SUM(VLTN_PRE_REG + VLTN_DC_PRE_REG),0) AS 사전등록,
		    NVL(SUM(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + VLTN_EXMT_EPCARD + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_ELCARD_BUSAN),0) AS 면제,
		    NVL(SUM(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP),0) AS 미납,
		    
		    NVL(SUM(
		        (LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD)
		        +(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC)
		        +(VLTN_PRE_REG + VLTN_DC_PRE_REG) 
		        +(LANE_EXEM_OBU_EPCARD_ETC + LANE_EXEM_CARD_EPCARD_ETC + VLTN_EXMT_EPCARD + LANE_EXEM_OBU_ELCARD_ETC + LANE_EXEM_CARD_ELCARD_ETC + VLTN_EXMT_ELCARD + LANE_EXEM_BUSAN_EPCARD_ETC + VLTN_EXMT_EPCARD_BUSAN + LANE_EXEM_BUSAN_ELCARD_ETC + VLTN_EXMT_ELCARD_BUSAN)
		        +(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP)
		    ),0) AS 합계
		    
		FROM
		    PROC_DAYFINPAYTOT_AFTER
		WHERE WORK_DATE = #{WORK_DATE}
			 AND SUM_DIV = 1
		UNION ALL
		SELECT
		    '적용 전 건수' AS SUM_DIV,
		    NVL(SUM(LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD),0) AS 선불하이패스,
		    NVL(SUM(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC),0) AS 후불하이패스,
		    NVL(SUM(VLTN_PRE_REG + VLTN_DC_PRE_REG),0) AS 사전등록,
		    NVL(SUM(LANE_EXEM_OBU_ETC + LANE_EXEM_CARD_ETC + VLTN_EXMT + LANE_EXEM_BUSAN_ETC + VLTN_EXMT_BUSAN),0) AS 면제,
		    NVL(SUM(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP),0) AS 미납,
		    
		    NVL(SUM(
		        (LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD)
		        +(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC) 
		        +(VLTN_PRE_REG + VLTN_DC_PRE_REG) 
		        +(LANE_EXEM_OBU_ETC + LANE_EXEM_CARD_ETC + VLTN_EXMT + LANE_EXEM_BUSAN_ETC + VLTN_EXMT_BUSAN) 
		        +(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP)
		    ),0) AS 합계
		    
		    
		FROM
		    PROC_DAYFINPAYTOT
		WHERE WORK_DATE = #{WORK_DATE} 
			AND SUM_DIV = 0
		UNION ALL
		SELECT
		    '적용 전 금액' AS SUM_DIV,
		    NVL(SUM(LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD),0) AS 선불하이패스,
		    NVL(SUM(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC),0) AS 후불하이패스,
		    NVL(SUM(VLTN_PRE_REG + VLTN_DC_PRE_REG),0) AS 사전등록,
		    NVL(SUM(LANE_EXEM_OBU_ETC + LANE_EXEM_CARD_ETC + VLTN_EXMT + LANE_EXEM_BUSAN_ETC + VLTN_EXMT_BUSAN),0) AS 면제,
		    NVL(SUM(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP),0) AS 미납,
		    
		    NVL(SUM(
		        (LANE_PAY_EPCARD_ETC + LANE_PAY_CMTDC_EPCARD_ETC + LANE_PAY_CNTDC_EPCARD_ETC + VLTN_NOML_EPCARD + VLTN_DC_NOML_EPCARD)
		        +(VLTN_DC_NOML_ELCARD + VLTN_NOML_ELCARD + LANE_PAY_CNTDC_ELCARD_ETC + LANE_PAY_CMTDC_ELCARD_ETC + LANE_PAY_ELCARD_ETC)
		        +(VLTN_PRE_REG + VLTN_DC_PRE_REG)
		        +(LANE_EXEM_OBU_ETC + LANE_EXEM_CARD_ETC + VLTN_EXMT + LANE_EXEM_BUSAN_ETC + VLTN_EXMT_BUSAN)
		        +(VLTN_UNP + EXMT_UNP + VLTN_DC_UNP)
		    ),0) AS 합계
		    
		FROM
		    PROC_DAYFINPAYTOT
		WHERE WORK_DATE = #{WORK_DATE}
			AND SUM_DIV = 1
	</select>
	
	<select id="selectBeforeExemInfo" resultType="hashmap">
	/* Mapper ID: selectBeforeExemInfo */
		 SELECT
		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN TYPE_DIV
                WHEN 1 THEN '합계' END AS BEF_EXEM_DIV,

		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN FC_CHG_FORMAT(CNT, '4')
                WHEN 1 THEN FC_CHG_FORMAT(SUM(CNT), '4') END AS BEF_EXEM_CNT,

		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN DECODE(SUM(CNT), '0', '0', TO_CHAR(ROUND((CNT * 100.0 / SUM(CNT) OVER ()),2), 'FM999,999,990.99') || '%')
                WHEN 1 THEN DECODE(SUM(CNT),'0','0%','100.00%') END AS BEF_EXEM_PER,
             FLAG
		FROM
		(
			SELECT 
				3 AS FLAG,
			    '다자녀' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_03 ELSE 0 END),0) AS CNT

			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				2 AS FLAG,
			    '유공자' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_04 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				1 AS FLAG,
			    '장애인' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_05 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				5 AS FLAG,
			    '친환경' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_06 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				6 AS FLAG,
			    '두리발' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_14 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				7 AS FLAG,
			    '기타' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_ETC ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL

            SELECT 
            	4 AS FLAG,
			    '공차택시' AS TYPE_DIV,
			    NVL(SUM(EMPTY_TAXI_CNT),0) AS CNT
                
			FROM PROC_DAYFININFO
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}

			) B
		GROUP BY ROLLUP((TYPE_DIV,CNT,FLAG))
		ORDER BY FLAG, GROUPING(TYPE_DIV)

	</select>
	
	<select id="selectPreRegisterInfo" resultType="hashmap">
	/* Mapper ID:  selectPreRegisterInfo*/
	SELECT
	    EXMPTN_TYPE_NAME AS PRE_REG_NAME,
	    CNT AS PRE_REG_O_CNT,
	    TO_CHAR(CNT, 'FM999,999,999') AS PRE_REG_CNT,
	    TO_CHAR(ROUND((CNT * 100.0 / SUM(CNT) OVER ()),2), 'FM990.99') || '%' AS PRE_REG_PER
	FROM
	(
	SELECT 
	     A.EXMPTN_TYPE, 
	    CASE 
	        WHEN A.EXMPTN_TYPE = '01' THEN '일반'
	        WHEN A.EXMPTN_TYPE = '02' THEN '일반'
	        WHEN A.EXMPTN_TYPE = '03' THEN '다자녀'
	        WHEN A.EXMPTN_TYPE = '04' THEN '유공자'
	        WHEN A.EXMPTN_TYPE = '05' THEN '장애인'
	        WHEN A.EXMPTN_TYPE = '06' THEN '전기(부산)'
	        WHEN A.EXMPTN_TYPE = '07' THEN '수소(부산)'
	        WHEN A.EXMPTN_TYPE = '08' THEN '공차(택시)'
	        WHEN A.EXMPTN_TYPE = '09' THEN '우수기업인'
	        WHEN A.EXMPTN_TYPE = '10' THEN '우수납세자 '
	        WHEN A.EXMPTN_TYPE = '11' THEN '효행자'
	        WHEN A.EXMPTN_TYPE = '12' THEN '모범노동자'
	        WHEN A.EXMPTN_TYPE = '13' THEN '장애인복지사업'
	        WHEN A.EXMPTN_TYPE = '14' THEN '두리발'
	        WHEN A.EXMPTN_TYPE = '15' THEN '시내순환관광버스'
	        WHEN A.EXMPTN_TYPE = '16' THEN '시내공항리무진버스'
	        WHEN A.EXMPTN_TYPE = '17' THEN '저공해차량'
	        ELSE '기타'
	    END AS EXMPTN_TYPE_NAME,
	    COUNT(*) AS CNT
	FROM MQNIC.VHCL_REG_INFO A, MQNIC.MBER_INFO B
	WHERE A.MBR_ID = B.MBR_ID
	AND A.USE_YN = 'Y'
	AND #{WORK_DATE} >= TO_CHAR(B.JOIN_DT, 'YYYYMMDD')
	GROUP BY A.EXMPTN_TYPE
	ORDER BY A.EXMPTN_TYPE ASC
	) B
	UNION ALL
	SELECT 
	    '합계', SUM(CNT), TO_CHAR(SUM(CNT), 'FM999,999,999'), '100.00%'
	FROM
	(
	SELECT 
	    A.EXMPTN_TYPE, 
	    CASE 
	        WHEN A.EXMPTN_TYPE = '01' THEN '일반'
	        WHEN A.EXMPTN_TYPE = '02' THEN '일반'
	        WHEN A.EXMPTN_TYPE = '03' THEN '다자녀'
	        WHEN A.EXMPTN_TYPE = '04' THEN '유공자'
	        WHEN A.EXMPTN_TYPE = '05' THEN '장애인'
	        WHEN A.EXMPTN_TYPE = '06' THEN '전기(부산)'
	        WHEN A.EXMPTN_TYPE = '07' THEN '수소(부산)'
	        WHEN A.EXMPTN_TYPE = '08' THEN '공차(택시)'
	        WHEN A.EXMPTN_TYPE = '09' THEN '우수기업인'
	        WHEN A.EXMPTN_TYPE = '10' THEN '우수납세자 '
	        WHEN A.EXMPTN_TYPE = '11' THEN '효행자'
	        WHEN A.EXMPTN_TYPE = '12' THEN '모범노동자'
	        WHEN A.EXMPTN_TYPE = '13' THEN '장애인복지사업'
	        WHEN A.EXMPTN_TYPE = '14' THEN '두리발'
	        WHEN A.EXMPTN_TYPE = '15' THEN '시내순환관광버스'
	        WHEN A.EXMPTN_TYPE = '16' THEN '시내공항리무진버스'
	        WHEN A.EXMPTN_TYPE = '17' THEN '저공해차량'
	        ELSE '기타'
	    END AS EXMPTN_TYPE_NAME,
	    COUNT(*) AS CNT
	FROM MQNIC.VHCL_REG_INFO A, MQNIC.MBER_INFO B
	WHERE A.MBR_ID = B.MBR_ID
	AND #{WORK_DATE} >= TO_CHAR(B.JOIN_DT, 'YYYYMMDD')
	AND A.USE_YN = 'Y'
	GROUP BY A.EXMPTN_TYPE
	ORDER BY A.EXMPTN_TYPE ASC
	) B    


	</select>
	
	<select id="selectPreRegisterNormalInfo" resultType="hashmap">
	 SELECT
   		 count(*) as CNT
	 FROM MQNIC.MBER_INFO MI
	     JOIN MQNIC.VHCL_REG_INFO VRI ON MI.MBR_ID = VRI.MBR_ID
	     JOIN (
		    SELECT
		        MBR_ID
		         ,count(MBR_ID) AS CNT
		    FROM MQNIC.CARD_BFHD_REG_DSCTN
		    WHERE USE_YN = 'Y'
		    GROUP BY MBR_ID
		) CBRD ON MI.MBR_ID = CBRD.MBR_ID
	WHERE MI.MBR_STTS_TYPE = '1'
	  AND MI.WHDWL_YN = 'N'
	  AND VRI.USE_YN = 'Y'
	  AND CBRD.CNT > 0
	  AND exmptn_type in ('01','02')
	  AND #{WORK_DATE} >= TO_CHAR(MI.JOIN_DT, 'YYYYMMDD')
	</select>
	
	
	<select id="selectAfterResultInfo" resultType="hashmap">
	/* Mapper ID:  selectAfterResultInfo */
	
SELECT 
		    TAXI_EXM_TYPE_NM AS AFT_TAXI_TYPE,  
		    CASE WHEN TAXI_EXM_TYPE = '2' AND PAY_DIV IN ('하이패스(선불)', '하이패스(후불)') THEN REFUND_DIV ELSE PAY_DIV END AS AFT_TAXI_DIV,
		    SUM(CNT)||'대' AS AFT_TAXI_CNT,
		    SUM(CNT) AS AFT_TAXI_O_CNT,
		    SUM(FARE) AS AFT_TAXI_O_FARE,
		    TO_CHAR(SUM(FARE), 'FM999,999,999')||'원' AS AFT_TAXI_FARE,
		    TO_CHAR(ROUND((SUM(CNT) * 100.0 / SUM(SUM(CNT)) OVER ()),2), 'FM990.99') || '%' AS AFT_TAXI_PER
		FROM
		(
		    SELECT
		        TAXI_EXM_TYPE,
		        TAXI_EXM_TYPE_NM,
		        PAY_DIV,
		        REFUND_DIV,
		        SUM(1) CNT,
		        SUM(CASE WHEN PASS_FARE > 0 THEN PASS_FARE ELSE PAY_FARE END) FARE
		    FROM(
		        SELECT
                   A.WORK_DATE, A.WORK_NO, A.HAND_SNO, A.TAXI_TRNRCP_DT, D.HAND_CAR_NO, A.TAXI_EXM_TYPE, 
                   DECODE(A.TAXI_EXM_TYPE,'0','미처리','1','공차택시 미대상','2','공차택시 대상','9','공차택시 미대상') AS TAXI_EXM_TYPE_NM,
                   B.VLTN_CODE, B.ECARD_TYPE,
                   CASE 
                        WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE = '2'  THEN B.ORIGIN_PASS_FARE
                        WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE = 0 THEN B.PASS_FARE
                        WHEN B.VLTN_CODE != '00' AND A.TAXI_EXM_TYPE = '2'  THEN B.ORIGIN_PASS_FARE
                        WHEN B.VLTN_CODE !=  '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE = 0 THEN B.PASS_FARE
                   END AS PASS_FARE,
                   CASE WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE = '2' AND B.PAY_FARE > 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE = '2' AND B.PAY_FARE = 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE > 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE = '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE = 0 THEN C.OFC_PAY_FARE_CASH
                        WHEN B.VLTN_CODE != '00' AND A.TAXI_EXM_TYPE = '2' AND B.PAY_FARE > 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE != '00' AND A.TAXI_EXM_TYPE = '2' AND B.PAY_FARE = 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE != '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE > 0 THEN B.PAY_FARE
                        WHEN B.VLTN_CODE != '00' AND A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE = 0 THEN C.OFC_PAY_FARE_CASH
                   END AS PAY_FARE,                    
                   CASE WHEN B.ECARD_TYPE = '00' AND B.PAY_FARE > 0 THEN '하이패스(선불)' 
                        WHEN B.ECARD_TYPE = '01' AND B.PAY_FARE > 0 THEN '하이패스(후불)'
                        WHEN C.HAND_TYPE = '30' THEN '사전등록'
                        WHEN C.HAND_TYPE = '40' AND A.TAXI_EXM_TYPE IN ('2') THEN '면제(미과금)'
                        WHEN A.TAXI_EXM_TYPE IN ('0','1','9') AND B.PAY_FARE = 0 THEN '미납(후불)' 
                  END AS PAY_DIV,
                  CASE WHEN A.TAXI_EXM_TYPE = 2 AND B.PAY_FARE > 0 THEN '면제(환불대상)' ELSE '환불미대상' END AS REFUND_DIV
            FROM PROC_TAXI_HIST A, PRIM_ETCHAND B, PRIM_ETCVLTN C, PRIM_HANDCARNO D
            WHERE A.IC_CODE = B.IC_CODE(+)
                AND A.WORK_DATE = B.WORK_DATE(+)
                AND A.WORK_NO = B.WORK_NO(+)
                AND A.HAND_SNO = B.HAND_SNO(+)
                AND A.IC_CODE = C.IC_CODE(+)
                AND A.WORK_DATE = C.WORK_DATE(+)
                AND A.WORK_NO = C.WORK_NO(+)
                AND A.HAND_SNO = C.HAND_SNO(+)
                AND A.IC_CODE = D.IC_CODE(+)
                AND A.WORK_DATE = D.WORK_DATE(+)
                AND A.WORK_NO = D.WORK_NO(+)
                AND A.HAND_SNO = D.HAND_SNO(+)   
                AND A.WORK_DATE = #{WORK_DATE}
        ) 
        GROUP BY TAXI_EXM_TYPE, TAXI_EXM_TYPE_NM, PAY_DIV, REFUND_DIV
        )
		WHERE TAXI_EXM_TYPE != '0'
		GROUP BY TAXI_EXM_TYPE_NM, CASE WHEN TAXI_EXM_TYPE = '2' AND PAY_DIV IN ('하이패스(선불)', '하이패스(후불)') THEN REFUND_DIV ELSE PAY_DIV END
		ORDER BY TAXI_EXM_TYPE_NM


	</select>
	
	<select id="selectAfterExemInfo" resultType="hashmap">
	/* Mapper ID:  selectAfterExemInfo */
	
	 	SELECT
		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN TYPE_DIV
                WHEN 1 THEN '합계' END AS AFT_EXEM_DIV,

		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN FC_CHG_FORMAT(CNT, '4')
                WHEN 1 THEN FC_CHG_FORMAT(SUM(CNT), '4') END AS AFT_EXEM_CNT,

		    CASE GROUPING(TYPE_DIV) WHEN 0 THEN DECODE(SUM(CNT), '0', '0', TO_CHAR(ROUND((CNT * 100.0 / SUM(CNT) OVER ()),2), 'FM999,999,990.99') || '%')
                WHEN 1 THEN DECODE(SUM(CNT),'0','0%','100.00%') END AS AFT_EXEM_PER,
            FLAG
		FROM
		(
			SELECT 
				3 AS FLAG,
			    '다자녀' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_03 ELSE 0 END),0) AS CNT

			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				2 AS FLAG,
			    '유공자' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_04 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				1 AS FLAG,
			    '장애인' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_05 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				5 AS FLAG,
			    '친환경' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_06 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				6 AS FLAG,
			    '두리발' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_14 ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL
			SELECT 
				7 AS FLAG,
			    '기타' AS TYPE_DIV,
			    NVL(SUM(CASE WHEN SUM_DIV = '0' THEN EXMT_DETAIL_ETC ELSE 0 END),0) AS CNT
			FROM PROC_DAYFINPAYTOT
			WHERE 1=1
			    AND WORK_DATE = #{WORK_DATE}
			UNION ALL

            SELECT 
            	4 AS FLAG,
            	'택시' AS TYPE_DIV,
                COUNT(*) AS CNT
            FROM PROC_TAXI_HIST 
            WHERE TAXI_EXM_TYPE = '2'
             AND WORK_DATE = #{WORK_DATE}

			) B
		GROUP BY ROLLUP((TYPE_DIV,CNT,FLAG))
		ORDER BY FLAG, GROUPING(TYPE_DIV)
       
	</select>
</mapper>